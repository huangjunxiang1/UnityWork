//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-23083092
// Cuda compilation tools, release 9.1, V9.1.85
// Based on LLVM 3.4svn
//

.version 6.1
.target sm_30
.address_size 64

	// .globl	_Z6oxMainv
.global .align 8 .b8 pixelID[8];
.global .align 8 .b8 resolution[8];
.global .align 4 .b8 normal[12];
.global .align 4 .b8 camPos[12];
.global .align 4 .b8 root[4];
.global .align 4 .u32 imageEnabled;
.global .texref lightmap;
.global .align 16 .b8 tileInfo[16];
.global .align 4 .u32 additive;
.global .align 1 .b8 image[1];
.global .align 1 .b8 image_HDR[1];
.global .align 1 .b8 image_HDR2[1];
.global .align 1 .b8 image_Mask[1];
.global .align 1 .b8 image_RNM0[1];
.global .align 1 .b8 image_RNM1[1];
.global .align 1 .b8 image_RNM2[1];
.global .align 1 .b8 image_RNM3[1];
.global .align 1 .b8 uvpos[1];
.global .align 1 .b8 uvnormal[1];
.global .align 4 .u32 samples;
.global .align 4 .f32 lightInvCutoff;
.global .align 4 .f32 lightRadius;
.global .align 4 .b8 lightPos[12];
.global .align 4 .b8 lightColor[12];
.global .align 4 .u32 ignoreNormal;
.global .align 4 .b8 lightConeDir[12];
.global .align 8 .b8 lightCone[8];
.global .align 4 .f32 lightFalloffFakeDistanceMult;
.global .align 4 .f32 lightFalloffMinRadiusSq;
.global .align 4 .b8 _ZN21rti_internal_typeinfo7pixelIDE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10resolutionE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6camPosE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo4rootE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12imageEnabledE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8tileInfoE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8additiveE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo7samplesE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14lightInvCutoffE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11lightRadiusE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8lightPosE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10lightColorE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12ignoreNormalE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12lightConeDirE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo9lightConeE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo28lightFalloffFakeDistanceMultE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo23lightFalloffMinRadiusSqE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 8 .b8 _ZN21rti_internal_typename7pixelIDE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename10resolutionE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6camPosE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 16 .b8 _ZN21rti_internal_typename4rootE[9] = {114, 116, 79, 98, 106, 101, 99, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename12imageEnabledE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8tileInfoE[6] = {117, 105, 110, 116, 52, 0};
.global .align 4 .b8 _ZN21rti_internal_typename8additiveE[4] = {105, 110, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename7samplesE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename14lightInvCutoffE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename11lightRadiusE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8lightPosE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename10lightColorE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 4 .b8 _ZN21rti_internal_typename12ignoreNormalE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename12lightConeDirE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename9lightConeE[7] = {102, 108, 111, 97, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename28lightFalloffFakeDistanceMultE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename23lightFalloffMinRadiusSqE[6] = {102, 108, 111, 97, 116, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum7pixelIDE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10resolutionE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6camPosE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum4rootE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12imageEnabledE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8tileInfoE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8additiveE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum7samplesE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14lightInvCutoffE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11lightRadiusE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8lightPosE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10lightColorE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12ignoreNormalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12lightConeDirE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum9lightConeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum28lightFalloffFakeDistanceMultE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum23lightFalloffMinRadiusSqE = 4919;
.global .align 16 .b8 _ZN21rti_internal_semantic7pixelIDE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic10resolutionE[12] = {114, 116, 76, 97, 117, 110, 99, 104, 68, 105, 109, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic6normalE[17] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic6camPosE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic4rootE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12imageEnabledE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8tileInfoE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8additiveE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic7samplesE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic14lightInvCutoffE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11lightRadiusE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8lightPosE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic10lightColorE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12ignoreNormalE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12lightConeDirE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic9lightConeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic28lightFalloffFakeDistanceMultE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic23lightFalloffMinRadiusSqE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7pixelIDE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10resolutionE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6camPosE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation4rootE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12imageEnabledE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8tileInfoE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8additiveE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7samplesE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14lightInvCutoffE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11lightRadiusE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8lightPosE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10lightColorE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12ignoreNormalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12lightConeDirE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation9lightConeE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation28lightFalloffFakeDistanceMultE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation23lightFalloffMinRadiusSqE[1];

.visible .entry _Z6oxMainv(

)
{
	.local .align 4 .b8 	__local_depot0[4];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<122>;
	.reg .b16 	%rs<221>;
	.reg .f32 	%f<872>;
	.reg .b32 	%r<242>;
	.reg .b64 	%rd<369>;


	mov.u64 	%rd368, __local_depot0;
	cvta.local.u64 	%SP, %rd368;
	ld.global.v2.u32 	{%r28, %r29}, [pixelID];
	cvt.u64.u32	%rd12, %r28;
	cvt.u64.u32	%rd13, %r29;
	mov.u64 	%rd16, uvnormal;
	cvta.global.u64 	%rd11, %rd16;
	mov.u32 	%r26, 2;
	mov.u32 	%r27, 4;
	mov.u64 	%rd15, 0;
	// inline asm
	call (%rd10), _rt_buffer_get_64, (%rd11, %r26, %r27, %rd12, %rd13, %rd15, %rd15);
	// inline asm
	ld.u32 	%r1, [%rd10];
	shr.u32 	%r32, %r1, 16;
	cvt.u16.u32	%rs1, %r32;
	and.b16  	%rs12, %rs1, 255;
	cvt.u16.u32	%rs13, %r1;
	or.b16  	%rs14, %rs13, %rs12;
	setp.eq.s16	%p6, %rs14, 0;
	mov.f32 	%f848, 0f00000000;
	mov.f32 	%f849, %f848;
	mov.f32 	%f850, %f848;
	@%p6 bra 	BB0_2;

	ld.u8 	%rs15, [%rd10+1];
	and.b16  	%rs17, %rs13, 255;
	cvt.rn.f32.u16	%f113, %rs17;
	div.rn.f32 	%f114, %f113, 0f437F0000;
	fma.rn.f32 	%f115, %f114, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f116, %rs15;
	div.rn.f32 	%f117, %f116, 0f437F0000;
	fma.rn.f32 	%f118, %f117, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f119, %rs12;
	div.rn.f32 	%f120, %f119, 0f437F0000;
	fma.rn.f32 	%f121, %f120, 0f40000000, 0fBF800000;
	mul.f32 	%f122, %f118, %f118;
	fma.rn.f32 	%f123, %f115, %f115, %f122;
	fma.rn.f32 	%f124, %f121, %f121, %f123;
	sqrt.rn.f32 	%f125, %f124;
	rcp.rn.f32 	%f126, %f125;
	mul.f32 	%f848, %f115, %f126;
	mul.f32 	%f849, %f118, %f126;
	mul.f32 	%f850, %f121, %f126;

BB0_2:
	ld.global.v2.u32 	{%r33, %r34}, [pixelID];
	ld.global.v2.u32 	{%r36, %r37}, [tileInfo];
	add.s32 	%r2, %r33, %r36;
	add.s32 	%r3, %r34, %r37;
	setp.eq.f32	%p7, %f849, 0f00000000;
	setp.eq.f32	%p8, %f848, 0f00000000;
	and.pred  	%p9, %p8, %p7;
	setp.eq.f32	%p10, %f850, 0f00000000;
	and.pred  	%p11, %p9, %p10;
	@%p11 bra 	BB0_105;
	bra.uni 	BB0_3;

BB0_105:
	ld.global.u32 	%r241, [imageEnabled];
	and.b32  	%r190, %r241, 1;
	setp.eq.b32	%p114, %r190, 1;
	@!%p114 bra 	BB0_107;
	bra.uni 	BB0_106;

BB0_106:
	cvt.u64.u32	%rd256, %r2;
	cvt.u64.u32	%rd257, %r3;
	mov.u64 	%rd260, image;
	cvta.global.u64 	%rd255, %rd260;
	// inline asm
	call (%rd254), _rt_buffer_get_64, (%rd255, %r26, %r27, %rd256, %rd257, %rd15, %rd15);
	// inline asm
	mov.u16 	%rs153, 0;
	st.v4.u8 	[%rd254], {%rs153, %rs153, %rs153, %rs153};
	ld.global.u32 	%r241, [imageEnabled];

BB0_107:
	and.b32  	%r193, %r241, 8;
	setp.eq.s32	%p115, %r193, 0;
	@%p115 bra 	BB0_109;

	cvt.u64.u32	%rd264, %r3;
	cvt.u64.u32	%rd263, %r2;
	mov.u64 	%rd267, image_Mask;
	cvta.global.u64 	%rd262, %rd267;
	// inline asm
	call (%rd261), _rt_buffer_get_64, (%rd262, %r26, %r26, %rd263, %rd264, %rd15, %rd15);
	// inline asm
	mov.f32 	%f761, 0f00000000;
	cvt.rzi.u32.f32	%r196, %f761;
	cvt.u16.u32	%rs154, %r196;
	mov.u16 	%rs155, 0;
	st.v2.u8 	[%rd261], {%rs154, %rs155};
	ld.global.u32 	%r241, [imageEnabled];

BB0_109:
	cvt.u64.u32	%rd8, %r2;
	cvt.u64.u32	%rd9, %r3;
	and.b32  	%r197, %r241, 4;
	setp.eq.s32	%p116, %r197, 0;
	@%p116 bra 	BB0_113;

	ld.global.u32 	%r198, [additive];
	setp.eq.s32	%p117, %r198, 0;
	@%p117 bra 	BB0_112;

	mov.u64 	%rd280, image_HDR;
	cvta.global.u64 	%rd269, %rd280;
	mov.u32 	%r202, 8;
	// inline asm
	call (%rd268), _rt_buffer_get_64, (%rd269, %r26, %r202, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs162, %rs163, %rs164, %rs165}, [%rd268];
	// inline asm
	{  cvt.f32.f16 %f762, %rs162;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f763, %rs163;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f764, %rs164;}

	// inline asm
	// inline asm
	call (%rd274), _rt_buffer_get_64, (%rd269, %r26, %r202, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f765, %f762, 0f00000000;
	add.f32 	%f766, %f763, 0f00000000;
	add.f32 	%f767, %f764, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs161, %f767;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs160, %f766;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs159, %f765;}

	// inline asm
	mov.u16 	%rs166, 0;
	st.v4.u16 	[%rd274], {%rs159, %rs160, %rs161, %rs166};
	bra.uni 	BB0_113;

BB0_3:
	ld.global.v2.u32 	{%r43, %r44}, [pixelID];
	cvt.u64.u32	%rd19, %r43;
	cvt.u64.u32	%rd20, %r44;
	mov.u64 	%rd23, uvpos;
	cvta.global.u64 	%rd18, %rd23;
	mov.u32 	%r42, 12;
	// inline asm
	call (%rd17), _rt_buffer_get_64, (%rd18, %r26, %r42, %rd19, %rd20, %rd15, %rd15);
	// inline asm
	ld.global.f32 	%f7, [lightPos];
	ld.f32 	%f12, [%rd17+8];
	ld.f32 	%f10, [%rd17+4];
	ld.f32 	%f8, [%rd17];
	sub.f32 	%f129, %f7, %f8;
	ld.global.f32 	%f9, [lightPos+4];
	sub.f32 	%f130, %f9, %f10;
	ld.global.f32 	%f11, [lightPos+8];
	sub.f32 	%f131, %f11, %f12;
	mul.f32 	%f132, %f130, %f130;
	fma.rn.f32 	%f133, %f129, %f129, %f132;
	fma.rn.f32 	%f134, %f131, %f131, %f133;
	sqrt.rn.f32 	%f135, %f134;
	rcp.rn.f32 	%f136, %f135;
	ld.global.f32 	%f137, [lightFalloffFakeDistanceMult];
	mul.f32 	%f16, %f135, %f137;
	ld.global.f32 	%f138, [lightInvCutoff];
	mul.f32 	%f17, %f135, %f138;
	mov.f32 	%f142, 0f40800000;
	abs.f32 	%f19, %f17;
	setp.lt.f32	%p12, %f19, 0f00800000;
	mul.f32 	%f144, %f19, 0f4B800000;
	selp.f32	%f145, 0fC3170000, 0fC2FE0000, %p12;
	selp.f32	%f146, %f144, %f19, %p12;
	mov.b32 	 %r47, %f146;
	and.b32  	%r48, %r47, 8388607;
	or.b32  	%r49, %r48, 1065353216;
	mov.b32 	 %f147, %r49;
	shr.u32 	%r50, %r47, 23;
	cvt.rn.f32.u32	%f148, %r50;
	add.f32 	%f149, %f145, %f148;
	setp.gt.f32	%p13, %f147, 0f3FB504F3;
	mul.f32 	%f150, %f147, 0f3F000000;
	add.f32 	%f151, %f149, 0f3F800000;
	selp.f32	%f152, %f150, %f147, %p13;
	selp.f32	%f153, %f151, %f149, %p13;
	add.f32 	%f154, %f152, 0fBF800000;
	add.f32 	%f128, %f152, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f127,%f128;
	// inline asm
	add.f32 	%f155, %f154, %f154;
	mul.f32 	%f156, %f127, %f155;
	mul.f32 	%f157, %f156, %f156;
	mov.f32 	%f158, 0f3C4CAF63;
	mov.f32 	%f159, 0f3B18F0FE;
	fma.rn.f32 	%f160, %f159, %f157, %f158;
	mov.f32 	%f161, 0f3DAAAABD;
	fma.rn.f32 	%f162, %f160, %f157, %f161;
	mul.rn.f32 	%f163, %f162, %f157;
	mul.rn.f32 	%f164, %f163, %f156;
	sub.f32 	%f165, %f154, %f156;
	neg.f32 	%f166, %f156;
	add.f32 	%f167, %f165, %f165;
	fma.rn.f32 	%f168, %f166, %f154, %f167;
	mul.rn.f32 	%f169, %f127, %f168;
	add.f32 	%f170, %f164, %f156;
	sub.f32 	%f171, %f156, %f170;
	add.f32 	%f172, %f164, %f171;
	add.f32 	%f173, %f169, %f172;
	add.f32 	%f174, %f170, %f173;
	sub.f32 	%f175, %f170, %f174;
	add.f32 	%f176, %f173, %f175;
	mov.f32 	%f177, 0f3F317200;
	mul.rn.f32 	%f178, %f153, %f177;
	mov.f32 	%f179, 0f35BFBE8E;
	mul.rn.f32 	%f180, %f153, %f179;
	add.f32 	%f181, %f178, %f174;
	sub.f32 	%f182, %f178, %f181;
	add.f32 	%f183, %f174, %f182;
	add.f32 	%f184, %f176, %f183;
	add.f32 	%f185, %f180, %f184;
	add.f32 	%f186, %f181, %f185;
	sub.f32 	%f187, %f181, %f186;
	add.f32 	%f188, %f185, %f187;
	mul.rn.f32 	%f189, %f142, %f186;
	neg.f32 	%f190, %f189;
	fma.rn.f32 	%f191, %f142, %f186, %f190;
	fma.rn.f32 	%f192, %f142, %f188, %f191;
	mov.f32 	%f193, 0f00000000;
	fma.rn.f32 	%f194, %f193, %f186, %f192;
	add.rn.f32 	%f195, %f189, %f194;
	neg.f32 	%f196, %f195;
	add.rn.f32 	%f197, %f189, %f196;
	add.rn.f32 	%f198, %f197, %f194;
	mov.b32 	 %r51, %f195;
	setp.eq.s32	%p14, %r51, 1118925336;
	add.s32 	%r52, %r51, -1;
	mov.b32 	 %f199, %r52;
	add.f32 	%f200, %f198, 0f37000000;
	selp.f32	%f201, %f199, %f195, %p14;
	selp.f32	%f20, %f200, %f198, %p14;
	mul.f32 	%f202, %f201, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f203, %f202;
	mov.f32 	%f204, 0fBF317200;
	fma.rn.f32 	%f205, %f203, %f204, %f201;
	mov.f32 	%f206, 0fB5BFBE8E;
	fma.rn.f32 	%f207, %f203, %f206, %f205;
	mul.f32 	%f208, %f207, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f209, %f208;
	add.f32 	%f210, %f203, 0f00000000;
	ex2.approx.f32 	%f211, %f210;
	mul.f32 	%f212, %f209, %f211;
	setp.lt.f32	%p15, %f201, 0fC2D20000;
	selp.f32	%f213, 0f00000000, %f212, %p15;
	setp.gt.f32	%p16, %f201, 0f42D20000;
	selp.f32	%f851, 0f7F800000, %f213, %p16;
	setp.eq.f32	%p17, %f851, 0f7F800000;
	@%p17 bra 	BB0_5;

	fma.rn.f32 	%f851, %f851, %f20, %f851;

BB0_5:
	mov.f32 	%f802, 0f40000000;
	cvt.rzi.f32.f32	%f801, %f802;
	add.f32 	%f800, %f801, %f801;
	mov.f32 	%f799, 0f40800000;
	sub.f32 	%f798, %f799, %f800;
	abs.f32 	%f797, %f798;
	setp.lt.f32	%p18, %f17, 0f00000000;
	setp.eq.f32	%p19, %f797, 0f3F800000;
	and.pred  	%p1, %p18, %p19;
	mov.b32 	 %r53, %f851;
	xor.b32  	%r54, %r53, -2147483648;
	mov.b32 	 %f214, %r54;
	selp.f32	%f853, %f214, %f851, %p1;
	setp.eq.f32	%p20, %f17, 0f00000000;
	@%p20 bra 	BB0_8;
	bra.uni 	BB0_6;

BB0_8:
	add.f32 	%f217, %f17, %f17;
	selp.f32	%f853, %f217, 0f00000000, %p19;
	bra.uni 	BB0_9;

BB0_6:
	setp.geu.f32	%p21, %f17, 0f00000000;
	@%p21 bra 	BB0_9;

	mov.f32 	%f847, 0f40800000;
	cvt.rzi.f32.f32	%f216, %f847;
	setp.neu.f32	%p22, %f216, 0f40800000;
	selp.f32	%f853, 0f7FFFFFFF, %f853, %p22;

BB0_9:
	abs.f32 	%f803, %f17;
	add.f32 	%f218, %f803, 0f40800000;
	mov.b32 	 %r55, %f218;
	setp.lt.s32	%p24, %r55, 2139095040;
	@%p24 bra 	BB0_14;

	abs.f32 	%f845, %f17;
	setp.gtu.f32	%p25, %f845, 0f7F800000;
	@%p25 bra 	BB0_13;
	bra.uni 	BB0_11;

BB0_13:
	add.f32 	%f853, %f17, 0f40800000;
	bra.uni 	BB0_14;

BB0_11:
	abs.f32 	%f846, %f17;
	setp.neu.f32	%p26, %f846, 0f7F800000;
	@%p26 bra 	BB0_14;

	selp.f32	%f853, 0fFF800000, 0f7F800000, %p1;

BB0_14:
	sub.f32 	%f809, %f11, %f12;
	mul.f32 	%f808, %f809, %f136;
	sub.f32 	%f807, %f7, %f8;
	mul.f32 	%f806, %f807, %f136;
	sub.f32 	%f805, %f9, %f10;
	mul.f32 	%f804, %f805, %f136;
	mov.f32 	%f859, 0f3F800000;
	sub.f32 	%f220, %f859, %f853;
	setp.eq.f32	%p27, %f17, 0f3F800000;
	selp.f32	%f221, 0f00000000, %f220, %p27;
	cvt.sat.f32.f32	%f222, %f221;
	ld.global.f32 	%f223, [lightFalloffMinRadiusSq];
	fma.rn.f32 	%f224, %f16, %f16, %f223;
	div.rn.f32 	%f225, %f222, %f224;
	mul.f32 	%f226, %f849, %f804;
	fma.rn.f32 	%f227, %f848, %f806, %f226;
	fma.rn.f32 	%f31, %f850, %f808, %f227;
	ld.global.u32 	%r239, [imageEnabled];
	ld.global.f32 	%f228, [lightConeDir];
	mul.f32 	%f229, %f806, %f228;
	ld.global.f32 	%f230, [lightConeDir+4];
	mul.f32 	%f231, %f804, %f230;
	neg.f32 	%f232, %f231;
	sub.f32 	%f233, %f232, %f229;
	ld.global.f32 	%f234, [lightConeDir+8];
	mul.f32 	%f235, %f808, %f234;
	sub.f32 	%f236, %f233, %f235;
	ld.global.v2.f32 	{%f237, %f238}, [lightCone];
	fma.rn.f32 	%f241, %f237, %f236, %f238;
	cvt.sat.f32.f32	%f242, %f241;
	mul.f32 	%f243, %f242, %f242;
	mul.f32 	%f32, %f225, %f243;
	ld.global.f32 	%f244, [lightColor+4];
	ld.global.f32 	%f245, [lightColor];
	max.f32 	%f246, %f245, %f244;
	ld.global.f32 	%f247, [lightColor+8];
	max.f32 	%f248, %f246, %f247;
	mul.f32 	%f249, %f32, %f248;
	setp.lt.f32	%p28, %f249, 0f3727C5AC;
	@%p28 bra 	BB0_85;
	bra.uni 	BB0_15;

BB0_85:
	and.b32  	%r147, %r239, 1;
	setp.eq.b32	%p106, %r147, 1;
	@!%p106 bra 	BB0_87;
	bra.uni 	BB0_86;

BB0_86:
	cvt.u64.u32	%rd142, %r2;
	cvt.u64.u32	%rd143, %r3;
	mov.u64 	%rd146, image;
	cvta.global.u64 	%rd141, %rd146;
	// inline asm
	call (%rd140), _rt_buffer_get_64, (%rd141, %r26, %r27, %rd142, %rd143, %rd15, %rd15);
	// inline asm
	mov.u16 	%rs89, 1;
	mov.u16 	%rs90, 0;
	st.v4.u8 	[%rd140], {%rs90, %rs90, %rs90, %rs89};
	ld.global.u32 	%r239, [imageEnabled];

BB0_87:
	and.b32  	%r150, %r239, 8;
	setp.eq.s32	%p107, %r150, 0;
	@%p107 bra 	BB0_89;

	cvt.u64.u32	%rd150, %r3;
	cvt.u64.u32	%rd149, %r2;
	mov.u64 	%rd153, image_Mask;
	cvta.global.u64 	%rd148, %rd153;
	// inline asm
	call (%rd147), _rt_buffer_get_64, (%rd148, %r26, %r26, %rd149, %rd150, %rd15, %rd15);
	// inline asm
	mov.f32 	%f718, 0f00000000;
	cvt.rzi.u32.f32	%r153, %f718;
	cvt.u16.u32	%rs91, %r153;
	mov.u16 	%rs92, 255;
	st.v2.u8 	[%rd147], {%rs91, %rs92};
	ld.global.u32 	%r239, [imageEnabled];

BB0_89:
	cvt.u64.u32	%rd6, %r2;
	cvt.u64.u32	%rd7, %r3;
	and.b32  	%r154, %r239, 4;
	setp.eq.s32	%p108, %r154, 0;
	@%p108 bra 	BB0_93;

	ld.global.u32 	%r155, [additive];
	setp.eq.s32	%p109, %r155, 0;
	mov.f32 	%f719, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs93, %f719;}

	// inline asm
	@%p109 bra 	BB0_92;

	mov.u64 	%rd166, image_HDR;
	cvta.global.u64 	%rd155, %rd166;
	mov.u32 	%r159, 8;
	// inline asm
	call (%rd154), _rt_buffer_get_64, (%rd155, %r26, %r159, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs100, %rs101, %rs102, %rs103}, [%rd154];
	// inline asm
	{  cvt.f32.f16 %f720, %rs100;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f721, %rs101;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f722, %rs102;}

	// inline asm
	// inline asm
	call (%rd160), _rt_buffer_get_64, (%rd155, %r26, %r159, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f723, %f720, 0f00000000;
	add.f32 	%f724, %f721, 0f00000000;
	add.f32 	%f725, %f722, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs99, %f725;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs98, %f724;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs97, %f723;}

	// inline asm
	st.v4.u16 	[%rd160], {%rs97, %rs98, %rs99, %rs93};
	bra.uni 	BB0_93;

BB0_15:
	mov.f32 	%f857, 0f00000000;
	mul.f32 	%f251, %f8, 0f3456BF95;
	abs.f32 	%f252, %f848;
	div.rn.f32 	%f253, %f251, %f252;
	abs.f32 	%f254, %f849;
	mul.f32 	%f255, %f10, 0f3456BF95;
	div.rn.f32 	%f256, %f255, %f254;
	abs.f32 	%f257, %f850;
	mul.f32 	%f258, %f12, 0f3456BF95;
	div.rn.f32 	%f259, %f258, %f257;
	abs.f32 	%f260, %f253;
	abs.f32 	%f261, %f256;
	abs.f32 	%f262, %f259;
	mov.f32 	%f263, 0f38D1B717;
	max.f32 	%f264, %f260, %f263;
	max.f32 	%f265, %f261, %f263;
	max.f32 	%f266, %f262, %f263;
	fma.rn.f32 	%f33, %f848, %f264, %f8;
	fma.rn.f32 	%f34, %f849, %f265, %f10;
	fma.rn.f32 	%f35, %f850, %f266, %f12;
	ld.global.u32 	%r235, [samples];
	setp.lt.s32	%p29, %r235, 1;
	@%p29 bra 	BB0_18;

	mul.f32 	%f268, %f33, 0f3456BF95;
	abs.f32 	%f269, %f268;
	mul.f32 	%f270, %f34, 0f3456BF95;
	abs.f32 	%f271, %f270;
	mul.f32 	%f272, %f35, 0f3456BF95;
	abs.f32 	%f273, %f272;
	max.f32 	%f274, %f269, %f271;
	max.f32 	%f275, %f274, %f273;
	max.f32 	%f36, %f275, %f263;
	add.u64 	%rd24, %SP, 0;
	cvta.to.local.u64 	%rd2, %rd24;
	mov.f32 	%f857, 0f00000000;
	mov.u32 	%r234, 0;
	mov.u32 	%r233, %r239;
	mov.f32 	%f854, %f11;
	mov.f32 	%f855, %f9;
	mov.f32 	%f856, %f7;
	bra.uni 	BB0_17;

BB0_84:
	ld.global.f32 	%f856, [lightPos];
	ld.global.f32 	%f855, [lightPos+4];
	ld.global.f32 	%f854, [lightPos+8];
	ld.global.u32 	%r233, [imageEnabled];

BB0_17:
	cvt.rn.f32.s32	%f285, %r234;
	mul.f32 	%f286, %f285, 0f3DD32618;
	cvt.rmi.f32.f32	%f287, %f286;
	sub.f32 	%f288, %f286, %f287;
	mul.f32 	%f289, %f285, 0f3DD2F1AA;
	cvt.rmi.f32.f32	%f290, %f289;
	sub.f32 	%f291, %f289, %f290;
	mul.f32 	%f292, %f285, 0f3DC74539;
	cvt.rmi.f32.f32	%f293, %f292;
	sub.f32 	%f294, %f292, %f293;
	add.f32 	%f295, %f291, 0f4199851F;
	add.f32 	%f296, %f294, 0f4199851F;
	add.f32 	%f297, %f288, 0f4199851F;
	mul.f32 	%f298, %f291, %f296;
	fma.rn.f32 	%f299, %f288, %f295, %f298;
	fma.rn.f32 	%f300, %f297, %f294, %f299;
	add.f32 	%f301, %f288, %f300;
	add.f32 	%f302, %f291, %f300;
	add.f32 	%f303, %f294, %f300;
	add.f32 	%f304, %f301, %f302;
	mul.f32 	%f305, %f303, %f304;
	cvt.rmi.f32.f32	%f306, %f305;
	sub.f32 	%f307, %f305, %f306;
	add.f32 	%f308, %f301, %f303;
	mul.f32 	%f309, %f302, %f308;
	cvt.rmi.f32.f32	%f310, %f309;
	sub.f32 	%f311, %f309, %f310;
	add.f32 	%f312, %f302, %f303;
	mul.f32 	%f313, %f301, %f312;
	cvt.rmi.f32.f32	%f314, %f313;
	sub.f32 	%f315, %f313, %f314;
	fma.rn.f32 	%f316, %f307, 0f40000000, 0fBF800000;
	fma.rn.f32 	%f317, %f311, 0f40000000, 0fBF800000;
	fma.rn.f32 	%f318, %f315, 0f40000000, 0fBF800000;
	ld.global.f32 	%f319, [lightRadius];
	fma.rn.f32 	%f320, %f319, %f316, %f856;
	fma.rn.f32 	%f321, %f319, %f317, %f855;
	fma.rn.f32 	%f322, %f319, %f318, %f854;
	sub.f32 	%f323, %f320, %f8;
	sub.f32 	%f324, %f321, %f10;
	sub.f32 	%f325, %f322, %f12;
	mul.f32 	%f326, %f324, %f324;
	fma.rn.f32 	%f327, %f323, %f323, %f326;
	fma.rn.f32 	%f328, %f325, %f325, %f327;
	sqrt.rn.f32 	%f284, %f328;
	rcp.rn.f32 	%f329, %f284;
	mul.f32 	%f280, %f329, %f323;
	mul.f32 	%f281, %f329, %f324;
	mul.f32 	%f282, %f329, %f325;
	and.b32  	%r60, %r233, 32;
	setp.eq.s32	%p30, %r60, 0;
	selp.f32	%f330, 0f3F800000, 0f41200000, %p30;
	mul.f32 	%f283, %f330, %f36;
	mov.u32 	%r61, 1065353216;
	st.local.u32 	[%rd2], %r61;
	ld.global.u32 	%r57, [root];
	mov.u32 	%r58, 1;
	// inline asm
	call _rt_trace_64, (%r57, %f33, %f34, %f35, %f280, %f281, %f282, %r58, %f283, %f284, %rd24, %r27);
	// inline asm
	ld.local.f32 	%f331, [%rd2];
	add.f32 	%f857, %f857, %f331;
	ld.global.u32 	%r235, [samples];
	add.s32 	%r234, %r234, 1;
	setp.lt.s32	%p31, %r234, %r235;
	@%p31 bra 	BB0_84;

BB0_18:
	ld.global.u32 	%r62, [ignoreNormal];
	setp.eq.s32	%p32, %r235, 0;
	and.b32  	%r63, %r239, 32;
	or.b32  	%r64, %r63, %r62;
	setp.eq.s32	%p33, %r64, 0;
	selp.f32	%f43, %f31, 0f3F800000, %p33;
	@%p32 bra 	BB0_20;

	cvt.rn.f32.s32	%f333, %r235;
	div.rn.f32 	%f859, %f857, %f333;

BB0_20:
	cvt.sat.f32.f32	%f334, %f43;
	mul.f32 	%f335, %f32, %f334;
	mul.f32 	%f336, %f859, %f335;
	ld.global.f32 	%f337, [lightColor];
	mul.f32 	%f46, %f337, %f336;
	ld.global.f32 	%f338, [lightColor+4];
	mul.f32 	%f47, %f338, %f336;
	ld.global.f32 	%f339, [lightColor+8];
	mul.f32 	%f48, %f336, %f339;
	ld.global.u32 	%r237, [imageEnabled];
	and.b32  	%r65, %r237, 8;
	setp.eq.s32	%p34, %r65, 0;
	@%p34 bra 	BB0_33;

	mov.f32 	%f817, 0fB5BFBE8E;
	mov.f32 	%f816, 0fBF317200;
	mov.f32 	%f815, 0f35BFBE8E;
	mov.f32 	%f814, 0f3F317200;
	mov.f32 	%f813, 0f3DAAAABD;
	mov.f32 	%f812, 0f3C4CAF63;
	mov.f32 	%f811, 0f3B18F0FE;
	cvt.u64.u32	%rd28, %r2;
	cvt.u64.u32	%rd29, %r3;
	mov.u64 	%rd32, image_Mask;
	cvta.global.u64 	%rd27, %rd32;
	// inline asm
	call (%rd26), _rt_buffer_get_64, (%rd27, %r26, %r26, %rd28, %rd29, %rd15, %rd15);
	// inline asm
	mov.f32 	%f342, 0f3E68BA2E;
	cvt.rzi.f32.f32	%f343, %f342;
	fma.rn.f32 	%f344, %f343, 0fC0000000, 0f3EE8BA2E;
	abs.f32 	%f49, %f344;
	abs.f32 	%f50, %f859;
	setp.lt.f32	%p35, %f50, 0f00800000;
	mul.f32 	%f345, %f50, 0f4B800000;
	selp.f32	%f346, 0fC3170000, 0fC2FE0000, %p35;
	selp.f32	%f347, %f345, %f50, %p35;
	mov.b32 	 %r68, %f347;
	and.b32  	%r69, %r68, 8388607;
	or.b32  	%r70, %r69, 1065353216;
	mov.b32 	 %f348, %r70;
	shr.u32 	%r71, %r68, 23;
	cvt.rn.f32.u32	%f349, %r71;
	add.f32 	%f350, %f346, %f349;
	setp.gt.f32	%p36, %f348, 0f3FB504F3;
	mul.f32 	%f351, %f348, 0f3F000000;
	add.f32 	%f352, %f350, 0f3F800000;
	selp.f32	%f353, %f351, %f348, %p36;
	selp.f32	%f354, %f352, %f350, %p36;
	add.f32 	%f355, %f353, 0fBF800000;
	add.f32 	%f341, %f353, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f340,%f341;
	// inline asm
	add.f32 	%f356, %f355, %f355;
	mul.f32 	%f357, %f340, %f356;
	mul.f32 	%f358, %f357, %f357;
	fma.rn.f32 	%f361, %f811, %f358, %f812;
	fma.rn.f32 	%f363, %f361, %f358, %f813;
	mul.rn.f32 	%f364, %f363, %f358;
	mul.rn.f32 	%f365, %f364, %f357;
	sub.f32 	%f366, %f355, %f357;
	neg.f32 	%f367, %f357;
	add.f32 	%f368, %f366, %f366;
	fma.rn.f32 	%f369, %f367, %f355, %f368;
	mul.rn.f32 	%f370, %f340, %f369;
	add.f32 	%f371, %f365, %f357;
	sub.f32 	%f372, %f357, %f371;
	add.f32 	%f373, %f365, %f372;
	add.f32 	%f374, %f370, %f373;
	add.f32 	%f375, %f371, %f374;
	sub.f32 	%f376, %f371, %f375;
	add.f32 	%f377, %f374, %f376;
	mul.rn.f32 	%f379, %f354, %f814;
	mul.rn.f32 	%f381, %f354, %f815;
	add.f32 	%f382, %f379, %f375;
	sub.f32 	%f383, %f379, %f382;
	add.f32 	%f384, %f375, %f383;
	add.f32 	%f385, %f377, %f384;
	add.f32 	%f386, %f381, %f385;
	add.f32 	%f387, %f382, %f386;
	sub.f32 	%f388, %f382, %f387;
	add.f32 	%f389, %f386, %f388;
	mov.f32 	%f390, 0f3EE8BA2E;
	mul.rn.f32 	%f391, %f390, %f387;
	neg.f32 	%f392, %f391;
	fma.rn.f32 	%f393, %f390, %f387, %f392;
	fma.rn.f32 	%f394, %f390, %f389, %f393;
	mov.f32 	%f395, 0f00000000;
	fma.rn.f32 	%f396, %f395, %f387, %f394;
	add.rn.f32 	%f397, %f391, %f396;
	neg.f32 	%f398, %f397;
	add.rn.f32 	%f399, %f391, %f398;
	add.rn.f32 	%f400, %f399, %f396;
	mov.b32 	 %r72, %f397;
	setp.eq.s32	%p37, %r72, 1118925336;
	add.s32 	%r73, %r72, -1;
	mov.b32 	 %f401, %r73;
	add.f32 	%f402, %f400, 0f37000000;
	selp.f32	%f403, %f401, %f397, %p37;
	selp.f32	%f51, %f402, %f400, %p37;
	mul.f32 	%f404, %f403, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f405, %f404;
	fma.rn.f32 	%f407, %f405, %f816, %f403;
	fma.rn.f32 	%f409, %f405, %f817, %f407;
	mul.f32 	%f410, %f409, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f411, %f410;
	add.f32 	%f412, %f405, 0f00000000;
	ex2.approx.f32 	%f413, %f412;
	mul.f32 	%f414, %f411, %f413;
	setp.lt.f32	%p38, %f403, 0fC2D20000;
	selp.f32	%f415, 0f00000000, %f414, %p38;
	setp.gt.f32	%p39, %f403, 0f42D20000;
	selp.f32	%f860, 0f7F800000, %f415, %p39;
	setp.eq.f32	%p40, %f860, 0f7F800000;
	@%p40 bra 	BB0_23;

	fma.rn.f32 	%f860, %f860, %f51, %f860;

BB0_23:
	setp.lt.f32	%p41, %f859, 0f00000000;
	setp.eq.f32	%p42, %f49, 0f3F800000;
	and.pred  	%p2, %p41, %p42;
	mov.b32 	 %r74, %f860;
	xor.b32  	%r75, %r74, -2147483648;
	mov.b32 	 %f416, %r75;
	selp.f32	%f862, %f416, %f860, %p2;
	setp.eq.f32	%p43, %f859, 0f00000000;
	@%p43 bra 	BB0_26;
	bra.uni 	BB0_24;

BB0_26:
	add.f32 	%f419, %f859, %f859;
	selp.f32	%f862, %f419, 0f00000000, %p42;
	bra.uni 	BB0_27;

BB0_112:
	mov.u64 	%rd287, image_HDR;
	cvta.global.u64 	%rd282, %rd287;
	mov.u32 	%r204, 8;
	// inline asm
	call (%rd281), _rt_buffer_get_64, (%rd282, %r26, %r204, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f768, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs167, %f768;}

	// inline asm
	mov.u16 	%rs168, 0;
	st.v4.u16 	[%rd281], {%rs167, %rs167, %rs167, %rs168};

BB0_113:
	ld.global.u32 	%r205, [additive];
	setp.eq.s32	%p118, %r205, 0;
	@%p118 bra 	BB0_115;

	mov.u64 	%rd300, image_RNM0;
	cvta.global.u64 	%rd289, %rd300;
	mov.u32 	%r209, 8;
	// inline asm
	call (%rd288), _rt_buffer_get_64, (%rd289, %r26, %r209, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs175, %rs176, %rs177, %rs178}, [%rd288];
	// inline asm
	{  cvt.f32.f16 %f769, %rs175;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f770, %rs176;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f771, %rs177;}

	// inline asm
	// inline asm
	call (%rd294), _rt_buffer_get_64, (%rd289, %r26, %r209, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f772, %f769, 0f00000000;
	add.f32 	%f773, %f770, 0f00000000;
	add.f32 	%f774, %f771, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs174, %f774;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs173, %f773;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs172, %f772;}

	// inline asm
	mov.u16 	%rs179, 0;
	st.v4.u16 	[%rd294], {%rs172, %rs173, %rs174, %rs179};
	bra.uni 	BB0_116;

BB0_115:
	mov.u64 	%rd307, image_RNM0;
	cvta.global.u64 	%rd302, %rd307;
	mov.u32 	%r211, 8;
	// inline asm
	call (%rd301), _rt_buffer_get_64, (%rd302, %r26, %r211, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f775, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs180, %f775;}

	// inline asm
	mov.u16 	%rs181, 0;
	st.v4.u16 	[%rd301], {%rs180, %rs180, %rs180, %rs181};

BB0_116:
	ld.global.u32 	%r212, [additive];
	setp.eq.s32	%p119, %r212, 0;
	@%p119 bra 	BB0_118;

	mov.u64 	%rd320, image_RNM1;
	cvta.global.u64 	%rd309, %rd320;
	mov.u32 	%r216, 8;
	// inline asm
	call (%rd308), _rt_buffer_get_64, (%rd309, %r26, %r216, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs188, %rs189, %rs190, %rs191}, [%rd308];
	// inline asm
	{  cvt.f32.f16 %f776, %rs188;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f777, %rs189;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f778, %rs190;}

	// inline asm
	// inline asm
	call (%rd314), _rt_buffer_get_64, (%rd309, %r26, %r216, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f779, %f776, 0f00000000;
	add.f32 	%f780, %f777, 0f00000000;
	add.f32 	%f781, %f778, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs187, %f781;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs186, %f780;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs185, %f779;}

	// inline asm
	mov.u16 	%rs192, 0;
	st.v4.u16 	[%rd314], {%rs185, %rs186, %rs187, %rs192};
	bra.uni 	BB0_119;

BB0_118:
	mov.u64 	%rd327, image_RNM1;
	cvta.global.u64 	%rd322, %rd327;
	mov.u32 	%r218, 8;
	// inline asm
	call (%rd321), _rt_buffer_get_64, (%rd322, %r26, %r218, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f782, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs193, %f782;}

	// inline asm
	mov.u16 	%rs194, 0;
	st.v4.u16 	[%rd321], {%rs193, %rs193, %rs193, %rs194};

BB0_119:
	ld.global.u32 	%r219, [additive];
	setp.eq.s32	%p120, %r219, 0;
	@%p120 bra 	BB0_121;

	mov.u64 	%rd340, image_RNM2;
	cvta.global.u64 	%rd329, %rd340;
	mov.u32 	%r223, 8;
	// inline asm
	call (%rd328), _rt_buffer_get_64, (%rd329, %r26, %r223, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs201, %rs202, %rs203, %rs204}, [%rd328];
	// inline asm
	{  cvt.f32.f16 %f783, %rs201;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f784, %rs202;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f785, %rs203;}

	// inline asm
	// inline asm
	call (%rd334), _rt_buffer_get_64, (%rd329, %r26, %r223, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f786, %f783, 0f00000000;
	add.f32 	%f787, %f784, 0f00000000;
	add.f32 	%f788, %f785, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs200, %f788;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs199, %f787;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs198, %f786;}

	// inline asm
	mov.u16 	%rs205, 0;
	st.v4.u16 	[%rd334], {%rs198, %rs199, %rs200, %rs205};
	bra.uni 	BB0_122;

BB0_121:
	mov.u64 	%rd347, image_RNM2;
	cvta.global.u64 	%rd342, %rd347;
	mov.u32 	%r225, 8;
	// inline asm
	call (%rd341), _rt_buffer_get_64, (%rd342, %r26, %r225, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f789, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs206, %f789;}

	// inline asm
	mov.u16 	%rs207, 0;
	st.v4.u16 	[%rd341], {%rs206, %rs206, %rs206, %rs207};

BB0_122:
	ld.global.u32 	%r226, [additive];
	setp.eq.s32	%p121, %r226, 0;
	@%p121 bra 	BB0_124;

	mov.u64 	%rd360, image_RNM3;
	cvta.global.u64 	%rd349, %rd360;
	mov.u32 	%r230, 8;
	// inline asm
	call (%rd348), _rt_buffer_get_64, (%rd349, %r26, %r230, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs214, %rs215, %rs216, %rs217}, [%rd348];
	// inline asm
	{  cvt.f32.f16 %f790, %rs214;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f791, %rs215;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f792, %rs216;}

	// inline asm
	// inline asm
	call (%rd354), _rt_buffer_get_64, (%rd349, %r26, %r230, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f793, %f790, 0f00000000;
	add.f32 	%f794, %f791, 0f00000000;
	add.f32 	%f795, %f792, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs213, %f795;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs212, %f794;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs211, %f793;}

	// inline asm
	mov.u16 	%rs218, 0;
	st.v4.u16 	[%rd354], {%rs211, %rs212, %rs213, %rs218};
	bra.uni 	BB0_125;

BB0_124:
	mov.u64 	%rd367, image_RNM3;
	cvta.global.u64 	%rd362, %rd367;
	mov.u32 	%r232, 8;
	// inline asm
	call (%rd361), _rt_buffer_get_64, (%rd362, %r26, %r232, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f796, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs219, %f796;}

	// inline asm
	mov.u16 	%rs220, 0;
	st.v4.u16 	[%rd361], {%rs219, %rs219, %rs219, %rs220};
	bra.uni 	BB0_125;

BB0_92:
	mov.u64 	%rd173, image_HDR;
	cvta.global.u64 	%rd168, %rd173;
	mov.u32 	%r161, 8;
	// inline asm
	call (%rd167), _rt_buffer_get_64, (%rd168, %r26, %r161, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f726, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs104, %f726;}

	// inline asm
	st.v4.u16 	[%rd167], {%rs104, %rs104, %rs104, %rs93};

BB0_93:
	ld.global.u32 	%r162, [additive];
	setp.eq.s32	%p110, %r162, 0;
	mov.f32 	%f727, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs105, %f727;}

	// inline asm
	@%p110 bra 	BB0_95;

	mov.u64 	%rd186, image_RNM0;
	cvta.global.u64 	%rd175, %rd186;
	mov.u32 	%r166, 8;
	// inline asm
	call (%rd174), _rt_buffer_get_64, (%rd175, %r26, %r166, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs112, %rs113, %rs114, %rs115}, [%rd174];
	// inline asm
	{  cvt.f32.f16 %f728, %rs112;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f729, %rs113;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f730, %rs114;}

	// inline asm
	// inline asm
	call (%rd180), _rt_buffer_get_64, (%rd175, %r26, %r166, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f731, %f728, 0f00000000;
	add.f32 	%f732, %f729, 0f00000000;
	add.f32 	%f733, %f730, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs111, %f733;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs110, %f732;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs109, %f731;}

	// inline asm
	st.v4.u16 	[%rd180], {%rs109, %rs110, %rs111, %rs105};
	bra.uni 	BB0_96;

BB0_95:
	mov.u64 	%rd193, image_RNM0;
	cvta.global.u64 	%rd188, %rd193;
	mov.u32 	%r168, 8;
	// inline asm
	call (%rd187), _rt_buffer_get_64, (%rd188, %r26, %r168, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f734, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs116, %f734;}

	// inline asm
	st.v4.u16 	[%rd187], {%rs116, %rs116, %rs116, %rs105};

BB0_96:
	ld.global.u32 	%r169, [additive];
	setp.eq.s32	%p111, %r169, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs117, %f727;}

	// inline asm
	@%p111 bra 	BB0_98;

	mov.u64 	%rd206, image_RNM1;
	cvta.global.u64 	%rd195, %rd206;
	mov.u32 	%r173, 8;
	// inline asm
	call (%rd194), _rt_buffer_get_64, (%rd195, %r26, %r173, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs124, %rs125, %rs126, %rs127}, [%rd194];
	// inline asm
	{  cvt.f32.f16 %f736, %rs124;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f737, %rs125;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f738, %rs126;}

	// inline asm
	// inline asm
	call (%rd200), _rt_buffer_get_64, (%rd195, %r26, %r173, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f739, %f736, 0f00000000;
	add.f32 	%f740, %f737, 0f00000000;
	add.f32 	%f741, %f738, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs123, %f741;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs122, %f740;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs121, %f739;}

	// inline asm
	st.v4.u16 	[%rd200], {%rs121, %rs122, %rs123, %rs117};
	bra.uni 	BB0_99;

BB0_98:
	mov.u64 	%rd213, image_RNM1;
	cvta.global.u64 	%rd208, %rd213;
	mov.u32 	%r175, 8;
	// inline asm
	call (%rd207), _rt_buffer_get_64, (%rd208, %r26, %r175, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f742, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs128, %f742;}

	// inline asm
	st.v4.u16 	[%rd207], {%rs128, %rs128, %rs128, %rs117};

BB0_99:
	ld.global.u32 	%r176, [additive];
	setp.eq.s32	%p112, %r176, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs129, %f727;}

	// inline asm
	@%p112 bra 	BB0_101;

	mov.u64 	%rd226, image_RNM2;
	cvta.global.u64 	%rd215, %rd226;
	mov.u32 	%r180, 8;
	// inline asm
	call (%rd214), _rt_buffer_get_64, (%rd215, %r26, %r180, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs136, %rs137, %rs138, %rs139}, [%rd214];
	// inline asm
	{  cvt.f32.f16 %f744, %rs136;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f745, %rs137;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f746, %rs138;}

	// inline asm
	// inline asm
	call (%rd220), _rt_buffer_get_64, (%rd215, %r26, %r180, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f747, %f744, 0f00000000;
	add.f32 	%f748, %f745, 0f00000000;
	add.f32 	%f749, %f746, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs135, %f749;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs134, %f748;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs133, %f747;}

	// inline asm
	st.v4.u16 	[%rd220], {%rs133, %rs134, %rs135, %rs129};
	bra.uni 	BB0_102;

BB0_101:
	mov.u64 	%rd233, image_RNM2;
	cvta.global.u64 	%rd228, %rd233;
	mov.u32 	%r182, 8;
	// inline asm
	call (%rd227), _rt_buffer_get_64, (%rd228, %r26, %r182, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f750, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs140, %f750;}

	// inline asm
	st.v4.u16 	[%rd227], {%rs140, %rs140, %rs140, %rs129};

BB0_102:
	ld.global.u32 	%r183, [additive];
	setp.eq.s32	%p113, %r183, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs141, %f727;}

	// inline asm
	@%p113 bra 	BB0_104;

	mov.u64 	%rd246, image_RNM3;
	cvta.global.u64 	%rd235, %rd246;
	mov.u32 	%r187, 8;
	// inline asm
	call (%rd234), _rt_buffer_get_64, (%rd235, %r26, %r187, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs148, %rs149, %rs150, %rs151}, [%rd234];
	// inline asm
	{  cvt.f32.f16 %f752, %rs148;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f753, %rs149;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f754, %rs150;}

	// inline asm
	// inline asm
	call (%rd240), _rt_buffer_get_64, (%rd235, %r26, %r187, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f755, %f752, 0f00000000;
	add.f32 	%f756, %f753, 0f00000000;
	add.f32 	%f757, %f754, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs147, %f757;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs146, %f756;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs145, %f755;}

	// inline asm
	st.v4.u16 	[%rd240], {%rs145, %rs146, %rs147, %rs141};
	bra.uni 	BB0_125;

BB0_104:
	mov.u64 	%rd253, image_RNM3;
	cvta.global.u64 	%rd248, %rd253;
	mov.u32 	%r189, 8;
	// inline asm
	call (%rd247), _rt_buffer_get_64, (%rd248, %r26, %r189, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f758, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs152, %f758;}

	// inline asm
	st.v4.u16 	[%rd247], {%rs152, %rs152, %rs152, %rs141};
	bra.uni 	BB0_125;

BB0_24:
	setp.geu.f32	%p44, %f859, 0f00000000;
	@%p44 bra 	BB0_27;

	cvt.rzi.f32.f32	%f418, %f390;
	setp.neu.f32	%p45, %f418, 0f3EE8BA2E;
	selp.f32	%f862, 0f7FFFFFFF, %f862, %p45;

BB0_27:
	add.f32 	%f420, %f50, 0f3EE8BA2E;
	mov.b32 	 %r76, %f420;
	setp.lt.s32	%p47, %r76, 2139095040;
	@%p47 bra 	BB0_32;

	setp.gtu.f32	%p48, %f50, 0f7F800000;
	@%p48 bra 	BB0_31;
	bra.uni 	BB0_29;

BB0_31:
	add.f32 	%f862, %f859, 0f3EE8BA2E;
	bra.uni 	BB0_32;

BB0_29:
	setp.neu.f32	%p49, %f50, 0f7F800000;
	@%p49 bra 	BB0_32;

	selp.f32	%f862, 0fFF800000, 0f7F800000, %p2;

BB0_32:
	mul.f32 	%f421, %f862, 0f437F0000;
	setp.eq.f32	%p50, %f859, 0f3F800000;
	selp.f32	%f422, 0f437F0000, %f421, %p50;
	cvt.rzi.u32.f32	%r77, %f422;
	cvt.u16.u32	%rs19, %r77;
	mov.u16 	%rs20, 255;
	st.v2.u8 	[%rd26], {%rs19, %rs20};
	ld.global.u32 	%r237, [imageEnabled];

BB0_33:
	and.b32  	%r78, %r237, 1;
	setp.eq.b32	%p51, %r78, 1;
	@!%p51 bra 	BB0_68;
	bra.uni 	BB0_34;

BB0_34:
	mov.f32 	%f824, 0fB5BFBE8E;
	mov.f32 	%f823, 0fBF317200;
	mov.f32 	%f822, 0f35BFBE8E;
	mov.f32 	%f821, 0f3F317200;
	mov.f32 	%f820, 0f3DAAAABD;
	mov.f32 	%f819, 0f3C4CAF63;
	mov.f32 	%f818, 0f3B18F0FE;
	mov.f32 	%f425, 0f3E666666;
	cvt.rzi.f32.f32	%f426, %f425;
	fma.rn.f32 	%f427, %f426, 0fC0000000, 0f3EE66666;
	abs.f32 	%f62, %f427;
	abs.f32 	%f63, %f46;
	setp.lt.f32	%p52, %f63, 0f00800000;
	mul.f32 	%f428, %f63, 0f4B800000;
	selp.f32	%f429, 0fC3170000, 0fC2FE0000, %p52;
	selp.f32	%f430, %f428, %f63, %p52;
	mov.b32 	 %r79, %f430;
	and.b32  	%r80, %r79, 8388607;
	or.b32  	%r81, %r80, 1065353216;
	mov.b32 	 %f431, %r81;
	shr.u32 	%r82, %r79, 23;
	cvt.rn.f32.u32	%f432, %r82;
	add.f32 	%f433, %f429, %f432;
	setp.gt.f32	%p53, %f431, 0f3FB504F3;
	mul.f32 	%f434, %f431, 0f3F000000;
	add.f32 	%f435, %f433, 0f3F800000;
	selp.f32	%f436, %f434, %f431, %p53;
	selp.f32	%f437, %f435, %f433, %p53;
	add.f32 	%f438, %f436, 0fBF800000;
	add.f32 	%f424, %f436, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f423,%f424;
	// inline asm
	add.f32 	%f439, %f438, %f438;
	mul.f32 	%f440, %f423, %f439;
	mul.f32 	%f441, %f440, %f440;
	fma.rn.f32 	%f444, %f818, %f441, %f819;
	fma.rn.f32 	%f446, %f444, %f441, %f820;
	mul.rn.f32 	%f447, %f446, %f441;
	mul.rn.f32 	%f448, %f447, %f440;
	sub.f32 	%f449, %f438, %f440;
	neg.f32 	%f450, %f440;
	add.f32 	%f451, %f449, %f449;
	fma.rn.f32 	%f452, %f450, %f438, %f451;
	mul.rn.f32 	%f453, %f423, %f452;
	add.f32 	%f454, %f448, %f440;
	sub.f32 	%f455, %f440, %f454;
	add.f32 	%f456, %f448, %f455;
	add.f32 	%f457, %f453, %f456;
	add.f32 	%f458, %f454, %f457;
	sub.f32 	%f459, %f454, %f458;
	add.f32 	%f460, %f457, %f459;
	mul.rn.f32 	%f462, %f437, %f821;
	mul.rn.f32 	%f464, %f437, %f822;
	add.f32 	%f465, %f462, %f458;
	sub.f32 	%f466, %f462, %f465;
	add.f32 	%f467, %f458, %f466;
	add.f32 	%f468, %f460, %f467;
	add.f32 	%f469, %f464, %f468;
	add.f32 	%f470, %f465, %f469;
	sub.f32 	%f471, %f465, %f470;
	add.f32 	%f472, %f469, %f471;
	mov.f32 	%f473, 0f3EE66666;
	mul.rn.f32 	%f474, %f473, %f470;
	neg.f32 	%f475, %f474;
	fma.rn.f32 	%f476, %f473, %f470, %f475;
	fma.rn.f32 	%f477, %f473, %f472, %f476;
	mov.f32 	%f478, 0f00000000;
	fma.rn.f32 	%f479, %f478, %f470, %f477;
	add.rn.f32 	%f480, %f474, %f479;
	neg.f32 	%f481, %f480;
	add.rn.f32 	%f482, %f474, %f481;
	add.rn.f32 	%f483, %f482, %f479;
	mov.b32 	 %r83, %f480;
	setp.eq.s32	%p54, %r83, 1118925336;
	add.s32 	%r84, %r83, -1;
	mov.b32 	 %f484, %r84;
	add.f32 	%f485, %f483, 0f37000000;
	selp.f32	%f486, %f484, %f480, %p54;
	selp.f32	%f64, %f485, %f483, %p54;
	mul.f32 	%f487, %f486, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f488, %f487;
	fma.rn.f32 	%f490, %f488, %f823, %f486;
	fma.rn.f32 	%f492, %f488, %f824, %f490;
	mul.f32 	%f493, %f492, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f494, %f493;
	add.f32 	%f495, %f488, 0f00000000;
	ex2.approx.f32 	%f496, %f495;
	mul.f32 	%f497, %f494, %f496;
	setp.lt.f32	%p55, %f486, 0fC2D20000;
	selp.f32	%f498, 0f00000000, %f497, %p55;
	setp.gt.f32	%p56, %f486, 0f42D20000;
	selp.f32	%f863, 0f7F800000, %f498, %p56;
	setp.eq.f32	%p57, %f863, 0f7F800000;
	@%p57 bra 	BB0_36;

	fma.rn.f32 	%f863, %f863, %f64, %f863;

BB0_36:
	setp.lt.f32	%p58, %f46, 0f00000000;
	setp.eq.f32	%p59, %f62, 0f3F800000;
	and.pred  	%p3, %p58, %p59;
	mov.b32 	 %r85, %f863;
	xor.b32  	%r86, %r85, -2147483648;
	mov.b32 	 %f499, %r86;
	selp.f32	%f865, %f499, %f863, %p3;
	setp.eq.f32	%p60, %f46, 0f00000000;
	@%p60 bra 	BB0_39;
	bra.uni 	BB0_37;

BB0_39:
	add.f32 	%f502, %f46, %f46;
	selp.f32	%f865, %f502, 0f00000000, %p59;
	bra.uni 	BB0_40;

BB0_37:
	setp.geu.f32	%p61, %f46, 0f00000000;
	@%p61 bra 	BB0_40;

	cvt.rzi.f32.f32	%f501, %f473;
	setp.neu.f32	%p62, %f501, 0f3EE66666;
	selp.f32	%f865, 0f7FFFFFFF, %f865, %p62;

BB0_40:
	add.f32 	%f503, %f63, 0f3EE66666;
	mov.b32 	 %r87, %f503;
	setp.lt.s32	%p64, %r87, 2139095040;
	@%p64 bra 	BB0_45;

	setp.gtu.f32	%p65, %f63, 0f7F800000;
	@%p65 bra 	BB0_44;
	bra.uni 	BB0_42;

BB0_44:
	add.f32 	%f865, %f46, 0f3EE66666;
	bra.uni 	BB0_45;

BB0_42:
	setp.neu.f32	%p66, %f63, 0f7F800000;
	@%p66 bra 	BB0_45;

	selp.f32	%f865, 0fFF800000, 0f7F800000, %p3;

BB0_45:
	mov.f32 	%f831, 0fB5BFBE8E;
	mov.f32 	%f830, 0fBF317200;
	mov.f32 	%f829, 0f35BFBE8E;
	mov.f32 	%f828, 0f3F317200;
	mov.f32 	%f827, 0f3DAAAABD;
	mov.f32 	%f826, 0f3C4CAF63;
	mov.f32 	%f825, 0f3B18F0FE;
	setp.eq.f32	%p67, %f46, 0f3F800000;
	selp.f32	%f75, 0f3F800000, %f865, %p67;
	abs.f32 	%f76, %f47;
	setp.lt.f32	%p68, %f76, 0f00800000;
	mul.f32 	%f506, %f76, 0f4B800000;
	selp.f32	%f507, 0fC3170000, 0fC2FE0000, %p68;
	selp.f32	%f508, %f506, %f76, %p68;
	mov.b32 	 %r88, %f508;
	and.b32  	%r89, %r88, 8388607;
	or.b32  	%r90, %r89, 1065353216;
	mov.b32 	 %f509, %r90;
	shr.u32 	%r91, %r88, 23;
	cvt.rn.f32.u32	%f510, %r91;
	add.f32 	%f511, %f507, %f510;
	setp.gt.f32	%p69, %f509, 0f3FB504F3;
	mul.f32 	%f512, %f509, 0f3F000000;
	add.f32 	%f513, %f511, 0f3F800000;
	selp.f32	%f514, %f512, %f509, %p69;
	selp.f32	%f515, %f513, %f511, %p69;
	add.f32 	%f516, %f514, 0fBF800000;
	add.f32 	%f505, %f514, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f504,%f505;
	// inline asm
	add.f32 	%f517, %f516, %f516;
	mul.f32 	%f518, %f504, %f517;
	mul.f32 	%f519, %f518, %f518;
	fma.rn.f32 	%f522, %f825, %f519, %f826;
	fma.rn.f32 	%f524, %f522, %f519, %f827;
	mul.rn.f32 	%f525, %f524, %f519;
	mul.rn.f32 	%f526, %f525, %f518;
	sub.f32 	%f527, %f516, %f518;
	neg.f32 	%f528, %f518;
	add.f32 	%f529, %f527, %f527;
	fma.rn.f32 	%f530, %f528, %f516, %f529;
	mul.rn.f32 	%f531, %f504, %f530;
	add.f32 	%f532, %f526, %f518;
	sub.f32 	%f533, %f518, %f532;
	add.f32 	%f534, %f526, %f533;
	add.f32 	%f535, %f531, %f534;
	add.f32 	%f536, %f532, %f535;
	sub.f32 	%f537, %f532, %f536;
	add.f32 	%f538, %f535, %f537;
	mul.rn.f32 	%f540, %f515, %f828;
	mul.rn.f32 	%f542, %f515, %f829;
	add.f32 	%f543, %f540, %f536;
	sub.f32 	%f544, %f540, %f543;
	add.f32 	%f545, %f536, %f544;
	add.f32 	%f546, %f538, %f545;
	add.f32 	%f547, %f542, %f546;
	add.f32 	%f548, %f543, %f547;
	sub.f32 	%f549, %f543, %f548;
	add.f32 	%f550, %f547, %f549;
	mul.rn.f32 	%f552, %f473, %f548;
	neg.f32 	%f553, %f552;
	fma.rn.f32 	%f554, %f473, %f548, %f553;
	fma.rn.f32 	%f555, %f473, %f550, %f554;
	fma.rn.f32 	%f557, %f478, %f548, %f555;
	add.rn.f32 	%f558, %f552, %f557;
	neg.f32 	%f559, %f558;
	add.rn.f32 	%f560, %f552, %f559;
	add.rn.f32 	%f561, %f560, %f557;
	mov.b32 	 %r92, %f558;
	setp.eq.s32	%p70, %r92, 1118925336;
	add.s32 	%r93, %r92, -1;
	mov.b32 	 %f562, %r93;
	add.f32 	%f563, %f561, 0f37000000;
	selp.f32	%f564, %f562, %f558, %p70;
	selp.f32	%f77, %f563, %f561, %p70;
	mul.f32 	%f565, %f564, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f566, %f565;
	fma.rn.f32 	%f568, %f566, %f830, %f564;
	fma.rn.f32 	%f570, %f566, %f831, %f568;
	mul.f32 	%f571, %f570, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f572, %f571;
	add.f32 	%f573, %f566, 0f00000000;
	ex2.approx.f32 	%f574, %f573;
	mul.f32 	%f575, %f572, %f574;
	setp.lt.f32	%p71, %f564, 0fC2D20000;
	selp.f32	%f576, 0f00000000, %f575, %p71;
	setp.gt.f32	%p72, %f564, 0f42D20000;
	selp.f32	%f866, 0f7F800000, %f576, %p72;
	setp.eq.f32	%p73, %f866, 0f7F800000;
	@%p73 bra 	BB0_47;

	fma.rn.f32 	%f866, %f866, %f77, %f866;

BB0_47:
	setp.lt.f32	%p74, %f47, 0f00000000;
	and.pred  	%p4, %p74, %p59;
	mov.b32 	 %r94, %f866;
	xor.b32  	%r95, %r94, -2147483648;
	mov.b32 	 %f577, %r95;
	selp.f32	%f868, %f577, %f866, %p4;
	setp.eq.f32	%p76, %f47, 0f00000000;
	@%p76 bra 	BB0_50;
	bra.uni 	BB0_48;

BB0_50:
	add.f32 	%f580, %f47, %f47;
	selp.f32	%f868, %f580, 0f00000000, %p59;
	bra.uni 	BB0_51;

BB0_48:
	setp.geu.f32	%p77, %f47, 0f00000000;
	@%p77 bra 	BB0_51;

	cvt.rzi.f32.f32	%f579, %f473;
	setp.neu.f32	%p78, %f579, 0f3EE66666;
	selp.f32	%f868, 0f7FFFFFFF, %f868, %p78;

BB0_51:
	add.f32 	%f581, %f76, 0f3EE66666;
	mov.b32 	 %r96, %f581;
	setp.lt.s32	%p80, %r96, 2139095040;
	@%p80 bra 	BB0_56;

	setp.gtu.f32	%p81, %f76, 0f7F800000;
	@%p81 bra 	BB0_55;
	bra.uni 	BB0_53;

BB0_55:
	add.f32 	%f868, %f47, 0f3EE66666;
	bra.uni 	BB0_56;

BB0_53:
	setp.neu.f32	%p82, %f76, 0f7F800000;
	@%p82 bra 	BB0_56;

	selp.f32	%f868, 0fFF800000, 0f7F800000, %p4;

BB0_56:
	mov.f32 	%f838, 0fB5BFBE8E;
	mov.f32 	%f837, 0fBF317200;
	mov.f32 	%f836, 0f35BFBE8E;
	mov.f32 	%f835, 0f3F317200;
	mov.f32 	%f834, 0f3DAAAABD;
	mov.f32 	%f833, 0f3C4CAF63;
	mov.f32 	%f832, 0f3B18F0FE;
	setp.eq.f32	%p83, %f47, 0f3F800000;
	selp.f32	%f88, 0f3F800000, %f868, %p83;
	abs.f32 	%f89, %f48;
	setp.lt.f32	%p84, %f89, 0f00800000;
	mul.f32 	%f584, %f89, 0f4B800000;
	selp.f32	%f585, 0fC3170000, 0fC2FE0000, %p84;
	selp.f32	%f586, %f584, %f89, %p84;
	mov.b32 	 %r97, %f586;
	and.b32  	%r98, %r97, 8388607;
	or.b32  	%r99, %r98, 1065353216;
	mov.b32 	 %f587, %r99;
	shr.u32 	%r100, %r97, 23;
	cvt.rn.f32.u32	%f588, %r100;
	add.f32 	%f589, %f585, %f588;
	setp.gt.f32	%p85, %f587, 0f3FB504F3;
	mul.f32 	%f590, %f587, 0f3F000000;
	add.f32 	%f591, %f589, 0f3F800000;
	selp.f32	%f592, %f590, %f587, %p85;
	selp.f32	%f593, %f591, %f589, %p85;
	add.f32 	%f594, %f592, 0fBF800000;
	add.f32 	%f583, %f592, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// inline asm
	add.f32 	%f595, %f594, %f594;
	mul.f32 	%f596, %f582, %f595;
	mul.f32 	%f597, %f596, %f596;
	fma.rn.f32 	%f600, %f832, %f597, %f833;
	fma.rn.f32 	%f602, %f600, %f597, %f834;
	mul.rn.f32 	%f603, %f602, %f597;
	mul.rn.f32 	%f604, %f603, %f596;
	sub.f32 	%f605, %f594, %f596;
	neg.f32 	%f606, %f596;
	add.f32 	%f607, %f605, %f605;
	fma.rn.f32 	%f608, %f606, %f594, %f607;
	mul.rn.f32 	%f609, %f582, %f608;
	add.f32 	%f610, %f604, %f596;
	sub.f32 	%f611, %f596, %f610;
	add.f32 	%f612, %f604, %f611;
	add.f32 	%f613, %f609, %f612;
	add.f32 	%f614, %f610, %f613;
	sub.f32 	%f615, %f610, %f614;
	add.f32 	%f616, %f613, %f615;
	mul.rn.f32 	%f618, %f593, %f835;
	mul.rn.f32 	%f620, %f593, %f836;
	add.f32 	%f621, %f618, %f614;
	sub.f32 	%f622, %f618, %f621;
	add.f32 	%f623, %f614, %f622;
	add.f32 	%f624, %f616, %f623;
	add.f32 	%f625, %f620, %f624;
	add.f32 	%f626, %f621, %f625;
	sub.f32 	%f627, %f621, %f626;
	add.f32 	%f628, %f625, %f627;
	mul.rn.f32 	%f630, %f473, %f626;
	neg.f32 	%f631, %f630;
	fma.rn.f32 	%f632, %f473, %f626, %f631;
	fma.rn.f32 	%f633, %f473, %f628, %f632;
	fma.rn.f32 	%f635, %f478, %f626, %f633;
	add.rn.f32 	%f636, %f630, %f635;
	neg.f32 	%f637, %f636;
	add.rn.f32 	%f638, %f630, %f637;
	add.rn.f32 	%f639, %f638, %f635;
	mov.b32 	 %r101, %f636;
	setp.eq.s32	%p86, %r101, 1118925336;
	add.s32 	%r102, %r101, -1;
	mov.b32 	 %f640, %r102;
	add.f32 	%f641, %f639, 0f37000000;
	selp.f32	%f642, %f640, %f636, %p86;
	selp.f32	%f90, %f641, %f639, %p86;
	mul.f32 	%f643, %f642, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f644, %f643;
	fma.rn.f32 	%f646, %f644, %f837, %f642;
	fma.rn.f32 	%f648, %f644, %f838, %f646;
	mul.f32 	%f649, %f648, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f650, %f649;
	add.f32 	%f651, %f644, 0f00000000;
	ex2.approx.f32 	%f652, %f651;
	mul.f32 	%f653, %f650, %f652;
	setp.lt.f32	%p87, %f642, 0fC2D20000;
	selp.f32	%f654, 0f00000000, %f653, %p87;
	setp.gt.f32	%p88, %f642, 0f42D20000;
	selp.f32	%f869, 0f7F800000, %f654, %p88;
	setp.eq.f32	%p89, %f869, 0f7F800000;
	@%p89 bra 	BB0_58;

	fma.rn.f32 	%f869, %f869, %f90, %f869;

BB0_58:
	setp.lt.f32	%p90, %f48, 0f00000000;
	and.pred  	%p5, %p90, %p59;
	mov.b32 	 %r103, %f869;
	xor.b32  	%r104, %r103, -2147483648;
	mov.b32 	 %f655, %r104;
	selp.f32	%f871, %f655, %f869, %p5;
	setp.eq.f32	%p92, %f48, 0f00000000;
	@%p92 bra 	BB0_61;
	bra.uni 	BB0_59;

BB0_61:
	add.f32 	%f658, %f48, %f48;
	selp.f32	%f871, %f658, 0f00000000, %p59;
	bra.uni 	BB0_62;

BB0_59:
	setp.geu.f32	%p93, %f48, 0f00000000;
	@%p93 bra 	BB0_62;

	cvt.rzi.f32.f32	%f657, %f473;
	setp.neu.f32	%p94, %f657, 0f3EE66666;
	selp.f32	%f871, 0f7FFFFFFF, %f871, %p94;

BB0_62:
	add.f32 	%f659, %f89, 0f3EE66666;
	mov.b32 	 %r105, %f659;
	setp.lt.s32	%p96, %r105, 2139095040;
	@%p96 bra 	BB0_67;

	setp.gtu.f32	%p97, %f89, 0f7F800000;
	@%p97 bra 	BB0_66;
	bra.uni 	BB0_64;

BB0_66:
	add.f32 	%f871, %f48, 0f3EE66666;
	bra.uni 	BB0_67;

BB0_64:
	setp.neu.f32	%p98, %f89, 0f7F800000;
	@%p98 bra 	BB0_67;

	selp.f32	%f871, 0fFF800000, 0f7F800000, %p5;

BB0_67:
	setp.eq.f32	%p99, %f48, 0f3F800000;
	selp.f32	%f660, 0f3F800000, %f871, %p99;
	cvt.u64.u32	%rd36, %r3;
	cvt.u64.u32	%rd35, %r2;
	mov.u64 	%rd39, image;
	cvta.global.u64 	%rd34, %rd39;
	// inline asm
	call (%rd33), _rt_buffer_get_64, (%rd34, %r26, %r27, %rd35, %rd36, %rd15, %rd15);
	// inline asm
	cvt.sat.f32.f32	%f661, %f660;
	mul.f32 	%f662, %f661, 0f437FFD71;
	cvt.rzi.u32.f32	%r108, %f662;
	cvt.sat.f32.f32	%f663, %f88;
	mul.f32 	%f664, %f663, 0f437FFD71;
	cvt.rzi.u32.f32	%r109, %f664;
	cvt.sat.f32.f32	%f665, %f75;
	mul.f32 	%f666, %f665, 0f437FFD71;
	cvt.rzi.u32.f32	%r110, %f666;
	cvt.u16.u32	%rs21, %r108;
	cvt.u16.u32	%rs22, %r110;
	cvt.u16.u32	%rs23, %r109;
	mov.u16 	%rs24, 255;
	st.v4.u8 	[%rd33], {%rs21, %rs23, %rs22, %rs24};
	ld.global.u32 	%r237, [imageEnabled];

BB0_68:
	cvt.u64.u32	%rd4, %r2;
	cvt.u64.u32	%rd5, %r3;
	and.b32  	%r111, %r237, 4;
	setp.eq.s32	%p100, %r111, 0;
	@%p100 bra 	BB0_72;

	ld.global.u32 	%r112, [additive];
	setp.eq.s32	%p101, %r112, 0;
	mov.f32 	%f667, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs25, %f667;}

	// inline asm
	@%p101 bra 	BB0_71;

	mov.u64 	%rd52, image_HDR;
	cvta.global.u64 	%rd41, %rd52;
	mov.u32 	%r116, 8;
	// inline asm
	call (%rd40), _rt_buffer_get_64, (%rd41, %r26, %r116, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs32, %rs33, %rs34, %rs35}, [%rd40];
	// inline asm
	{  cvt.f32.f16 %f668, %rs32;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f669, %rs33;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f670, %rs34;}

	// inline asm
	// inline asm
	call (%rd46), _rt_buffer_get_64, (%rd41, %r26, %r116, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f671, %f46, %f668;
	add.f32 	%f672, %f47, %f669;
	add.f32 	%f673, %f48, %f670;
	// inline asm
	{  cvt.rn.f16.f32 %rs31, %f673;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs30, %f672;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs29, %f671;}

	// inline asm
	st.v4.u16 	[%rd46], {%rs29, %rs30, %rs31, %rs25};
	bra.uni 	BB0_72;

BB0_71:
	mov.u64 	%rd59, image_HDR;
	cvta.global.u64 	%rd54, %rd59;
	mov.u32 	%r118, 8;
	// inline asm
	call (%rd53), _rt_buffer_get_64, (%rd54, %r26, %r118, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs38, %f48;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs37, %f47;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs36, %f46;}

	// inline asm
	st.v4.u16 	[%rd53], {%rs36, %rs37, %rs38, %rs25};

BB0_72:
	mul.f32 	%f678, %f32, 0f3E800000;
	mul.f32 	%f679, %f678, %f859;
	ld.global.f32 	%f680, [lightColor];
	mul.f32 	%f101, %f679, %f680;
	ld.global.f32 	%f681, [lightColor+4];
	mul.f32 	%f102, %f679, %f681;
	ld.global.f32 	%f682, [lightColor+8];
	mul.f32 	%f103, %f679, %f682;
	ld.global.u32 	%r119, [additive];
	setp.eq.s32	%p102, %r119, 0;
	mov.f32 	%f677, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs39, %f677;}

	// inline asm
	@%p102 bra 	BB0_74;

	mov.u64 	%rd72, image_RNM0;
	cvta.global.u64 	%rd61, %rd72;
	mov.u32 	%r123, 8;
	// inline asm
	call (%rd60), _rt_buffer_get_64, (%rd61, %r26, %r123, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs46, %rs47, %rs48, %rs49}, [%rd60];
	// inline asm
	{  cvt.f32.f16 %f683, %rs46;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f684, %rs47;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f685, %rs48;}

	// inline asm
	// inline asm
	call (%rd66), _rt_buffer_get_64, (%rd61, %r26, %r123, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f686, %f101, %f683;
	add.f32 	%f687, %f102, %f684;
	add.f32 	%f688, %f103, %f685;
	// inline asm
	{  cvt.rn.f16.f32 %rs45, %f688;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs44, %f687;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs43, %f686;}

	// inline asm
	st.v4.u16 	[%rd66], {%rs43, %rs44, %rs45, %rs39};
	bra.uni 	BB0_75;

BB0_74:
	mov.u64 	%rd79, image_RNM0;
	cvta.global.u64 	%rd74, %rd79;
	mov.u32 	%r125, 8;
	// inline asm
	call (%rd73), _rt_buffer_get_64, (%rd74, %r26, %r125, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs52, %f103;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs51, %f102;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs50, %f101;}

	// inline asm
	st.v4.u16 	[%rd73], {%rs50, %rs51, %rs52, %rs39};

BB0_75:
	sub.f32 	%f844, %f11, %f12;
	mul.f32 	%f843, %f844, %f136;
	sub.f32 	%f842, %f7, %f8;
	mul.f32 	%f841, %f842, %f136;
	sub.f32 	%f840, %f9, %f10;
	mul.f32 	%f839, %f840, %f136;
	fma.rn.f32 	%f104, %f841, 0f3F000000, 0f3F000000;
	fma.rn.f32 	%f105, %f839, 0f3F000000, 0f3F000000;
	fma.rn.f32 	%f106, %f843, 0f3F000000, 0f3F000000;
	ld.global.u32 	%r126, [additive];
	setp.eq.s32	%p103, %r126, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs53, %f677;}

	// inline asm
	@%p103 bra 	BB0_77;

	mov.u64 	%rd92, image_RNM1;
	cvta.global.u64 	%rd81, %rd92;
	mov.u32 	%r130, 8;
	// inline asm
	call (%rd80), _rt_buffer_get_64, (%rd81, %r26, %r130, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs60, %rs61, %rs62, %rs63}, [%rd80];
	// inline asm
	{  cvt.f32.f16 %f693, %rs60;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f694, %rs61;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f695, %rs62;}

	// inline asm
	// inline asm
	call (%rd86), _rt_buffer_get_64, (%rd81, %r26, %r130, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f696, %f104, %f693;
	add.f32 	%f697, %f104, %f694;
	add.f32 	%f698, %f104, %f695;
	// inline asm
	{  cvt.rn.f16.f32 %rs59, %f698;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs58, %f697;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs57, %f696;}

	// inline asm
	st.v4.u16 	[%rd86], {%rs57, %rs58, %rs59, %rs53};
	bra.uni 	BB0_78;

BB0_77:
	mov.u64 	%rd99, image_RNM1;
	cvta.global.u64 	%rd94, %rd99;
	mov.u32 	%r132, 8;
	// inline asm
	call (%rd93), _rt_buffer_get_64, (%rd94, %r26, %r132, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs64, %f104;}

	// inline asm
	st.v4.u16 	[%rd93], {%rs64, %rs64, %rs64, %rs53};

BB0_78:
	ld.global.u32 	%r133, [additive];
	setp.eq.s32	%p104, %r133, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs65, %f677;}

	// inline asm
	@%p104 bra 	BB0_80;

	mov.u64 	%rd112, image_RNM2;
	cvta.global.u64 	%rd101, %rd112;
	mov.u32 	%r137, 8;
	// inline asm
	call (%rd100), _rt_buffer_get_64, (%rd101, %r26, %r137, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs72, %rs73, %rs74, %rs75}, [%rd100];
	// inline asm
	{  cvt.f32.f16 %f701, %rs72;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f702, %rs73;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f703, %rs74;}

	// inline asm
	// inline asm
	call (%rd106), _rt_buffer_get_64, (%rd101, %r26, %r137, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f704, %f105, %f701;
	add.f32 	%f705, %f105, %f702;
	add.f32 	%f706, %f105, %f703;
	// inline asm
	{  cvt.rn.f16.f32 %rs71, %f706;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs70, %f705;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs69, %f704;}

	// inline asm
	st.v4.u16 	[%rd106], {%rs69, %rs70, %rs71, %rs65};
	bra.uni 	BB0_81;

BB0_80:
	mov.u64 	%rd119, image_RNM2;
	cvta.global.u64 	%rd114, %rd119;
	mov.u32 	%r139, 8;
	// inline asm
	call (%rd113), _rt_buffer_get_64, (%rd114, %r26, %r139, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs76, %f105;}

	// inline asm
	st.v4.u16 	[%rd113], {%rs76, %rs76, %rs76, %rs65};

BB0_81:
	ld.global.u32 	%r140, [additive];
	setp.eq.s32	%p105, %r140, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs77, %f677;}

	// inline asm
	@%p105 bra 	BB0_83;

	mov.u64 	%rd132, image_RNM3;
	cvta.global.u64 	%rd121, %rd132;
	mov.u32 	%r144, 8;
	// inline asm
	call (%rd120), _rt_buffer_get_64, (%rd121, %r26, %r144, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs84, %rs85, %rs86, %rs87}, [%rd120];
	// inline asm
	{  cvt.f32.f16 %f709, %rs84;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f710, %rs85;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f711, %rs86;}

	// inline asm
	// inline asm
	call (%rd126), _rt_buffer_get_64, (%rd121, %r26, %r144, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f712, %f106, %f709;
	add.f32 	%f713, %f106, %f710;
	add.f32 	%f714, %f106, %f711;
	// inline asm
	{  cvt.rn.f16.f32 %rs83, %f714;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs82, %f713;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs81, %f712;}

	// inline asm
	st.v4.u16 	[%rd126], {%rs81, %rs82, %rs83, %rs77};
	bra.uni 	BB0_125;

BB0_83:
	mov.u64 	%rd139, image_RNM3;
	cvta.global.u64 	%rd134, %rd139;
	mov.u32 	%r146, 8;
	// inline asm
	call (%rd133), _rt_buffer_get_64, (%rd134, %r26, %r146, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs88, %f106;}

	// inline asm
	st.v4.u16 	[%rd133], {%rs88, %rs88, %rs88, %rs77};

BB0_125:
	ret;
}


