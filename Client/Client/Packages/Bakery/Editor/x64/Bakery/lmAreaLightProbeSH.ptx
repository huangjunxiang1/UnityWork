//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-23083092
// Cuda compilation tools, release 9.1, V9.1.85
// Based on LLVM 3.4svn
//

.version 6.1
.target sm_30
.address_size 64

	// .globl	_Z6oxMainv
.global .align 8 .b8 pixelID[8];
.global .align 8 .b8 resolution[8];
.global .align 4 .b8 normal[12];
.global .align 4 .b8 camPos[12];
.global .align 4 .b8 root[4];
.global .align 4 .u32 imageEnabled;
.global .texref lightmap;
.global .align 16 .b8 tileInfo[16];
.global .align 4 .u32 additive;
.global .align 1 .b8 image[1];
.global .align 1 .b8 image_HDR[1];
.global .align 1 .b8 image_HDR2[1];
.global .align 1 .b8 image_Mask[1];
.global .align 1 .b8 image_RNM0[1];
.global .align 1 .b8 image_RNM1[1];
.global .align 1 .b8 image_RNM2[1];
.global .align 1 .b8 image_RNM3[1];
.global .align 1 .b8 uvpos[1];
.global .align 1 .b8 uvnormal[1];
.global .align 1 .b8 lightMeshBuffer[1];
.global .align 4 .u32 lightMeshBufferSize;
.global .align 4 .f32 lightInvCutoff;
.global .align 4 .f32 lightPointSize;
.global .align 4 .b8 lightColor[12];
.global .align 1 .b8 rnd_seeds[1];
.global .align 1 .b8 rnd_seeds2[1];
.global .align 4 .u32 samples;
.global .align 4 .b8 _ZN21rti_internal_typeinfo7pixelIDE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10resolutionE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6camPosE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo4rootE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12imageEnabledE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8tileInfoE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8additiveE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo19lightMeshBufferSizeE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14lightInvCutoffE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14lightPointSizeE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10lightColorE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo7samplesE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 8 .b8 _ZN21rti_internal_typename7pixelIDE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename10resolutionE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6camPosE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 16 .b8 _ZN21rti_internal_typename4rootE[9] = {114, 116, 79, 98, 106, 101, 99, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename12imageEnabledE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8tileInfoE[6] = {117, 105, 110, 116, 52, 0};
.global .align 4 .b8 _ZN21rti_internal_typename8additiveE[4] = {105, 110, 116, 0};
.global .align 16 .b8 _ZN21rti_internal_typename19lightMeshBufferSizeE[13] = {117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename14lightInvCutoffE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename14lightPointSizeE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename10lightColorE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 4 .b8 _ZN21rti_internal_typename7samplesE[4] = {105, 110, 116, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum7pixelIDE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10resolutionE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6camPosE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum4rootE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12imageEnabledE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8tileInfoE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8additiveE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum19lightMeshBufferSizeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14lightInvCutoffE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14lightPointSizeE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10lightColorE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum7samplesE = 4919;
.global .align 16 .b8 _ZN21rti_internal_semantic7pixelIDE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic10resolutionE[12] = {114, 116, 76, 97, 117, 110, 99, 104, 68, 105, 109, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic6normalE[17] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic6camPosE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic4rootE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12imageEnabledE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8tileInfoE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8additiveE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic19lightMeshBufferSizeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic14lightInvCutoffE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic14lightPointSizeE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic10lightColorE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic7samplesE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7pixelIDE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10resolutionE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6camPosE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation4rootE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12imageEnabledE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8tileInfoE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8additiveE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation19lightMeshBufferSizeE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14lightInvCutoffE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14lightPointSizeE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10lightColorE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7samplesE[1];
.const .align 4 .b8 __cudart_i2opi_f[24] = {65, 144, 67, 60, 153, 149, 98, 219, 192, 221, 52, 245, 209, 87, 39, 252, 41, 21, 68, 78, 110, 131, 249, 162};

.visible .entry _Z6oxMainv(

)
{
	.local .align 4 .b8 	__local_depot0[36];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<149>;
	.reg .b16 	%rs<153>;
	.reg .f32 	%f<988>;
	.reg .b32 	%r<413>;
	.reg .b64 	%rd<308>;


	mov.u64 	%rd307, __local_depot0;
	cvta.local.u64 	%SP, %rd307;
	ld.global.u32 	%r1, [lightMeshBufferSize];
	abs.s32 	%r2, %r1;
	ld.global.u32 	%r3, [samples];
	shl.b32 	%r4, %r3, 1;
	ld.global.v2.u32 	{%r103, %r104}, [pixelID];
	cvt.u64.u32	%rd22, %r103;
	cvt.u64.u32	%rd23, %r104;
	mov.u64 	%rd26, uvnormal;
	cvta.global.u64 	%rd21, %rd26;
	mov.u32 	%r101, 2;
	mov.u32 	%r102, 4;
	mov.u64 	%rd25, 0;
	// inline asm
	call (%rd20), _rt_buffer_get_64, (%rd21, %r101, %r102, %rd22, %rd23, %rd25, %rd25);
	// inline asm
	ld.u32 	%r5, [%rd20];
	shr.u32 	%r107, %r5, 16;
	cvt.u16.u32	%rs1, %r107;
	and.b16  	%rs7, %rs1, 255;
	cvt.u16.u32	%rs8, %r5;
	or.b16  	%rs9, %rs8, %rs7;
	setp.eq.s16	%p7, %rs9, 0;
	mov.f32 	%f916, 0f00000000;
	mov.f32 	%f917, %f916;
	mov.f32 	%f918, %f916;
	@%p7 bra 	BB0_2;

	ld.u8 	%rs10, [%rd20+1];
	and.b16  	%rs12, %rs8, 255;
	cvt.rn.f32.u16	%f217, %rs12;
	div.rn.f32 	%f218, %f217, 0f437F0000;
	fma.rn.f32 	%f219, %f218, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f220, %rs10;
	div.rn.f32 	%f221, %f220, 0f437F0000;
	fma.rn.f32 	%f222, %f221, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f223, %rs7;
	div.rn.f32 	%f224, %f223, 0f437F0000;
	fma.rn.f32 	%f225, %f224, 0f40000000, 0fBF800000;
	mul.f32 	%f226, %f222, %f222;
	fma.rn.f32 	%f227, %f219, %f219, %f226;
	fma.rn.f32 	%f228, %f225, %f225, %f227;
	sqrt.rn.f32 	%f229, %f228;
	rcp.rn.f32 	%f230, %f229;
	mul.f32 	%f916, %f219, %f230;
	mul.f32 	%f917, %f222, %f230;
	mul.f32 	%f918, %f225, %f230;

BB0_2:
	ld.global.v2.u32 	{%r108, %r109}, [pixelID];
	ld.global.v2.u32 	{%r111, %r112}, [tileInfo];
	add.s32 	%r6, %r108, %r111;
	add.s32 	%r7, %r109, %r112;
	setp.eq.f32	%p8, %f917, 0f00000000;
	setp.eq.f32	%p9, %f916, 0f00000000;
	and.pred  	%p10, %p9, %p8;
	setp.eq.f32	%p11, %f918, 0f00000000;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	BB0_140;
	bra.uni 	BB0_3;

BB0_140:
	ld.global.u32 	%r412, [imageEnabled];
	and.b32  	%r337, %r412, 1;
	setp.eq.b32	%p140, %r337, 1;
	@!%p140 bra 	BB0_142;
	bra.uni 	BB0_141;

BB0_141:
	cvt.u64.u32	%rd189, %r6;
	cvt.u64.u32	%rd190, %r7;
	mov.u64 	%rd193, image;
	cvta.global.u64 	%rd188, %rd193;
	// inline asm
	call (%rd187), _rt_buffer_get_64, (%rd188, %r101, %r102, %rd189, %rd190, %rd25, %rd25);
	// inline asm
	mov.u16 	%rs85, 0;
	st.v4.u8 	[%rd187], {%rs85, %rs85, %rs85, %rs85};
	ld.global.u32 	%r412, [imageEnabled];

BB0_142:
	and.b32  	%r340, %r412, 8;
	setp.eq.s32	%p141, %r340, 0;
	@%p141 bra 	BB0_144;

	cvt.u64.u32	%rd197, %r7;
	cvt.u64.u32	%rd196, %r6;
	mov.u64 	%rd200, image_Mask;
	cvta.global.u64 	%rd195, %rd200;
	// inline asm
	call (%rd194), _rt_buffer_get_64, (%rd195, %r101, %r101, %rd196, %rd197, %rd25, %rd25);
	// inline asm
	mov.f32 	%f873, 0f00000000;
	cvt.rzi.u32.f32	%r343, %f873;
	cvt.u16.u32	%rs86, %r343;
	mov.u16 	%rs87, 0;
	st.v2.u8 	[%rd194], {%rs86, %rs87};
	ld.global.u32 	%r412, [imageEnabled];

BB0_144:
	cvt.u64.u32	%rd18, %r6;
	cvt.u64.u32	%rd19, %r7;
	and.b32  	%r344, %r412, 4;
	setp.eq.s32	%p142, %r344, 0;
	@%p142 bra 	BB0_148;

	ld.global.u32 	%r345, [additive];
	setp.eq.s32	%p143, %r345, 0;
	@%p143 bra 	BB0_147;

	mov.u64 	%rd213, image_HDR;
	cvta.global.u64 	%rd202, %rd213;
	mov.u32 	%r349, 8;
	// inline asm
	call (%rd201), _rt_buffer_get_64, (%rd202, %r101, %r349, %rd18, %rd19, %rd25, %rd25);
	// inline asm
	ld.v4.u16 	{%rs94, %rs95, %rs96, %rs97}, [%rd201];
	// inline asm
	{  cvt.f32.f16 %f874, %rs94;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f875, %rs95;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f876, %rs96;}

	// inline asm
	// inline asm
	call (%rd207), _rt_buffer_get_64, (%rd202, %r101, %r349, %rd18, %rd19, %rd25, %rd25);
	// inline asm
	add.f32 	%f877, %f874, 0f00000000;
	add.f32 	%f878, %f875, 0f00000000;
	add.f32 	%f879, %f876, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs93, %f879;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs92, %f878;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs91, %f877;}

	// inline asm
	mov.u16 	%rs98, 0;
	st.v4.u16 	[%rd207], {%rs91, %rs92, %rs93, %rs98};
	bra.uni 	BB0_148;

BB0_3:
	ld.global.v2.u32 	{%r121, %r122}, [pixelID];
	cvt.u64.u32	%rd29, %r121;
	cvt.u64.u32	%rd30, %r122;
	mov.u64 	%rd39, uvpos;
	cvta.global.u64 	%rd28, %rd39;
	mov.u32 	%r117, 12;
	// inline asm
	call (%rd27), _rt_buffer_get_64, (%rd28, %r101, %r117, %rd29, %rd30, %rd25, %rd25);
	// inline asm
	ld.f32 	%f9, [%rd27+8];
	ld.f32 	%f8, [%rd27+4];
	ld.f32 	%f7, [%rd27];
	mul.f32 	%f237, %f7, 0f3456BF95;
	mul.f32 	%f238, %f8, 0f3456BF95;
	mul.f32 	%f239, %f9, 0f3456BF95;
	abs.f32 	%f240, %f916;
	div.rn.f32 	%f241, %f237, %f240;
	abs.f32 	%f242, %f917;
	div.rn.f32 	%f243, %f238, %f242;
	abs.f32 	%f244, %f918;
	div.rn.f32 	%f245, %f239, %f244;
	abs.f32 	%f246, %f241;
	abs.f32 	%f247, %f243;
	abs.f32 	%f248, %f245;
	mov.f32 	%f249, 0f38D1B717;
	max.f32 	%f250, %f246, %f249;
	max.f32 	%f251, %f247, %f249;
	max.f32 	%f252, %f248, %f249;
	fma.rn.f32 	%f10, %f916, %f250, %f7;
	fma.rn.f32 	%f11, %f917, %f251, %f8;
	fma.rn.f32 	%f12, %f918, %f252, %f9;
	ld.global.v2.u32 	{%r125, %r126}, [pixelID];
	cvt.u64.u32	%rd35, %r125;
	cvt.u64.u32	%rd36, %r126;
	mov.u64 	%rd40, rnd_seeds;
	cvta.global.u64 	%rd34, %rd40;
	// inline asm
	call (%rd33), _rt_buffer_get_64, (%rd34, %r101, %r102, %rd35, %rd36, %rd25, %rd25);
	// inline asm
	ld.u32 	%r388, [%rd33];
	mov.pred 	%p13, 0;
	mov.f32 	%f17, 0f00000000;
	mov.u32 	%r384, 0;
	setp.lt.s32	%p14, %r2, 1;
	@%p14 bra 	BB0_4;

	ld.global.f32 	%f13, [lightPointSize];
	mul.f32 	%f14, %f10, 0f3456BF95;
	mul.f32 	%f15, %f11, 0f3456BF95;
	mul.f32 	%f16, %f12, 0f3456BF95;
	mov.f32 	%f17, 0f00000000;
	mov.u32 	%r384, 0;
	abs.f32 	%f381, %f15;
	abs.f32 	%f382, %f14;
	max.f32 	%f383, %f382, %f381;
	abs.f32 	%f384, %f16;
	max.f32 	%f385, %f383, %f384;
	mov.f32 	%f18, %f17;
	mov.f32 	%f19, %f17;
	mov.f32 	%f20, %f17;
	mov.f32 	%f21, %f17;
	mov.f32 	%f22, %f17;

BB0_6:
	shl.b32 	%r10, %r384, 1;
	cvt.s64.s32	%rd43, %r10;
	mov.u64 	%rd53, lightMeshBuffer;
	cvta.global.u64 	%rd42, %rd53;
	mov.u32 	%r130, 1;
	// inline asm
	call (%rd41), _rt_buffer_get_64, (%rd42, %r130, %r117, %rd43, %rd25, %rd25, %rd25);
	// inline asm
	ld.f32 	%f259, [%rd41];
	sub.f32 	%f260, %f259, %f7;
	ld.f32 	%f261, [%rd41+4];
	sub.f32 	%f262, %f261, %f8;
	ld.f32 	%f263, [%rd41+8];
	sub.f32 	%f264, %f263, %f9;
	mul.f32 	%f265, %f262, %f262;
	fma.rn.f32 	%f266, %f260, %f260, %f265;
	fma.rn.f32 	%f267, %f264, %f264, %f266;
	sqrt.rn.f32 	%f23, %f267;
	rcp.rn.f32 	%f268, %f23;
	mul.f32 	%f24, %f260, %f268;
	mul.f32 	%f25, %f262, %f268;
	mul.f32 	%f26, %f264, %f268;
	mul.f32 	%f269, %f23, %f23;
	div.rn.f32 	%f27, %f13, %f269;
	ld.global.v2.u32 	{%r134, %r135}, [pixelID];
	cvt.u64.u32	%rd54, %r135;
	cvt.u64.u32	%rd55, %r134;
	and.b64  	%rd49, %rd55, 255;
	and.b64  	%rd50, %rd54, 255;
	mov.u64 	%rd56, rnd_seeds2;
	cvta.global.u64 	%rd48, %rd56;
	mov.u32 	%r133, 3;
	// inline asm
	call (%rd47), _rt_buffer_get_64, (%rd48, %r101, %r133, %rd49, %rd50, %rd25, %rd25);
	// inline asm
	setp.eq.s32	%p15, %r3, 0;
	@%p15 bra 	BB0_8;

	ld.u8 	%rs14, [%rd47];
	cvt.rn.f32.u16	%f270, %rs14;
	div.rn.f32 	%f271, %f270, 0fC37F0000;
	fma.rn.f32 	%f272, %f271, 0f3F333333, 0f3F800000;
	setp.gt.f32	%p17, %f27, %f272;
	mov.pred 	%p148, -1;
	@%p17 bra 	BB0_23;

BB0_8:
	ld.global.f32 	%f275, [lightInvCutoff];
	mul.f32 	%f28, %f23, %f275;
	mov.f32 	%f279, 0f40800000;
	abs.f32 	%f30, %f28;
	setp.lt.f32	%p18, %f30, 0f00800000;
	mul.f32 	%f281, %f30, 0f4B800000;
	selp.f32	%f282, 0fC3170000, 0fC2FE0000, %p18;
	selp.f32	%f283, %f281, %f30, %p18;
	mov.b32 	 %r138, %f283;
	and.b32  	%r139, %r138, 8388607;
	or.b32  	%r140, %r139, 1065353216;
	mov.b32 	 %f284, %r140;
	shr.u32 	%r141, %r138, 23;
	cvt.rn.f32.u32	%f285, %r141;
	add.f32 	%f286, %f282, %f285;
	setp.gt.f32	%p19, %f284, 0f3FB504F3;
	mul.f32 	%f287, %f284, 0f3F000000;
	add.f32 	%f288, %f286, 0f3F800000;
	selp.f32	%f289, %f287, %f284, %p19;
	selp.f32	%f290, %f288, %f286, %p19;
	add.f32 	%f291, %f289, 0fBF800000;
	add.f32 	%f274, %f289, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f273,%f274;
	// inline asm
	add.f32 	%f292, %f291, %f291;
	mul.f32 	%f293, %f273, %f292;
	mul.f32 	%f294, %f293, %f293;
	mov.f32 	%f295, 0f3C4CAF63;
	mov.f32 	%f296, 0f3B18F0FE;
	fma.rn.f32 	%f297, %f296, %f294, %f295;
	mov.f32 	%f298, 0f3DAAAABD;
	fma.rn.f32 	%f299, %f297, %f294, %f298;
	mul.rn.f32 	%f300, %f299, %f294;
	mul.rn.f32 	%f301, %f300, %f293;
	sub.f32 	%f302, %f291, %f293;
	neg.f32 	%f303, %f293;
	add.f32 	%f304, %f302, %f302;
	fma.rn.f32 	%f305, %f303, %f291, %f304;
	mul.rn.f32 	%f306, %f273, %f305;
	add.f32 	%f307, %f301, %f293;
	sub.f32 	%f308, %f293, %f307;
	add.f32 	%f309, %f301, %f308;
	add.f32 	%f310, %f306, %f309;
	add.f32 	%f311, %f307, %f310;
	sub.f32 	%f312, %f307, %f311;
	add.f32 	%f313, %f310, %f312;
	mov.f32 	%f314, 0f3F317200;
	mul.rn.f32 	%f315, %f290, %f314;
	mov.f32 	%f316, 0f35BFBE8E;
	mul.rn.f32 	%f317, %f290, %f316;
	add.f32 	%f318, %f315, %f311;
	sub.f32 	%f319, %f315, %f318;
	add.f32 	%f320, %f311, %f319;
	add.f32 	%f321, %f313, %f320;
	add.f32 	%f322, %f317, %f321;
	add.f32 	%f323, %f318, %f322;
	sub.f32 	%f324, %f318, %f323;
	add.f32 	%f325, %f322, %f324;
	mul.rn.f32 	%f326, %f279, %f323;
	neg.f32 	%f327, %f326;
	fma.rn.f32 	%f328, %f279, %f323, %f327;
	fma.rn.f32 	%f329, %f279, %f325, %f328;
	mov.f32 	%f330, 0f00000000;
	fma.rn.f32 	%f331, %f330, %f323, %f329;
	add.rn.f32 	%f332, %f326, %f331;
	neg.f32 	%f333, %f332;
	add.rn.f32 	%f334, %f326, %f333;
	add.rn.f32 	%f335, %f334, %f331;
	mov.b32 	 %r142, %f332;
	setp.eq.s32	%p20, %r142, 1118925336;
	add.s32 	%r143, %r142, -1;
	mov.b32 	 %f336, %r143;
	add.f32 	%f337, %f335, 0f37000000;
	selp.f32	%f338, %f336, %f332, %p20;
	selp.f32	%f31, %f337, %f335, %p20;
	mul.f32 	%f339, %f338, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f340, %f339;
	mov.f32 	%f341, 0fBF317200;
	fma.rn.f32 	%f342, %f340, %f341, %f338;
	mov.f32 	%f343, 0fB5BFBE8E;
	fma.rn.f32 	%f344, %f340, %f343, %f342;
	mul.f32 	%f345, %f344, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f346, %f345;
	add.f32 	%f347, %f340, 0f00000000;
	ex2.approx.f32 	%f348, %f347;
	mul.f32 	%f349, %f346, %f348;
	setp.lt.f32	%p21, %f338, 0fC2D20000;
	selp.f32	%f350, 0f00000000, %f349, %p21;
	setp.gt.f32	%p22, %f338, 0f42D20000;
	selp.f32	%f925, 0f7F800000, %f350, %p22;
	setp.eq.f32	%p23, %f925, 0f7F800000;
	@%p23 bra 	BB0_10;

	fma.rn.f32 	%f925, %f925, %f31, %f925;

BB0_10:
	mov.f32 	%f914, 0f40000000;
	cvt.rzi.f32.f32	%f913, %f914;
	add.f32 	%f912, %f913, %f913;
	mov.f32 	%f911, 0f40800000;
	sub.f32 	%f910, %f911, %f912;
	abs.f32 	%f909, %f910;
	setp.lt.f32	%p24, %f28, 0f00000000;
	setp.eq.f32	%p25, %f909, 0f3F800000;
	and.pred  	%p1, %p24, %p25;
	mov.b32 	 %r144, %f925;
	xor.b32  	%r145, %r144, -2147483648;
	mov.b32 	 %f351, %r145;
	selp.f32	%f927, %f351, %f925, %p1;
	setp.eq.f32	%p26, %f28, 0f00000000;
	@%p26 bra 	BB0_13;
	bra.uni 	BB0_11;

BB0_13:
	add.f32 	%f354, %f28, %f28;
	selp.f32	%f927, %f354, 0f00000000, %p25;
	bra.uni 	BB0_14;

BB0_11:
	setp.geu.f32	%p27, %f28, 0f00000000;
	@%p27 bra 	BB0_14;

	mov.f32 	%f915, 0f40800000;
	cvt.rzi.f32.f32	%f353, %f915;
	setp.neu.f32	%p28, %f353, 0f40800000;
	selp.f32	%f927, 0f7FFFFFFF, %f927, %p28;

BB0_14:
	add.f32 	%f355, %f30, 0f40800000;
	mov.b32 	 %r146, %f355;
	setp.lt.s32	%p30, %r146, 2139095040;
	@%p30 bra 	BB0_19;

	setp.gtu.f32	%p31, %f30, 0f7F800000;
	@%p31 bra 	BB0_18;
	bra.uni 	BB0_16;

BB0_18:
	add.f32 	%f927, %f28, 0f40800000;
	bra.uni 	BB0_19;

BB0_16:
	setp.neu.f32	%p32, %f30, 0f7F800000;
	@%p32 bra 	BB0_19;

	selp.f32	%f927, 0fFF800000, 0f7F800000, %p1;

BB0_19:
	mov.u32 	%r381, 1;
	mov.u64 	%rd302, lightMeshBuffer;
	cvta.global.u64 	%rd301, %rd302;
	shl.b32 	%r380, %r384, 1;
	mov.f32 	%f356, 0f3F800000;
	sub.f32 	%f357, %f356, %f927;
	setp.eq.f32	%p33, %f28, 0f3F800000;
	selp.f32	%f358, 0f00000000, %f357, %p33;
	cvt.sat.f32.f32	%f359, %f358;
	mul.f32 	%f360, %f27, %f359;
	add.s32 	%r149, %r380, 1;
	cvt.s64.s32	%rd59, %r149;
	// inline asm
	call (%rd57), _rt_buffer_get_64, (%rd301, %r381, %r117, %rd59, %rd25, %rd25, %rd25);
	// inline asm
	ld.f32 	%f361, [%rd57];
	mul.f32 	%f362, %f24, %f361;
	ld.f32 	%f363, [%rd57+4];
	mul.f32 	%f364, %f25, %f363;
	neg.f32 	%f365, %f364;
	sub.f32 	%f366, %f365, %f362;
	ld.f32 	%f367, [%rd57+8];
	mul.f32 	%f368, %f26, %f367;
	sub.f32 	%f369, %f366, %f368;
	cvt.sat.f32.f32	%f370, %f369;
	mul.f32 	%f42, %f360, %f370;
	mul.f32 	%f371, %f917, %f25;
	fma.rn.f32 	%f372, %f916, %f24, %f371;
	fma.rn.f32 	%f43, %f918, %f26, %f372;
	setp.leu.f32	%p34, %f42, 0f3727C5AC;
	@%p34 bra 	BB0_21;

	mov.u32 	%r382, 1;
	add.u64 	%rd64, %SP, 4;
	cvta.to.local.u64 	%rd65, %rd64;
	max.f32 	%f379, %f385, %f249;
	sub.f32 	%f380, %f23, %f379;
	mov.u32 	%r153, 1065353216;
	st.local.u32 	[%rd65], %r153;
	ld.global.u32 	%r150, [root];
	// inline asm
	call _rt_trace_64, (%r150, %f10, %f11, %f12, %f24, %f25, %f26, %r382, %f379, %f380, %rd64, %r102);
	// inline asm
	ld.local.f32 	%f387, [%rd65];
	mul.f32 	%f388, %f42, 0f3EA2F983;
	mul.f32 	%f389, %f388, %f387;
	cvt.sat.f32.f32	%f390, %f43;
	fma.rn.f32 	%f22, %f390, %f389, %f22;
	fma.rn.f32 	%f20, %f24, %f389, %f20;
	fma.rn.f32 	%f19, %f25, %f389, %f19;
	fma.rn.f32 	%f18, %f26, %f389, %f18;
	add.f32 	%f21, %f21, %f389;
	add.f32 	%f17, %f17, %f387;

BB0_21:
	add.s32 	%r384, %r384, 1;
	setp.lt.s32	%p36, %r384, %r2;
	@%p36 bra 	BB0_6;
	bra.uni 	BB0_22;

BB0_4:
	mov.f32 	%f18, %f17;
	mov.f32 	%f19, %f17;
	mov.f32 	%f20, %f17;
	mov.f32 	%f21, %f17;
	mov.f32 	%f22, %f17;

BB0_22:
	mov.pred 	%p148, %p13;

BB0_23:
	cvt.rn.f32.s32	%f391, %r384;
	mov.f32 	%f392, 0f3F800000;
	max.f32 	%f393, %f391, %f392;
	div.rn.f32 	%f970, %f22, %f393;
	div.rn.f32 	%f975, %f17, %f393;
	div.rn.f32 	%f971, %f21, %f393;
	div.rn.f32 	%f972, %f20, %f393;
	div.rn.f32 	%f973, %f19, %f393;
	div.rn.f32 	%f974, %f18, %f393;
	@!%p148 bra 	BB0_76;
	bra.uni 	BB0_24;

BB0_24:
	mov.f32 	%f946, 0f00000000;
	setp.lt.s32	%p37, %r3, 1;
	mov.f32 	%f947, %f946;
	mov.f32 	%f948, %f946;
	mov.f32 	%f949, %f946;
	mov.f32 	%f950, %f946;
	mov.f32 	%f951, %f946;
	@%p37 bra 	BB0_75;

	cvt.rn.f32.s32	%f406, %r4;
	rcp.rn.f32 	%f68, %f406;
	add.u64 	%rd66, %SP, 8;
	cvta.to.local.u64 	%rd3, %rd66;
	mul.f32 	%f69, %f10, 0f3456BF95;
	mul.f32 	%f70, %f11, 0f3456BF95;
	mul.f32 	%f71, %f12, 0f3456BF95;
	add.u64 	%rd67, %SP, 0;
	cvta.to.local.u64 	%rd4, %rd67;
	mov.f32 	%f946, 0f00000000;
	mov.u32 	%r154, 0;
	abs.f32 	%f407, %f70;
	abs.f32 	%f408, %f69;
	max.f32 	%f409, %f408, %f407;
	abs.f32 	%f410, %f71;
	max.f32 	%f411, %f409, %f410;
	mov.u32 	%r385, %r154;
	mov.f32 	%f947, %f946;
	mov.f32 	%f948, %f946;
	mov.f32 	%f949, %f946;
	mov.f32 	%f950, %f946;
	mov.f32 	%f951, %f946;

BB0_26:
	cvt.rn.f32.s32	%f78, %r385;
	max.f32 	%f79, %f411, %f249;
	mov.u32 	%r387, %r154;

BB0_27:
	mad.lo.s32 	%r156, %r388, 1664525, 1013904223;
	and.b32  	%r157, %r156, 16777215;
	cvt.rn.f32.u32	%f413, %r157;
	fma.rn.f32 	%f414, %f413, 0f33800000, %f78;
	mul.f32 	%f415, %f68, %f414;
	mad.lo.s32 	%r388, %r156, 1664525, 1013904223;
	and.b32  	%r158, %r388, 16777215;
	cvt.rn.f32.u32	%f416, %r158;
	cvt.rn.f32.s32	%f417, %r387;
	fma.rn.f32 	%f418, %f416, 0f33800000, %f417;
	mul.f32 	%f419, %f68, %f418;
	fma.rn.f32 	%f86, %f415, 0fC0000000, 0f3F800000;
	mul.f32 	%f420, %f86, %f86;
	sub.f32 	%f422, %f392, %f420;
	mov.f32 	%f423, 0f00000000;
	max.f32 	%f424, %f423, %f422;
	sqrt.rn.f32 	%f87, %f424;
	mul.f32 	%f958, %f419, 0f40C90FDB;
	abs.f32 	%f89, %f958;
	setp.neu.f32	%p38, %f89, 0f7F800000;
	mov.f32 	%f952, %f958;
	@%p38 bra 	BB0_29;

	mul.rn.f32 	%f952, %f958, %f423;

BB0_29:
	mul.f32 	%f426, %f952, 0f3F22F983;
	cvt.rni.s32.f32	%r398, %f426;
	cvt.rn.f32.s32	%f427, %r398;
	neg.f32 	%f428, %f427;
	mov.f32 	%f429, 0f3FC90FDA;
	fma.rn.f32 	%f430, %f428, %f429, %f952;
	mov.f32 	%f431, 0f33A22168;
	fma.rn.f32 	%f432, %f428, %f431, %f430;
	mov.f32 	%f433, 0f27C234C5;
	fma.rn.f32 	%f953, %f428, %f433, %f432;
	abs.f32 	%f434, %f952;
	setp.leu.f32	%p39, %f434, 0f47CE4780;
	@%p39 bra 	BB0_40;

	mov.b32 	 %r19, %f952;
	shr.u32 	%r20, %r19, 23;
	shl.b32 	%r161, %r19, 8;
	or.b32  	%r21, %r161, -2147483648;
	mov.u32 	%r390, 0;
	mov.u64 	%rd303, __cudart_i2opi_f;
	mov.u32 	%r389, -6;
	mov.u64 	%rd304, %rd3;

BB0_31:
	.pragma "nounroll";
	ld.const.u32 	%r164, [%rd303];
	// inline asm
	{
	mad.lo.cc.u32   %r162, %r164, %r21, %r390;
	madc.hi.u32     %r390, %r164, %r21,  0;
	}
	// inline asm
	st.local.u32 	[%rd304], %r162;
	add.s64 	%rd304, %rd304, 4;
	add.s64 	%rd303, %rd303, 4;
	add.s32 	%r389, %r389, 1;
	setp.ne.s32	%p40, %r389, 0;
	@%p40 bra 	BB0_31;

	and.b32  	%r167, %r20, 255;
	add.s32 	%r168, %r167, -128;
	shr.u32 	%r169, %r168, 5;
	and.b32  	%r26, %r19, -2147483648;
	st.local.u32 	[%rd3+24], %r390;
	mov.u32 	%r170, 6;
	sub.s32 	%r171, %r170, %r169;
	mul.wide.s32 	%rd69, %r171, 4;
	add.s64 	%rd9, %rd3, %rd69;
	ld.local.u32 	%r391, [%rd9];
	ld.local.u32 	%r392, [%rd9+-4];
	and.b32  	%r29, %r20, 31;
	setp.eq.s32	%p41, %r29, 0;
	@%p41 bra 	BB0_34;

	mov.u32 	%r172, 32;
	sub.s32 	%r173, %r172, %r29;
	shr.u32 	%r174, %r392, %r173;
	shl.b32 	%r175, %r391, %r29;
	add.s32 	%r391, %r174, %r175;
	ld.local.u32 	%r176, [%rd9+-8];
	shr.u32 	%r177, %r176, %r173;
	shl.b32 	%r178, %r392, %r29;
	add.s32 	%r392, %r177, %r178;

BB0_34:
	shr.u32 	%r179, %r392, 30;
	shl.b32 	%r180, %r391, 2;
	add.s32 	%r393, %r179, %r180;
	shl.b32 	%r35, %r392, 2;
	shr.u32 	%r181, %r393, 31;
	shr.u32 	%r182, %r391, 30;
	add.s32 	%r36, %r181, %r182;
	setp.eq.s32	%p42, %r181, 0;
	@%p42 bra 	BB0_35;
	bra.uni 	BB0_36;

BB0_35:
	mov.u32 	%r394, %r26;
	mov.u32 	%r395, %r35;
	bra.uni 	BB0_37;

BB0_36:
	not.b32 	%r183, %r393;
	neg.s32 	%r395, %r35;
	setp.eq.s32	%p43, %r35, 0;
	selp.u32	%r184, 1, 0, %p43;
	add.s32 	%r393, %r184, %r183;
	xor.b32  	%r394, %r26, -2147483648;

BB0_37:
	clz.b32 	%r397, %r393;
	setp.eq.s32	%p44, %r397, 0;
	shl.b32 	%r185, %r393, %r397;
	mov.u32 	%r186, 32;
	sub.s32 	%r187, %r186, %r397;
	shr.u32 	%r188, %r395, %r187;
	add.s32 	%r189, %r188, %r185;
	selp.b32	%r44, %r393, %r189, %p44;
	mov.u32 	%r190, -921707870;
	mul.hi.u32 	%r396, %r44, %r190;
	setp.eq.s32	%p45, %r26, 0;
	neg.s32 	%r191, %r36;
	selp.b32	%r398, %r36, %r191, %p45;
	setp.lt.s32	%p46, %r396, 1;
	@%p46 bra 	BB0_39;

	mul.lo.s32 	%r192, %r44, -921707870;
	shr.u32 	%r193, %r192, 31;
	shl.b32 	%r194, %r396, 1;
	add.s32 	%r396, %r193, %r194;
	add.s32 	%r397, %r397, 1;

BB0_39:
	mov.u32 	%r195, 126;
	sub.s32 	%r196, %r195, %r397;
	shl.b32 	%r197, %r196, 23;
	add.s32 	%r198, %r396, 1;
	shr.u32 	%r199, %r198, 7;
	add.s32 	%r200, %r199, 1;
	shr.u32 	%r201, %r200, 1;
	add.s32 	%r202, %r201, %r197;
	or.b32  	%r203, %r202, %r394;
	mov.b32 	 %f953, %r203;

BB0_40:
	mul.rn.f32 	%f95, %f953, %f953;
	add.s32 	%r52, %r398, 1;
	and.b32  	%r53, %r52, 1;
	setp.eq.s32	%p47, %r53, 0;
	@%p47 bra 	BB0_42;
	bra.uni 	BB0_41;

BB0_42:
	mov.f32 	%f437, 0f3C08839E;
	mov.f32 	%f438, 0fB94CA1F9;
	fma.rn.f32 	%f954, %f438, %f95, %f437;
	bra.uni 	BB0_43;

BB0_41:
	mov.f32 	%f435, 0fBAB6061A;
	mov.f32 	%f436, 0f37CCF5CE;
	fma.rn.f32 	%f954, %f436, %f95, %f435;

BB0_43:
	@%p47 bra 	BB0_45;
	bra.uni 	BB0_44;

BB0_45:
	mov.f32 	%f442, 0fBE2AAAA3;
	fma.rn.f32 	%f443, %f954, %f95, %f442;
	fma.rn.f32 	%f955, %f443, %f95, %f423;
	bra.uni 	BB0_46;

BB0_44:
	mov.f32 	%f439, 0f3D2AAAA5;
	fma.rn.f32 	%f440, %f954, %f95, %f439;
	mov.f32 	%f441, 0fBF000000;
	fma.rn.f32 	%f955, %f440, %f95, %f441;

BB0_46:
	fma.rn.f32 	%f956, %f955, %f953, %f953;
	@%p47 bra 	BB0_48;

	fma.rn.f32 	%f956, %f955, %f95, %f392;

BB0_48:
	and.b32  	%r204, %r52, 2;
	setp.eq.s32	%p50, %r204, 0;
	@%p50 bra 	BB0_50;

	mov.f32 	%f447, 0fBF800000;
	fma.rn.f32 	%f956, %f956, %f447, %f423;

BB0_50:
	@%p38 bra 	BB0_52;

	mul.rn.f32 	%f958, %f958, %f423;

BB0_52:
	mul.f32 	%f449, %f958, 0f3F22F983;
	cvt.rni.s32.f32	%r408, %f449;
	cvt.rn.f32.s32	%f450, %r408;
	neg.f32 	%f451, %f450;
	fma.rn.f32 	%f453, %f451, %f429, %f958;
	fma.rn.f32 	%f455, %f451, %f431, %f453;
	fma.rn.f32 	%f959, %f451, %f433, %f455;
	abs.f32 	%f457, %f958;
	setp.leu.f32	%p52, %f457, 0f47CE4780;
	@%p52 bra 	BB0_63;

	mov.b32 	 %r55, %f958;
	shr.u32 	%r56, %r55, 23;
	shl.b32 	%r207, %r55, 8;
	or.b32  	%r57, %r207, -2147483648;
	mov.u32 	%r400, 0;
	mov.u64 	%rd305, __cudart_i2opi_f;
	mov.u32 	%r399, -6;
	mov.u64 	%rd306, %rd3;

BB0_54:
	.pragma "nounroll";
	ld.const.u32 	%r210, [%rd305];
	// inline asm
	{
	mad.lo.cc.u32   %r208, %r210, %r57, %r400;
	madc.hi.u32     %r400, %r210, %r57,  0;
	}
	// inline asm
	st.local.u32 	[%rd306], %r208;
	add.s64 	%rd306, %rd306, 4;
	add.s64 	%rd305, %rd305, 4;
	add.s32 	%r399, %r399, 1;
	setp.ne.s32	%p53, %r399, 0;
	@%p53 bra 	BB0_54;

	and.b32  	%r213, %r56, 255;
	add.s32 	%r214, %r213, -128;
	shr.u32 	%r215, %r214, 5;
	and.b32  	%r62, %r55, -2147483648;
	st.local.u32 	[%rd3+24], %r400;
	mov.u32 	%r216, 6;
	sub.s32 	%r217, %r216, %r215;
	mul.wide.s32 	%rd71, %r217, 4;
	add.s64 	%rd14, %rd3, %rd71;
	ld.local.u32 	%r401, [%rd14];
	ld.local.u32 	%r402, [%rd14+-4];
	and.b32  	%r65, %r56, 31;
	setp.eq.s32	%p54, %r65, 0;
	@%p54 bra 	BB0_57;

	mov.u32 	%r218, 32;
	sub.s32 	%r219, %r218, %r65;
	shr.u32 	%r220, %r402, %r219;
	shl.b32 	%r221, %r401, %r65;
	add.s32 	%r401, %r220, %r221;
	ld.local.u32 	%r222, [%rd14+-8];
	shr.u32 	%r223, %r222, %r219;
	shl.b32 	%r224, %r402, %r65;
	add.s32 	%r402, %r223, %r224;

BB0_57:
	shr.u32 	%r225, %r402, 30;
	shl.b32 	%r226, %r401, 2;
	add.s32 	%r403, %r225, %r226;
	shl.b32 	%r71, %r402, 2;
	shr.u32 	%r227, %r403, 31;
	shr.u32 	%r228, %r401, 30;
	add.s32 	%r72, %r227, %r228;
	setp.eq.s32	%p55, %r227, 0;
	@%p55 bra 	BB0_58;
	bra.uni 	BB0_59;

BB0_58:
	mov.u32 	%r404, %r62;
	mov.u32 	%r405, %r71;
	bra.uni 	BB0_60;

BB0_59:
	not.b32 	%r229, %r403;
	neg.s32 	%r405, %r71;
	setp.eq.s32	%p56, %r71, 0;
	selp.u32	%r230, 1, 0, %p56;
	add.s32 	%r403, %r230, %r229;
	xor.b32  	%r404, %r62, -2147483648;

BB0_60:
	clz.b32 	%r407, %r403;
	setp.eq.s32	%p57, %r407, 0;
	shl.b32 	%r231, %r403, %r407;
	mov.u32 	%r232, 32;
	sub.s32 	%r233, %r232, %r407;
	shr.u32 	%r234, %r405, %r233;
	add.s32 	%r235, %r234, %r231;
	selp.b32	%r80, %r403, %r235, %p57;
	mov.u32 	%r236, -921707870;
	mul.hi.u32 	%r406, %r80, %r236;
	setp.eq.s32	%p58, %r62, 0;
	neg.s32 	%r237, %r72;
	selp.b32	%r408, %r72, %r237, %p58;
	setp.lt.s32	%p59, %r406, 1;
	@%p59 bra 	BB0_62;

	mul.lo.s32 	%r238, %r80, -921707870;
	shr.u32 	%r239, %r238, 31;
	shl.b32 	%r240, %r406, 1;
	add.s32 	%r406, %r239, %r240;
	add.s32 	%r407, %r407, 1;

BB0_62:
	mov.u32 	%r241, 126;
	sub.s32 	%r242, %r241, %r407;
	shl.b32 	%r243, %r242, 23;
	add.s32 	%r244, %r406, 1;
	shr.u32 	%r245, %r244, 7;
	add.s32 	%r246, %r245, 1;
	shr.u32 	%r247, %r246, 1;
	add.s32 	%r248, %r247, %r243;
	or.b32  	%r249, %r248, %r404;
	mov.b32 	 %f959, %r249;

BB0_63:
	mul.rn.f32 	%f112, %f959, %f959;
	and.b32  	%r88, %r408, 1;
	setp.eq.s32	%p60, %r88, 0;
	@%p60 bra 	BB0_65;
	bra.uni 	BB0_64;

BB0_65:
	mov.f32 	%f460, 0f3C08839E;
	mov.f32 	%f461, 0fB94CA1F9;
	fma.rn.f32 	%f960, %f461, %f112, %f460;
	bra.uni 	BB0_66;

BB0_64:
	mov.f32 	%f458, 0fBAB6061A;
	mov.f32 	%f459, 0f37CCF5CE;
	fma.rn.f32 	%f960, %f459, %f112, %f458;

BB0_66:
	@%p60 bra 	BB0_68;
	bra.uni 	BB0_67;

BB0_68:
	mov.f32 	%f465, 0fBE2AAAA3;
	fma.rn.f32 	%f466, %f960, %f112, %f465;
	fma.rn.f32 	%f961, %f466, %f112, %f423;
	bra.uni 	BB0_69;

BB0_67:
	mov.f32 	%f462, 0f3D2AAAA5;
	fma.rn.f32 	%f463, %f960, %f112, %f462;
	mov.f32 	%f464, 0fBF000000;
	fma.rn.f32 	%f961, %f463, %f112, %f464;

BB0_69:
	fma.rn.f32 	%f962, %f961, %f959, %f959;
	@%p60 bra 	BB0_71;

	fma.rn.f32 	%f962, %f961, %f112, %f392;

BB0_71:
	and.b32  	%r250, %r408, 2;
	setp.eq.s32	%p63, %r250, 0;
	@%p63 bra 	BB0_73;

	mov.f32 	%f470, 0fBF800000;
	fma.rn.f32 	%f962, %f962, %f470, %f423;

BB0_73:
	mul.f32 	%f474, %f87, %f956;
	mov.u32 	%r252, 0;
	st.local.u32 	[%rd4], %r252;
	ld.global.u32 	%r251, [root];
	mul.f32 	%f475, %f87, %f962;
	mov.f32 	%f478, 0f6C4ECB8F;
	// inline asm
	call _rt_trace_64, (%r251, %f10, %f11, %f12, %f474, %f475, %f86, %r252, %f79, %f478, %rd67, %r102);
	// inline asm
	ld.local.f32 	%f479, [%rd4];
	setp.lt.f32	%p64, %f479, 0f00000000;
	selp.f32	%f480, 0f00000000, %f479, %p64;
	selp.f32	%f481, 0f00000000, 0f3F800000, %p64;
	add.f32 	%f946, %f946, %f481;
	fma.rn.f32 	%f949, %f474, %f480, %f949;
	fma.rn.f32 	%f948, %f475, %f480, %f948;
	fma.rn.f32 	%f947, %f86, %f480, %f947;
	add.f32 	%f950, %f950, %f480;
	mul.f32 	%f482, %f917, %f475;
	fma.rn.f32 	%f483, %f916, %f474, %f482;
	fma.rn.f32 	%f484, %f918, %f86, %f483;
	cvt.sat.f32.f32	%f485, %f484;
	fma.rn.f32 	%f951, %f480, %f485, %f951;
	add.s32 	%r387, %r387, 1;
	setp.lt.s32	%p65, %r387, %r4;
	@%p65 bra 	BB0_27;

	add.s32 	%r385, %r385, 1;
	setp.lt.s32	%p66, %r385, %r4;
	@%p66 bra 	BB0_26;

BB0_75:
	mul.lo.s32 	%r254, %r4, %r4;
	cvt.rn.f32.s32	%f486, %r254;
	div.rn.f32 	%f487, %f951, %f486;
	div.rn.f32 	%f975, %f946, %f486;
	div.rn.f32 	%f971, %f950, %f486;
	div.rn.f32 	%f972, %f949, %f486;
	div.rn.f32 	%f973, %f948, %f486;
	div.rn.f32 	%f974, %f947, %f486;
	add.f32 	%f970, %f487, %f487;

BB0_76:
	setp.gt.s32	%p67, %r1, -1;
	selp.f32	%f148, %f975, %f970, %p67;
	ld.global.u32 	%r410, [imageEnabled];
	and.b32  	%r255, %r410, 8;
	setp.eq.s32	%p68, %r255, 0;
	@%p68 bra 	BB0_89;

	cvt.u64.u32	%rd75, %r6;
	cvt.u64.u32	%rd76, %r7;
	mov.u64 	%rd79, image_Mask;
	cvta.global.u64 	%rd74, %rd79;
	// inline asm
	call (%rd73), _rt_buffer_get_64, (%rd74, %r101, %r101, %rd75, %rd76, %rd25, %rd25);
	// inline asm
	mov.f32 	%f490, 0f3E68BA2E;
	cvt.rzi.f32.f32	%f491, %f490;
	fma.rn.f32 	%f492, %f491, 0fC0000000, 0f3EE8BA2E;
	abs.f32 	%f149, %f492;
	abs.f32 	%f150, %f148;
	setp.lt.f32	%p69, %f150, 0f00800000;
	mul.f32 	%f493, %f150, 0f4B800000;
	selp.f32	%f494, 0fC3170000, 0fC2FE0000, %p69;
	selp.f32	%f495, %f493, %f150, %p69;
	mov.b32 	 %r258, %f495;
	and.b32  	%r259, %r258, 8388607;
	or.b32  	%r260, %r259, 1065353216;
	mov.b32 	 %f496, %r260;
	shr.u32 	%r261, %r258, 23;
	cvt.rn.f32.u32	%f497, %r261;
	add.f32 	%f498, %f494, %f497;
	setp.gt.f32	%p70, %f496, 0f3FB504F3;
	mul.f32 	%f499, %f496, 0f3F000000;
	add.f32 	%f500, %f498, 0f3F800000;
	selp.f32	%f501, %f499, %f496, %p70;
	selp.f32	%f502, %f500, %f498, %p70;
	add.f32 	%f503, %f501, 0fBF800000;
	add.f32 	%f489, %f501, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f488,%f489;
	// inline asm
	add.f32 	%f504, %f503, %f503;
	mul.f32 	%f505, %f488, %f504;
	mul.f32 	%f506, %f505, %f505;
	mov.f32 	%f507, 0f3C4CAF63;
	mov.f32 	%f508, 0f3B18F0FE;
	fma.rn.f32 	%f509, %f508, %f506, %f507;
	mov.f32 	%f510, 0f3DAAAABD;
	fma.rn.f32 	%f511, %f509, %f506, %f510;
	mul.rn.f32 	%f512, %f511, %f506;
	mul.rn.f32 	%f513, %f512, %f505;
	sub.f32 	%f514, %f503, %f505;
	neg.f32 	%f515, %f505;
	add.f32 	%f516, %f514, %f514;
	fma.rn.f32 	%f517, %f515, %f503, %f516;
	mul.rn.f32 	%f518, %f488, %f517;
	add.f32 	%f519, %f513, %f505;
	sub.f32 	%f520, %f505, %f519;
	add.f32 	%f521, %f513, %f520;
	add.f32 	%f522, %f518, %f521;
	add.f32 	%f523, %f519, %f522;
	sub.f32 	%f524, %f519, %f523;
	add.f32 	%f525, %f522, %f524;
	mov.f32 	%f526, 0f3F317200;
	mul.rn.f32 	%f527, %f502, %f526;
	mov.f32 	%f528, 0f35BFBE8E;
	mul.rn.f32 	%f529, %f502, %f528;
	add.f32 	%f530, %f527, %f523;
	sub.f32 	%f531, %f527, %f530;
	add.f32 	%f532, %f523, %f531;
	add.f32 	%f533, %f525, %f532;
	add.f32 	%f534, %f529, %f533;
	add.f32 	%f535, %f530, %f534;
	sub.f32 	%f536, %f530, %f535;
	add.f32 	%f537, %f534, %f536;
	mov.f32 	%f538, 0f3EE8BA2E;
	mul.rn.f32 	%f539, %f538, %f535;
	neg.f32 	%f540, %f539;
	fma.rn.f32 	%f541, %f538, %f535, %f540;
	fma.rn.f32 	%f542, %f538, %f537, %f541;
	mov.f32 	%f543, 0f00000000;
	fma.rn.f32 	%f544, %f543, %f535, %f542;
	add.rn.f32 	%f545, %f539, %f544;
	neg.f32 	%f546, %f545;
	add.rn.f32 	%f547, %f539, %f546;
	add.rn.f32 	%f548, %f547, %f544;
	mov.b32 	 %r262, %f545;
	setp.eq.s32	%p71, %r262, 1118925336;
	add.s32 	%r263, %r262, -1;
	mov.b32 	 %f549, %r263;
	add.f32 	%f550, %f548, 0f37000000;
	selp.f32	%f551, %f549, %f545, %p71;
	selp.f32	%f151, %f550, %f548, %p71;
	mul.f32 	%f552, %f551, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f553, %f552;
	mov.f32 	%f554, 0fBF317200;
	fma.rn.f32 	%f555, %f553, %f554, %f551;
	mov.f32 	%f556, 0fB5BFBE8E;
	fma.rn.f32 	%f557, %f553, %f556, %f555;
	mul.f32 	%f558, %f557, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f559, %f558;
	add.f32 	%f560, %f553, 0f00000000;
	ex2.approx.f32 	%f561, %f560;
	mul.f32 	%f562, %f559, %f561;
	setp.lt.f32	%p72, %f551, 0fC2D20000;
	selp.f32	%f563, 0f00000000, %f562, %p72;
	setp.gt.f32	%p73, %f551, 0f42D20000;
	selp.f32	%f976, 0f7F800000, %f563, %p73;
	setp.eq.f32	%p74, %f976, 0f7F800000;
	@%p74 bra 	BB0_79;

	fma.rn.f32 	%f976, %f976, %f151, %f976;

BB0_79:
	setp.lt.f32	%p75, %f148, 0f00000000;
	setp.eq.f32	%p76, %f149, 0f3F800000;
	and.pred  	%p3, %p75, %p76;
	mov.b32 	 %r264, %f976;
	xor.b32  	%r265, %r264, -2147483648;
	mov.b32 	 %f564, %r265;
	selp.f32	%f978, %f564, %f976, %p3;
	setp.eq.f32	%p77, %f148, 0f00000000;
	@%p77 bra 	BB0_82;
	bra.uni 	BB0_80;

BB0_82:
	add.f32 	%f567, %f148, %f148;
	selp.f32	%f978, %f567, 0f00000000, %p76;
	bra.uni 	BB0_83;

BB0_147:
	mov.u64 	%rd220, image_HDR;
	cvta.global.u64 	%rd215, %rd220;
	mov.u32 	%r351, 8;
	// inline asm
	call (%rd214), _rt_buffer_get_64, (%rd215, %r101, %r351, %rd18, %rd19, %rd25, %rd25);
	// inline asm
	mov.f32 	%f880, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs99, %f880;}

	// inline asm
	mov.u16 	%rs100, 0;
	st.v4.u16 	[%rd214], {%rs99, %rs99, %rs99, %rs100};

BB0_148:
	ld.global.u32 	%r352, [additive];
	setp.eq.s32	%p144, %r352, 0;
	@%p144 bra 	BB0_150;

	mov.u64 	%rd233, image_RNM0;
	cvta.global.u64 	%rd222, %rd233;
	mov.u32 	%r356, 8;
	// inline asm
	call (%rd221), _rt_buffer_get_64, (%rd222, %r101, %r356, %rd18, %rd19, %rd25, %rd25);
	// inline asm
	ld.v4.u16 	{%rs107, %rs108, %rs109, %rs110}, [%rd221];
	// inline asm
	{  cvt.f32.f16 %f881, %rs107;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f882, %rs108;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f883, %rs109;}

	// inline asm
	// inline asm
	call (%rd227), _rt_buffer_get_64, (%rd222, %r101, %r356, %rd18, %rd19, %rd25, %rd25);
	// inline asm
	add.f32 	%f884, %f881, 0f00000000;
	add.f32 	%f885, %f882, 0f00000000;
	add.f32 	%f886, %f883, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs106, %f886;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs105, %f885;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs104, %f884;}

	// inline asm
	mov.u16 	%rs111, 0;
	st.v4.u16 	[%rd227], {%rs104, %rs105, %rs106, %rs111};
	bra.uni 	BB0_151;

BB0_150:
	mov.u64 	%rd240, image_RNM0;
	cvta.global.u64 	%rd235, %rd240;
	mov.u32 	%r358, 8;
	// inline asm
	call (%rd234), _rt_buffer_get_64, (%rd235, %r101, %r358, %rd18, %rd19, %rd25, %rd25);
	// inline asm
	mov.f32 	%f887, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs112, %f887;}

	// inline asm
	mov.u16 	%rs113, 0;
	st.v4.u16 	[%rd234], {%rs112, %rs112, %rs112, %rs113};

BB0_151:
	ld.global.u32 	%r359, [additive];
	setp.eq.s32	%p145, %r359, 0;
	@%p145 bra 	BB0_153;

	mov.u64 	%rd253, image_RNM1;
	cvta.global.u64 	%rd242, %rd253;
	mov.u32 	%r363, 8;
	// inline asm
	call (%rd241), _rt_buffer_get_64, (%rd242, %r101, %r363, %rd18, %rd19, %rd25, %rd25);
	// inline asm
	ld.v4.u16 	{%rs120, %rs121, %rs122, %rs123}, [%rd241];
	// inline asm
	{  cvt.f32.f16 %f888, %rs120;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f889, %rs121;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f890, %rs122;}

	// inline asm
	// inline asm
	call (%rd247), _rt_buffer_get_64, (%rd242, %r101, %r363, %rd18, %rd19, %rd25, %rd25);
	// inline asm
	add.f32 	%f891, %f888, 0f00000000;
	add.f32 	%f892, %f889, 0f00000000;
	add.f32 	%f893, %f890, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs119, %f893;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs118, %f892;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs117, %f891;}

	// inline asm
	mov.u16 	%rs124, 0;
	st.v4.u16 	[%rd247], {%rs117, %rs118, %rs119, %rs124};
	bra.uni 	BB0_154;

BB0_153:
	mov.u64 	%rd260, image_RNM1;
	cvta.global.u64 	%rd255, %rd260;
	mov.u32 	%r365, 8;
	// inline asm
	call (%rd254), _rt_buffer_get_64, (%rd255, %r101, %r365, %rd18, %rd19, %rd25, %rd25);
	// inline asm
	mov.f32 	%f894, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs125, %f894;}

	// inline asm
	mov.u16 	%rs126, 0;
	st.v4.u16 	[%rd254], {%rs125, %rs125, %rs125, %rs126};

BB0_154:
	ld.global.u32 	%r366, [additive];
	setp.eq.s32	%p146, %r366, 0;
	@%p146 bra 	BB0_156;

	mov.u64 	%rd273, image_RNM2;
	cvta.global.u64 	%rd262, %rd273;
	mov.u32 	%r370, 8;
	// inline asm
	call (%rd261), _rt_buffer_get_64, (%rd262, %r101, %r370, %rd18, %rd19, %rd25, %rd25);
	// inline asm
	ld.v4.u16 	{%rs133, %rs134, %rs135, %rs136}, [%rd261];
	// inline asm
	{  cvt.f32.f16 %f895, %rs133;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f896, %rs134;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f897, %rs135;}

	// inline asm
	// inline asm
	call (%rd267), _rt_buffer_get_64, (%rd262, %r101, %r370, %rd18, %rd19, %rd25, %rd25);
	// inline asm
	add.f32 	%f898, %f895, 0f00000000;
	add.f32 	%f899, %f896, 0f00000000;
	add.f32 	%f900, %f897, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs132, %f900;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs131, %f899;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs130, %f898;}

	// inline asm
	mov.u16 	%rs137, 0;
	st.v4.u16 	[%rd267], {%rs130, %rs131, %rs132, %rs137};
	bra.uni 	BB0_157;

BB0_156:
	mov.u64 	%rd280, image_RNM2;
	cvta.global.u64 	%rd275, %rd280;
	mov.u32 	%r372, 8;
	// inline asm
	call (%rd274), _rt_buffer_get_64, (%rd275, %r101, %r372, %rd18, %rd19, %rd25, %rd25);
	// inline asm
	mov.f32 	%f901, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs138, %f901;}

	// inline asm
	mov.u16 	%rs139, 0;
	st.v4.u16 	[%rd274], {%rs138, %rs138, %rs138, %rs139};

BB0_157:
	ld.global.u32 	%r373, [additive];
	setp.eq.s32	%p147, %r373, 0;
	@%p147 bra 	BB0_159;

	mov.u64 	%rd293, image_RNM3;
	cvta.global.u64 	%rd282, %rd293;
	mov.u32 	%r377, 8;
	// inline asm
	call (%rd281), _rt_buffer_get_64, (%rd282, %r101, %r377, %rd18, %rd19, %rd25, %rd25);
	// inline asm
	ld.v4.u16 	{%rs146, %rs147, %rs148, %rs149}, [%rd281];
	// inline asm
	{  cvt.f32.f16 %f902, %rs146;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f903, %rs147;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f904, %rs148;}

	// inline asm
	// inline asm
	call (%rd287), _rt_buffer_get_64, (%rd282, %r101, %r377, %rd18, %rd19, %rd25, %rd25);
	// inline asm
	add.f32 	%f905, %f902, 0f00000000;
	add.f32 	%f906, %f903, 0f00000000;
	add.f32 	%f907, %f904, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs145, %f907;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs144, %f906;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs143, %f905;}

	// inline asm
	mov.u16 	%rs150, 0;
	st.v4.u16 	[%rd287], {%rs143, %rs144, %rs145, %rs150};
	bra.uni 	BB0_160;

BB0_159:
	mov.u64 	%rd300, image_RNM3;
	cvta.global.u64 	%rd295, %rd300;
	mov.u32 	%r379, 8;
	// inline asm
	call (%rd294), _rt_buffer_get_64, (%rd295, %r101, %r379, %rd18, %rd19, %rd25, %rd25);
	// inline asm
	mov.f32 	%f908, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs151, %f908;}

	// inline asm
	mov.u16 	%rs152, 0;
	st.v4.u16 	[%rd294], {%rs151, %rs151, %rs151, %rs152};
	bra.uni 	BB0_160;

BB0_80:
	setp.geu.f32	%p78, %f148, 0f00000000;
	@%p78 bra 	BB0_83;

	cvt.rzi.f32.f32	%f566, %f538;
	setp.neu.f32	%p79, %f566, 0f3EE8BA2E;
	selp.f32	%f978, 0f7FFFFFFF, %f978, %p79;

BB0_83:
	add.f32 	%f568, %f150, 0f3EE8BA2E;
	mov.b32 	 %r266, %f568;
	setp.lt.s32	%p81, %r266, 2139095040;
	@%p81 bra 	BB0_88;

	setp.gtu.f32	%p82, %f150, 0f7F800000;
	@%p82 bra 	BB0_87;
	bra.uni 	BB0_85;

BB0_87:
	add.f32 	%f978, %f148, 0f3EE8BA2E;
	bra.uni 	BB0_88;

BB0_85:
	setp.neu.f32	%p83, %f150, 0f7F800000;
	@%p83 bra 	BB0_88;

	selp.f32	%f978, 0fFF800000, 0f7F800000, %p3;

BB0_88:
	mul.f32 	%f569, %f978, 0f437F0000;
	setp.eq.f32	%p84, %f148, 0f3F800000;
	selp.f32	%f570, 0f437F0000, %f569, %p84;
	cvt.rzi.u32.f32	%r267, %f570;
	cvt.u16.u32	%rs15, %r267;
	mov.u16 	%rs16, 255;
	st.v2.u8 	[%rd73], {%rs15, %rs16};
	ld.global.u32 	%r410, [imageEnabled];

BB0_89:
	ld.global.f32 	%f571, [lightColor];
	mul.f32 	%f162, %f970, %f571;
	ld.global.f32 	%f572, [lightColor+4];
	mul.f32 	%f163, %f970, %f572;
	ld.global.f32 	%f573, [lightColor+8];
	mul.f32 	%f164, %f970, %f573;
	and.b32  	%r268, %r410, 1;
	setp.eq.b32	%p85, %r268, 1;
	@!%p85 bra 	BB0_124;
	bra.uni 	BB0_90;

BB0_90:
	mov.f32 	%f576, 0f3E666666;
	cvt.rzi.f32.f32	%f577, %f576;
	fma.rn.f32 	%f578, %f577, 0fC0000000, 0f3EE66666;
	abs.f32 	%f165, %f578;
	abs.f32 	%f166, %f162;
	setp.lt.f32	%p86, %f166, 0f00800000;
	mul.f32 	%f579, %f166, 0f4B800000;
	selp.f32	%f580, 0fC3170000, 0fC2FE0000, %p86;
	selp.f32	%f581, %f579, %f166, %p86;
	mov.b32 	 %r269, %f581;
	and.b32  	%r270, %r269, 8388607;
	or.b32  	%r271, %r270, 1065353216;
	mov.b32 	 %f582, %r271;
	shr.u32 	%r272, %r269, 23;
	cvt.rn.f32.u32	%f583, %r272;
	add.f32 	%f584, %f580, %f583;
	setp.gt.f32	%p87, %f582, 0f3FB504F3;
	mul.f32 	%f585, %f582, 0f3F000000;
	add.f32 	%f586, %f584, 0f3F800000;
	selp.f32	%f587, %f585, %f582, %p87;
	selp.f32	%f588, %f586, %f584, %p87;
	add.f32 	%f589, %f587, 0fBF800000;
	add.f32 	%f575, %f587, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f574,%f575;
	// inline asm
	add.f32 	%f590, %f589, %f589;
	mul.f32 	%f591, %f574, %f590;
	mul.f32 	%f592, %f591, %f591;
	mov.f32 	%f593, 0f3C4CAF63;
	mov.f32 	%f594, 0f3B18F0FE;
	fma.rn.f32 	%f595, %f594, %f592, %f593;
	mov.f32 	%f596, 0f3DAAAABD;
	fma.rn.f32 	%f597, %f595, %f592, %f596;
	mul.rn.f32 	%f598, %f597, %f592;
	mul.rn.f32 	%f599, %f598, %f591;
	sub.f32 	%f600, %f589, %f591;
	neg.f32 	%f601, %f591;
	add.f32 	%f602, %f600, %f600;
	fma.rn.f32 	%f603, %f601, %f589, %f602;
	mul.rn.f32 	%f604, %f574, %f603;
	add.f32 	%f605, %f599, %f591;
	sub.f32 	%f606, %f591, %f605;
	add.f32 	%f607, %f599, %f606;
	add.f32 	%f608, %f604, %f607;
	add.f32 	%f609, %f605, %f608;
	sub.f32 	%f610, %f605, %f609;
	add.f32 	%f611, %f608, %f610;
	mov.f32 	%f612, 0f3F317200;
	mul.rn.f32 	%f613, %f588, %f612;
	mov.f32 	%f614, 0f35BFBE8E;
	mul.rn.f32 	%f615, %f588, %f614;
	add.f32 	%f616, %f613, %f609;
	sub.f32 	%f617, %f613, %f616;
	add.f32 	%f618, %f609, %f617;
	add.f32 	%f619, %f611, %f618;
	add.f32 	%f620, %f615, %f619;
	add.f32 	%f621, %f616, %f620;
	sub.f32 	%f622, %f616, %f621;
	add.f32 	%f623, %f620, %f622;
	mov.f32 	%f624, 0f3EE66666;
	mul.rn.f32 	%f625, %f624, %f621;
	neg.f32 	%f626, %f625;
	fma.rn.f32 	%f627, %f624, %f621, %f626;
	fma.rn.f32 	%f628, %f624, %f623, %f627;
	mov.f32 	%f629, 0f00000000;
	fma.rn.f32 	%f630, %f629, %f621, %f628;
	add.rn.f32 	%f631, %f625, %f630;
	neg.f32 	%f632, %f631;
	add.rn.f32 	%f633, %f625, %f632;
	add.rn.f32 	%f634, %f633, %f630;
	mov.b32 	 %r273, %f631;
	setp.eq.s32	%p88, %r273, 1118925336;
	add.s32 	%r274, %r273, -1;
	mov.b32 	 %f635, %r274;
	add.f32 	%f636, %f634, 0f37000000;
	selp.f32	%f637, %f635, %f631, %p88;
	selp.f32	%f167, %f636, %f634, %p88;
	mul.f32 	%f638, %f637, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f639, %f638;
	mov.f32 	%f640, 0fBF317200;
	fma.rn.f32 	%f641, %f639, %f640, %f637;
	mov.f32 	%f642, 0fB5BFBE8E;
	fma.rn.f32 	%f643, %f639, %f642, %f641;
	mul.f32 	%f644, %f643, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f645, %f644;
	add.f32 	%f646, %f639, 0f00000000;
	ex2.approx.f32 	%f647, %f646;
	mul.f32 	%f648, %f645, %f647;
	setp.lt.f32	%p89, %f637, 0fC2D20000;
	selp.f32	%f649, 0f00000000, %f648, %p89;
	setp.gt.f32	%p90, %f637, 0f42D20000;
	selp.f32	%f979, 0f7F800000, %f649, %p90;
	setp.eq.f32	%p91, %f979, 0f7F800000;
	@%p91 bra 	BB0_92;

	fma.rn.f32 	%f979, %f979, %f167, %f979;

BB0_92:
	setp.lt.f32	%p92, %f162, 0f00000000;
	setp.eq.f32	%p93, %f165, 0f3F800000;
	and.pred  	%p4, %p92, %p93;
	mov.b32 	 %r275, %f979;
	xor.b32  	%r276, %r275, -2147483648;
	mov.b32 	 %f650, %r276;
	selp.f32	%f981, %f650, %f979, %p4;
	setp.eq.f32	%p94, %f162, 0f00000000;
	@%p94 bra 	BB0_95;
	bra.uni 	BB0_93;

BB0_95:
	add.f32 	%f653, %f162, %f162;
	selp.f32	%f981, %f653, 0f00000000, %p93;
	bra.uni 	BB0_96;

BB0_93:
	setp.geu.f32	%p95, %f162, 0f00000000;
	@%p95 bra 	BB0_96;

	cvt.rzi.f32.f32	%f652, %f624;
	setp.neu.f32	%p96, %f652, 0f3EE66666;
	selp.f32	%f981, 0f7FFFFFFF, %f981, %p96;

BB0_96:
	add.f32 	%f654, %f166, 0f3EE66666;
	mov.b32 	 %r277, %f654;
	setp.lt.s32	%p98, %r277, 2139095040;
	@%p98 bra 	BB0_101;

	setp.gtu.f32	%p99, %f166, 0f7F800000;
	@%p99 bra 	BB0_100;
	bra.uni 	BB0_98;

BB0_100:
	add.f32 	%f981, %f162, 0f3EE66666;
	bra.uni 	BB0_101;

BB0_98:
	setp.neu.f32	%p100, %f166, 0f7F800000;
	@%p100 bra 	BB0_101;

	selp.f32	%f981, 0fFF800000, 0f7F800000, %p4;

BB0_101:
	setp.eq.f32	%p101, %f162, 0f3F800000;
	selp.f32	%f178, 0f3F800000, %f981, %p101;
	abs.f32 	%f179, %f163;
	setp.lt.f32	%p102, %f179, 0f00800000;
	mul.f32 	%f657, %f179, 0f4B800000;
	selp.f32	%f658, 0fC3170000, 0fC2FE0000, %p102;
	selp.f32	%f659, %f657, %f179, %p102;
	mov.b32 	 %r278, %f659;
	and.b32  	%r279, %r278, 8388607;
	or.b32  	%r280, %r279, 1065353216;
	mov.b32 	 %f660, %r280;
	shr.u32 	%r281, %r278, 23;
	cvt.rn.f32.u32	%f661, %r281;
	add.f32 	%f662, %f658, %f661;
	setp.gt.f32	%p103, %f660, 0f3FB504F3;
	mul.f32 	%f663, %f660, 0f3F000000;
	add.f32 	%f664, %f662, 0f3F800000;
	selp.f32	%f665, %f663, %f660, %p103;
	selp.f32	%f666, %f664, %f662, %p103;
	add.f32 	%f667, %f665, 0fBF800000;
	add.f32 	%f656, %f665, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f655,%f656;
	// inline asm
	add.f32 	%f668, %f667, %f667;
	mul.f32 	%f669, %f655, %f668;
	mul.f32 	%f670, %f669, %f669;
	fma.rn.f32 	%f673, %f594, %f670, %f593;
	fma.rn.f32 	%f675, %f673, %f670, %f596;
	mul.rn.f32 	%f676, %f675, %f670;
	mul.rn.f32 	%f677, %f676, %f669;
	sub.f32 	%f678, %f667, %f669;
	neg.f32 	%f679, %f669;
	add.f32 	%f680, %f678, %f678;
	fma.rn.f32 	%f681, %f679, %f667, %f680;
	mul.rn.f32 	%f682, %f655, %f681;
	add.f32 	%f683, %f677, %f669;
	sub.f32 	%f684, %f669, %f683;
	add.f32 	%f685, %f677, %f684;
	add.f32 	%f686, %f682, %f685;
	add.f32 	%f687, %f683, %f686;
	sub.f32 	%f688, %f683, %f687;
	add.f32 	%f689, %f686, %f688;
	mul.rn.f32 	%f691, %f666, %f612;
	mul.rn.f32 	%f693, %f666, %f614;
	add.f32 	%f694, %f691, %f687;
	sub.f32 	%f695, %f691, %f694;
	add.f32 	%f696, %f687, %f695;
	add.f32 	%f697, %f689, %f696;
	add.f32 	%f698, %f693, %f697;
	add.f32 	%f699, %f694, %f698;
	sub.f32 	%f700, %f694, %f699;
	add.f32 	%f701, %f698, %f700;
	mul.rn.f32 	%f703, %f624, %f699;
	neg.f32 	%f704, %f703;
	fma.rn.f32 	%f705, %f624, %f699, %f704;
	fma.rn.f32 	%f706, %f624, %f701, %f705;
	fma.rn.f32 	%f708, %f629, %f699, %f706;
	add.rn.f32 	%f709, %f703, %f708;
	neg.f32 	%f710, %f709;
	add.rn.f32 	%f711, %f703, %f710;
	add.rn.f32 	%f712, %f711, %f708;
	mov.b32 	 %r282, %f709;
	setp.eq.s32	%p104, %r282, 1118925336;
	add.s32 	%r283, %r282, -1;
	mov.b32 	 %f713, %r283;
	add.f32 	%f714, %f712, 0f37000000;
	selp.f32	%f715, %f713, %f709, %p104;
	selp.f32	%f180, %f714, %f712, %p104;
	mul.f32 	%f716, %f715, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f717, %f716;
	fma.rn.f32 	%f719, %f717, %f640, %f715;
	fma.rn.f32 	%f721, %f717, %f642, %f719;
	mul.f32 	%f722, %f721, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f723, %f722;
	add.f32 	%f724, %f717, 0f00000000;
	ex2.approx.f32 	%f725, %f724;
	mul.f32 	%f726, %f723, %f725;
	setp.lt.f32	%p105, %f715, 0fC2D20000;
	selp.f32	%f727, 0f00000000, %f726, %p105;
	setp.gt.f32	%p106, %f715, 0f42D20000;
	selp.f32	%f982, 0f7F800000, %f727, %p106;
	setp.eq.f32	%p107, %f982, 0f7F800000;
	@%p107 bra 	BB0_103;

	fma.rn.f32 	%f982, %f982, %f180, %f982;

BB0_103:
	setp.lt.f32	%p108, %f163, 0f00000000;
	and.pred  	%p5, %p108, %p93;
	mov.b32 	 %r284, %f982;
	xor.b32  	%r285, %r284, -2147483648;
	mov.b32 	 %f728, %r285;
	selp.f32	%f984, %f728, %f982, %p5;
	setp.eq.f32	%p110, %f163, 0f00000000;
	@%p110 bra 	BB0_106;
	bra.uni 	BB0_104;

BB0_106:
	add.f32 	%f731, %f163, %f163;
	selp.f32	%f984, %f731, 0f00000000, %p93;
	bra.uni 	BB0_107;

BB0_104:
	setp.geu.f32	%p111, %f163, 0f00000000;
	@%p111 bra 	BB0_107;

	cvt.rzi.f32.f32	%f730, %f624;
	setp.neu.f32	%p112, %f730, 0f3EE66666;
	selp.f32	%f984, 0f7FFFFFFF, %f984, %p112;

BB0_107:
	add.f32 	%f732, %f179, 0f3EE66666;
	mov.b32 	 %r286, %f732;
	setp.lt.s32	%p114, %r286, 2139095040;
	@%p114 bra 	BB0_112;

	setp.gtu.f32	%p115, %f179, 0f7F800000;
	@%p115 bra 	BB0_111;
	bra.uni 	BB0_109;

BB0_111:
	add.f32 	%f984, %f163, 0f3EE66666;
	bra.uni 	BB0_112;

BB0_109:
	setp.neu.f32	%p116, %f179, 0f7F800000;
	@%p116 bra 	BB0_112;

	selp.f32	%f984, 0fFF800000, 0f7F800000, %p5;

BB0_112:
	setp.eq.f32	%p117, %f163, 0f3F800000;
	selp.f32	%f191, 0f3F800000, %f984, %p117;
	abs.f32 	%f192, %f164;
	setp.lt.f32	%p118, %f192, 0f00800000;
	mul.f32 	%f735, %f192, 0f4B800000;
	selp.f32	%f736, 0fC3170000, 0fC2FE0000, %p118;
	selp.f32	%f737, %f735, %f192, %p118;
	mov.b32 	 %r287, %f737;
	and.b32  	%r288, %r287, 8388607;
	or.b32  	%r289, %r288, 1065353216;
	mov.b32 	 %f738, %r289;
	shr.u32 	%r290, %r287, 23;
	cvt.rn.f32.u32	%f739, %r290;
	add.f32 	%f740, %f736, %f739;
	setp.gt.f32	%p119, %f738, 0f3FB504F3;
	mul.f32 	%f741, %f738, 0f3F000000;
	add.f32 	%f742, %f740, 0f3F800000;
	selp.f32	%f743, %f741, %f738, %p119;
	selp.f32	%f744, %f742, %f740, %p119;
	add.f32 	%f745, %f743, 0fBF800000;
	add.f32 	%f734, %f743, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f733,%f734;
	// inline asm
	add.f32 	%f746, %f745, %f745;
	mul.f32 	%f747, %f733, %f746;
	mul.f32 	%f748, %f747, %f747;
	fma.rn.f32 	%f751, %f594, %f748, %f593;
	fma.rn.f32 	%f753, %f751, %f748, %f596;
	mul.rn.f32 	%f754, %f753, %f748;
	mul.rn.f32 	%f755, %f754, %f747;
	sub.f32 	%f756, %f745, %f747;
	neg.f32 	%f757, %f747;
	add.f32 	%f758, %f756, %f756;
	fma.rn.f32 	%f759, %f757, %f745, %f758;
	mul.rn.f32 	%f760, %f733, %f759;
	add.f32 	%f761, %f755, %f747;
	sub.f32 	%f762, %f747, %f761;
	add.f32 	%f763, %f755, %f762;
	add.f32 	%f764, %f760, %f763;
	add.f32 	%f765, %f761, %f764;
	sub.f32 	%f766, %f761, %f765;
	add.f32 	%f767, %f764, %f766;
	mul.rn.f32 	%f769, %f744, %f612;
	mul.rn.f32 	%f771, %f744, %f614;
	add.f32 	%f772, %f769, %f765;
	sub.f32 	%f773, %f769, %f772;
	add.f32 	%f774, %f765, %f773;
	add.f32 	%f775, %f767, %f774;
	add.f32 	%f776, %f771, %f775;
	add.f32 	%f777, %f772, %f776;
	sub.f32 	%f778, %f772, %f777;
	add.f32 	%f779, %f776, %f778;
	mul.rn.f32 	%f781, %f624, %f777;
	neg.f32 	%f782, %f781;
	fma.rn.f32 	%f783, %f624, %f777, %f782;
	fma.rn.f32 	%f784, %f624, %f779, %f783;
	fma.rn.f32 	%f786, %f629, %f777, %f784;
	add.rn.f32 	%f787, %f781, %f786;
	neg.f32 	%f788, %f787;
	add.rn.f32 	%f789, %f781, %f788;
	add.rn.f32 	%f790, %f789, %f786;
	mov.b32 	 %r291, %f787;
	setp.eq.s32	%p120, %r291, 1118925336;
	add.s32 	%r292, %r291, -1;
	mov.b32 	 %f791, %r292;
	add.f32 	%f792, %f790, 0f37000000;
	selp.f32	%f793, %f791, %f787, %p120;
	selp.f32	%f193, %f792, %f790, %p120;
	mul.f32 	%f794, %f793, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f795, %f794;
	fma.rn.f32 	%f797, %f795, %f640, %f793;
	fma.rn.f32 	%f799, %f795, %f642, %f797;
	mul.f32 	%f800, %f799, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f801, %f800;
	add.f32 	%f802, %f795, 0f00000000;
	ex2.approx.f32 	%f803, %f802;
	mul.f32 	%f804, %f801, %f803;
	setp.lt.f32	%p121, %f793, 0fC2D20000;
	selp.f32	%f805, 0f00000000, %f804, %p121;
	setp.gt.f32	%p122, %f793, 0f42D20000;
	selp.f32	%f985, 0f7F800000, %f805, %p122;
	setp.eq.f32	%p123, %f985, 0f7F800000;
	@%p123 bra 	BB0_114;

	fma.rn.f32 	%f985, %f985, %f193, %f985;

BB0_114:
	setp.lt.f32	%p124, %f164, 0f00000000;
	and.pred  	%p6, %p124, %p93;
	mov.b32 	 %r293, %f985;
	xor.b32  	%r294, %r293, -2147483648;
	mov.b32 	 %f806, %r294;
	selp.f32	%f987, %f806, %f985, %p6;
	setp.eq.f32	%p126, %f164, 0f00000000;
	@%p126 bra 	BB0_117;
	bra.uni 	BB0_115;

BB0_117:
	add.f32 	%f809, %f164, %f164;
	selp.f32	%f987, %f809, 0f00000000, %p93;
	bra.uni 	BB0_118;

BB0_115:
	setp.geu.f32	%p127, %f164, 0f00000000;
	@%p127 bra 	BB0_118;

	cvt.rzi.f32.f32	%f808, %f624;
	setp.neu.f32	%p128, %f808, 0f3EE66666;
	selp.f32	%f987, 0f7FFFFFFF, %f987, %p128;

BB0_118:
	add.f32 	%f810, %f192, 0f3EE66666;
	mov.b32 	 %r295, %f810;
	setp.lt.s32	%p130, %r295, 2139095040;
	@%p130 bra 	BB0_123;

	setp.gtu.f32	%p131, %f192, 0f7F800000;
	@%p131 bra 	BB0_122;
	bra.uni 	BB0_120;

BB0_122:
	add.f32 	%f987, %f164, 0f3EE66666;
	bra.uni 	BB0_123;

BB0_120:
	setp.neu.f32	%p132, %f192, 0f7F800000;
	@%p132 bra 	BB0_123;

	selp.f32	%f987, 0fFF800000, 0f7F800000, %p6;

BB0_123:
	setp.eq.f32	%p133, %f164, 0f3F800000;
	selp.f32	%f811, 0f3F800000, %f987, %p133;
	cvt.u64.u32	%rd83, %r7;
	cvt.u64.u32	%rd82, %r6;
	mov.u64 	%rd86, image;
	cvta.global.u64 	%rd81, %rd86;
	// inline asm
	call (%rd80), _rt_buffer_get_64, (%rd81, %r101, %r102, %rd82, %rd83, %rd25, %rd25);
	// inline asm
	cvt.sat.f32.f32	%f812, %f811;
	mul.f32 	%f813, %f812, 0f437FFD71;
	cvt.rzi.u32.f32	%r298, %f813;
	cvt.sat.f32.f32	%f814, %f191;
	mul.f32 	%f815, %f814, 0f437FFD71;
	cvt.rzi.u32.f32	%r299, %f815;
	cvt.sat.f32.f32	%f816, %f178;
	mul.f32 	%f817, %f816, 0f437FFD71;
	cvt.rzi.u32.f32	%r300, %f817;
	cvt.u16.u32	%rs17, %r298;
	cvt.u16.u32	%rs18, %r300;
	cvt.u16.u32	%rs19, %r299;
	mov.u16 	%rs20, 255;
	st.v4.u8 	[%rd80], {%rs17, %rs19, %rs18, %rs20};
	ld.global.u32 	%r410, [imageEnabled];

BB0_124:
	cvt.u64.u32	%rd16, %r6;
	cvt.u64.u32	%rd17, %r7;
	and.b32  	%r301, %r410, 4;
	setp.eq.s32	%p134, %r301, 0;
	@%p134 bra 	BB0_128;

	ld.global.u32 	%r302, [additive];
	setp.eq.s32	%p135, %r302, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs21, %f392;}

	// inline asm
	@%p135 bra 	BB0_127;

	mov.u64 	%rd99, image_HDR;
	cvta.global.u64 	%rd88, %rd99;
	mov.u32 	%r306, 8;
	// inline asm
	call (%rd87), _rt_buffer_get_64, (%rd88, %r101, %r306, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	ld.v4.u16 	{%rs28, %rs29, %rs30, %rs31}, [%rd87];
	// inline asm
	{  cvt.f32.f16 %f819, %rs28;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f820, %rs29;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f821, %rs30;}

	// inline asm
	// inline asm
	call (%rd93), _rt_buffer_get_64, (%rd88, %r101, %r306, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	add.f32 	%f822, %f162, %f819;
	add.f32 	%f823, %f163, %f820;
	add.f32 	%f824, %f164, %f821;
	// inline asm
	{  cvt.rn.f16.f32 %rs27, %f824;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs26, %f823;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs25, %f822;}

	// inline asm
	st.v4.u16 	[%rd93], {%rs25, %rs26, %rs27, %rs21};
	bra.uni 	BB0_128;

BB0_127:
	mov.u64 	%rd106, image_HDR;
	cvta.global.u64 	%rd101, %rd106;
	mov.u32 	%r308, 8;
	// inline asm
	call (%rd100), _rt_buffer_get_64, (%rd101, %r101, %r308, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs34, %f164;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs33, %f163;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs32, %f162;}

	// inline asm
	st.v4.u16 	[%rd100], {%rs32, %rs33, %rs34, %rs21};

BB0_128:
	selp.f32	%f829, 0f3F800000, 0f3E800000, %p148;
	mul.f32 	%f204, %f829, %f971;
	mul.f32 	%f205, %f829, %f972;
	mul.f32 	%f206, %f829, %f973;
	mul.f32 	%f207, %f829, %f974;
	ld.global.f32 	%f830, [lightColor];
	mul.f32 	%f208, %f204, %f830;
	ld.global.f32 	%f831, [lightColor+4];
	mul.f32 	%f209, %f204, %f831;
	ld.global.f32 	%f832, [lightColor+8];
	mul.f32 	%f210, %f204, %f832;
	ld.global.u32 	%r309, [additive];
	setp.eq.s32	%p136, %r309, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs35, %f392;}

	// inline asm
	@%p136 bra 	BB0_130;

	mov.u64 	%rd119, image_RNM0;
	cvta.global.u64 	%rd108, %rd119;
	mov.u32 	%r313, 8;
	// inline asm
	call (%rd107), _rt_buffer_get_64, (%rd108, %r101, %r313, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	ld.v4.u16 	{%rs42, %rs43, %rs44, %rs45}, [%rd107];
	// inline asm
	{  cvt.f32.f16 %f833, %rs42;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f834, %rs43;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f835, %rs44;}

	// inline asm
	// inline asm
	call (%rd113), _rt_buffer_get_64, (%rd108, %r101, %r313, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	add.f32 	%f836, %f208, %f833;
	add.f32 	%f837, %f209, %f834;
	add.f32 	%f838, %f210, %f835;
	// inline asm
	{  cvt.rn.f16.f32 %rs41, %f838;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs40, %f837;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs39, %f836;}

	// inline asm
	st.v4.u16 	[%rd113], {%rs39, %rs40, %rs41, %rs35};
	bra.uni 	BB0_131;

BB0_130:
	mov.u64 	%rd126, image_RNM0;
	cvta.global.u64 	%rd121, %rd126;
	mov.u32 	%r315, 8;
	// inline asm
	call (%rd120), _rt_buffer_get_64, (%rd121, %r101, %r315, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs48, %f210;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs47, %f209;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs46, %f208;}

	// inline asm
	st.v4.u16 	[%rd120], {%rs46, %rs47, %rs48, %rs35};

BB0_131:
	mov.f32 	%f843, 0f34000000;
	max.f32 	%f844, %f204, %f843;
	div.rn.f32 	%f845, %f205, %f844;
	fma.rn.f32 	%f211, %f845, 0f3F000000, 0f3F000000;
	div.rn.f32 	%f846, %f206, %f844;
	fma.rn.f32 	%f212, %f846, 0f3F000000, 0f3F000000;
	div.rn.f32 	%f847, %f207, %f844;
	fma.rn.f32 	%f213, %f847, 0f3F000000, 0f3F000000;
	ld.global.u32 	%r316, [additive];
	setp.eq.s32	%p137, %r316, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs49, %f392;}

	// inline asm
	@%p137 bra 	BB0_133;

	mov.u64 	%rd139, image_RNM1;
	cvta.global.u64 	%rd128, %rd139;
	mov.u32 	%r320, 8;
	// inline asm
	call (%rd127), _rt_buffer_get_64, (%rd128, %r101, %r320, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	ld.v4.u16 	{%rs56, %rs57, %rs58, %rs59}, [%rd127];
	// inline asm
	{  cvt.f32.f16 %f848, %rs56;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f849, %rs57;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f850, %rs58;}

	// inline asm
	// inline asm
	call (%rd133), _rt_buffer_get_64, (%rd128, %r101, %r320, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	add.f32 	%f851, %f211, %f848;
	add.f32 	%f852, %f211, %f849;
	add.f32 	%f853, %f211, %f850;
	// inline asm
	{  cvt.rn.f16.f32 %rs55, %f853;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs54, %f852;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs53, %f851;}

	// inline asm
	st.v4.u16 	[%rd133], {%rs53, %rs54, %rs55, %rs49};
	bra.uni 	BB0_134;

BB0_133:
	mov.u64 	%rd146, image_RNM1;
	cvta.global.u64 	%rd141, %rd146;
	mov.u32 	%r322, 8;
	// inline asm
	call (%rd140), _rt_buffer_get_64, (%rd141, %r101, %r322, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs60, %f211;}

	// inline asm
	st.v4.u16 	[%rd140], {%rs60, %rs60, %rs60, %rs49};

BB0_134:
	ld.global.u32 	%r323, [additive];
	setp.eq.s32	%p138, %r323, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs61, %f392;}

	// inline asm
	@%p138 bra 	BB0_136;

	mov.u64 	%rd159, image_RNM2;
	cvta.global.u64 	%rd148, %rd159;
	mov.u32 	%r327, 8;
	// inline asm
	call (%rd147), _rt_buffer_get_64, (%rd148, %r101, %r327, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	ld.v4.u16 	{%rs68, %rs69, %rs70, %rs71}, [%rd147];
	// inline asm
	{  cvt.f32.f16 %f856, %rs68;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f857, %rs69;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f858, %rs70;}

	// inline asm
	// inline asm
	call (%rd153), _rt_buffer_get_64, (%rd148, %r101, %r327, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	add.f32 	%f859, %f212, %f856;
	add.f32 	%f860, %f212, %f857;
	add.f32 	%f861, %f212, %f858;
	// inline asm
	{  cvt.rn.f16.f32 %rs67, %f861;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs66, %f860;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs65, %f859;}

	// inline asm
	st.v4.u16 	[%rd153], {%rs65, %rs66, %rs67, %rs61};
	bra.uni 	BB0_137;

BB0_136:
	mov.u64 	%rd166, image_RNM2;
	cvta.global.u64 	%rd161, %rd166;
	mov.u32 	%r329, 8;
	// inline asm
	call (%rd160), _rt_buffer_get_64, (%rd161, %r101, %r329, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs72, %f212;}

	// inline asm
	st.v4.u16 	[%rd160], {%rs72, %rs72, %rs72, %rs61};

BB0_137:
	ld.global.u32 	%r330, [additive];
	setp.eq.s32	%p139, %r330, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs73, %f392;}

	// inline asm
	@%p139 bra 	BB0_139;

	mov.u64 	%rd179, image_RNM3;
	cvta.global.u64 	%rd168, %rd179;
	mov.u32 	%r334, 8;
	// inline asm
	call (%rd167), _rt_buffer_get_64, (%rd168, %r101, %r334, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	ld.v4.u16 	{%rs80, %rs81, %rs82, %rs83}, [%rd167];
	// inline asm
	{  cvt.f32.f16 %f864, %rs80;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f865, %rs81;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f866, %rs82;}

	// inline asm
	// inline asm
	call (%rd173), _rt_buffer_get_64, (%rd168, %r101, %r334, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	add.f32 	%f867, %f213, %f864;
	add.f32 	%f868, %f213, %f865;
	add.f32 	%f869, %f213, %f866;
	// inline asm
	{  cvt.rn.f16.f32 %rs79, %f869;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs78, %f868;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs77, %f867;}

	// inline asm
	st.v4.u16 	[%rd173], {%rs77, %rs78, %rs79, %rs73};
	bra.uni 	BB0_160;

BB0_139:
	mov.u64 	%rd186, image_RNM3;
	cvta.global.u64 	%rd181, %rd186;
	mov.u32 	%r336, 8;
	// inline asm
	call (%rd180), _rt_buffer_get_64, (%rd181, %r101, %r336, %rd16, %rd17, %rd25, %rd25);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs84, %f213;}

	// inline asm
	st.v4.u16 	[%rd180], {%rs84, %rs84, %rs84, %rs73};

BB0_160:
	ret;
}


