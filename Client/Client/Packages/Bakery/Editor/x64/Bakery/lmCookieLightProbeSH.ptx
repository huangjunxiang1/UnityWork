//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-23083092
// Cuda compilation tools, release 9.1, V9.1.85
// Based on LLVM 3.4svn
//

.version 6.1
.target sm_30
.address_size 64

	// .globl	_Z6oxMainv
.global .align 8 .b8 pixelID[8];
.global .align 8 .b8 resolution[8];
.global .align 4 .b8 normal[12];
.global .align 4 .b8 camPos[12];
.global .align 4 .b8 root[4];
.global .align 4 .u32 imageEnabled;
.global .texref lightmap;
.global .align 16 .b8 tileInfo[16];
.global .align 4 .u32 additive;
.global .align 1 .b8 image[1];
.global .align 1 .b8 image_HDR[1];
.global .align 1 .b8 image_HDR2[1];
.global .align 1 .b8 image_Mask[1];
.global .align 1 .b8 image_RNM0[1];
.global .align 1 .b8 image_RNM1[1];
.global .align 1 .b8 image_RNM2[1];
.global .align 1 .b8 image_RNM3[1];
.global .align 1 .b8 uvpos[1];
.global .align 1 .b8 uvnormal[1];
.global .align 4 .u32 samples;
.global .align 4 .f32 lightInvCutoff;
.global .align 4 .f32 lightRadius;
.global .align 4 .b8 lightPos[12];
.global .align 4 .b8 lightColor[12];
.global .align 4 .u32 ignoreNormal;
.global .align 4 .u32 lightCookie;
.global .align 4 .b8 lightMatrix[36];
.global .align 4 .f32 lightFOV;
.global .align 4 .f32 lightFalloffFakeDistanceMult;
.global .align 4 .f32 lightFalloffMinRadiusSq;
.global .align 4 .b8 _ZN21rti_internal_typeinfo7pixelIDE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10resolutionE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6camPosE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo4rootE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12imageEnabledE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8tileInfoE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8additiveE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo7samplesE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14lightInvCutoffE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11lightRadiusE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8lightPosE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10lightColorE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12ignoreNormalE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11lightCookieE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11lightMatrixE[8] = {82, 97, 121, 0, 36, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8lightFOVE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo28lightFalloffFakeDistanceMultE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo23lightFalloffMinRadiusSqE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 8 .b8 _ZN21rti_internal_typename7pixelIDE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename10resolutionE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6camPosE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 16 .b8 _ZN21rti_internal_typename4rootE[9] = {114, 116, 79, 98, 106, 101, 99, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename12imageEnabledE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8tileInfoE[6] = {117, 105, 110, 116, 52, 0};
.global .align 4 .b8 _ZN21rti_internal_typename8additiveE[4] = {105, 110, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename7samplesE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename14lightInvCutoffE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename11lightRadiusE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8lightPosE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename10lightColorE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 4 .b8 _ZN21rti_internal_typename12ignoreNormalE[4] = {105, 110, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename11lightCookieE[4] = {105, 110, 116, 0};
.global .align 16 .b8 _ZN21rti_internal_typename11lightMatrixE[10] = {77, 97, 116, 114, 105, 120, 51, 120, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8lightFOVE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename28lightFalloffFakeDistanceMultE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename23lightFalloffMinRadiusSqE[6] = {102, 108, 111, 97, 116, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum7pixelIDE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10resolutionE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6camPosE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum4rootE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12imageEnabledE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8tileInfoE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8additiveE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum7samplesE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14lightInvCutoffE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11lightRadiusE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8lightPosE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10lightColorE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12ignoreNormalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11lightCookieE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11lightMatrixE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8lightFOVE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum28lightFalloffFakeDistanceMultE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum23lightFalloffMinRadiusSqE = 4919;
.global .align 16 .b8 _ZN21rti_internal_semantic7pixelIDE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic10resolutionE[12] = {114, 116, 76, 97, 117, 110, 99, 104, 68, 105, 109, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic6normalE[17] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic6camPosE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic4rootE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12imageEnabledE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8tileInfoE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8additiveE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic7samplesE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic14lightInvCutoffE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11lightRadiusE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8lightPosE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic10lightColorE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12ignoreNormalE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11lightCookieE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11lightMatrixE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8lightFOVE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic28lightFalloffFakeDistanceMultE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic23lightFalloffMinRadiusSqE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7pixelIDE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10resolutionE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6camPosE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation4rootE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12imageEnabledE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8tileInfoE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8additiveE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7samplesE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14lightInvCutoffE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11lightRadiusE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8lightPosE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10lightColorE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12ignoreNormalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11lightCookieE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11lightMatrixE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8lightFOVE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation28lightFalloffFakeDistanceMultE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation23lightFalloffMinRadiusSqE[1];

.visible .entry _Z6oxMainv(

)
{
	.local .align 4 .b8 	__local_depot0[4];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<123>;
	.reg .b16 	%rs<221>;
	.reg .f32 	%f<897>;
	.reg .b32 	%r<244>;
	.reg .b64 	%rd<369>;


	mov.u64 	%rd368, __local_depot0;
	cvta.local.u64 	%SP, %rd368;
	ld.global.v2.u32 	{%r26, %r27}, [pixelID];
	cvt.u64.u32	%rd12, %r26;
	cvt.u64.u32	%rd13, %r27;
	mov.u64 	%rd16, uvnormal;
	cvta.global.u64 	%rd11, %rd16;
	mov.u32 	%r24, 2;
	mov.u32 	%r25, 4;
	mov.u64 	%rd15, 0;
	// inline asm
	call (%rd10), _rt_buffer_get_64, (%rd11, %r24, %r25, %rd12, %rd13, %rd15, %rd15);
	// inline asm
	ld.u32 	%r1, [%rd10];
	shr.u32 	%r30, %r1, 16;
	cvt.u16.u32	%rs1, %r30;
	and.b16  	%rs12, %rs1, 255;
	cvt.u16.u32	%rs13, %r1;
	or.b16  	%rs14, %rs13, %rs12;
	setp.eq.s16	%p6, %rs14, 0;
	mov.f32 	%f876, 0f00000000;
	mov.f32 	%f877, %f876;
	mov.f32 	%f878, %f876;
	@%p6 bra 	BB0_2;

	ld.u8 	%rs15, [%rd10+1];
	and.b16  	%rs17, %rs13, 255;
	cvt.rn.f32.u16	%f106, %rs17;
	div.rn.f32 	%f107, %f106, 0f437F0000;
	fma.rn.f32 	%f108, %f107, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f109, %rs15;
	div.rn.f32 	%f110, %f109, 0f437F0000;
	fma.rn.f32 	%f111, %f110, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f112, %rs12;
	div.rn.f32 	%f113, %f112, 0f437F0000;
	fma.rn.f32 	%f114, %f113, 0f40000000, 0fBF800000;
	mul.f32 	%f115, %f111, %f111;
	fma.rn.f32 	%f116, %f108, %f108, %f115;
	fma.rn.f32 	%f117, %f114, %f114, %f116;
	sqrt.rn.f32 	%f118, %f117;
	rcp.rn.f32 	%f119, %f118;
	mul.f32 	%f876, %f108, %f119;
	mul.f32 	%f877, %f111, %f119;
	mul.f32 	%f878, %f114, %f119;

BB0_2:
	ld.global.v2.u32 	{%r31, %r32}, [pixelID];
	ld.global.v2.u32 	{%r34, %r35}, [tileInfo];
	add.s32 	%r2, %r31, %r34;
	add.s32 	%r3, %r32, %r35;
	setp.eq.f32	%p7, %f877, 0f00000000;
	setp.eq.f32	%p8, %f876, 0f00000000;
	and.pred  	%p9, %p8, %p7;
	setp.eq.f32	%p10, %f878, 0f00000000;
	and.pred  	%p11, %p9, %p10;
	@%p11 bra 	BB0_104;
	bra.uni 	BB0_3;

BB0_104:
	ld.global.u32 	%r243, [imageEnabled];
	and.b32  	%r192, %r243, 1;
	setp.eq.b32	%p115, %r192, 1;
	@!%p115 bra 	BB0_106;
	bra.uni 	BB0_105;

BB0_105:
	cvt.u64.u32	%rd256, %r2;
	cvt.u64.u32	%rd257, %r3;
	mov.u64 	%rd260, image;
	cvta.global.u64 	%rd255, %rd260;
	// inline asm
	call (%rd254), _rt_buffer_get_64, (%rd255, %r24, %r25, %rd256, %rd257, %rd15, %rd15);
	// inline asm
	mov.u16 	%rs153, 0;
	st.v4.u8 	[%rd254], {%rs153, %rs153, %rs153, %rs153};
	ld.global.u32 	%r243, [imageEnabled];

BB0_106:
	and.b32  	%r195, %r243, 8;
	setp.eq.s32	%p116, %r195, 0;
	@%p116 bra 	BB0_108;

	cvt.u64.u32	%rd264, %r3;
	cvt.u64.u32	%rd263, %r2;
	mov.u64 	%rd267, image_Mask;
	cvta.global.u64 	%rd262, %rd267;
	// inline asm
	call (%rd261), _rt_buffer_get_64, (%rd262, %r24, %r24, %rd263, %rd264, %rd15, %rd15);
	// inline asm
	mov.f32 	%f792, 0f00000000;
	cvt.rzi.u32.f32	%r198, %f792;
	cvt.u16.u32	%rs154, %r198;
	mov.u16 	%rs155, 0;
	st.v2.u8 	[%rd261], {%rs154, %rs155};
	ld.global.u32 	%r243, [imageEnabled];

BB0_108:
	cvt.u64.u32	%rd8, %r2;
	cvt.u64.u32	%rd9, %r3;
	and.b32  	%r199, %r243, 4;
	setp.eq.s32	%p117, %r199, 0;
	@%p117 bra 	BB0_112;

	ld.global.u32 	%r200, [additive];
	setp.eq.s32	%p118, %r200, 0;
	@%p118 bra 	BB0_111;

	mov.u64 	%rd280, image_HDR;
	cvta.global.u64 	%rd269, %rd280;
	mov.u32 	%r204, 8;
	// inline asm
	call (%rd268), _rt_buffer_get_64, (%rd269, %r24, %r204, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs162, %rs163, %rs164, %rs165}, [%rd268];
	// inline asm
	{  cvt.f32.f16 %f793, %rs162;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f794, %rs163;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f795, %rs164;}

	// inline asm
	// inline asm
	call (%rd274), _rt_buffer_get_64, (%rd269, %r24, %r204, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f796, %f793, 0f00000000;
	add.f32 	%f797, %f794, 0f00000000;
	add.f32 	%f798, %f795, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs161, %f798;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs160, %f797;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs159, %f796;}

	// inline asm
	mov.u16 	%rs166, 0;
	st.v4.u16 	[%rd274], {%rs159, %rs160, %rs161, %rs166};
	bra.uni 	BB0_112;

BB0_3:
	ld.global.v2.u32 	{%r41, %r42}, [pixelID];
	cvt.u64.u32	%rd19, %r41;
	cvt.u64.u32	%rd20, %r42;
	mov.u64 	%rd23, uvpos;
	cvta.global.u64 	%rd18, %rd23;
	mov.u32 	%r40, 12;
	// inline asm
	call (%rd17), _rt_buffer_get_64, (%rd18, %r24, %r40, %rd19, %rd20, %rd15, %rd15);
	// inline asm
	ld.global.f32 	%f122, [lightPos];
	ld.f32 	%f9, [%rd17+8];
	ld.f32 	%f8, [%rd17+4];
	ld.f32 	%f7, [%rd17];
	sub.f32 	%f123, %f122, %f7;
	ld.global.f32 	%f124, [lightPos+4];
	sub.f32 	%f125, %f124, %f8;
	ld.global.f32 	%f126, [lightPos+8];
	sub.f32 	%f127, %f126, %f9;
	mul.f32 	%f128, %f125, %f125;
	fma.rn.f32 	%f129, %f123, %f123, %f128;
	fma.rn.f32 	%f130, %f127, %f127, %f129;
	sqrt.rn.f32 	%f131, %f130;
	rcp.rn.f32 	%f132, %f131;
	mul.f32 	%f10, %f123, %f132;
	mul.f32 	%f11, %f125, %f132;
	mul.f32 	%f12, %f127, %f132;
	ld.global.f32 	%f133, [lightFalloffFakeDistanceMult];
	mul.f32 	%f13, %f131, %f133;
	ld.global.f32 	%f134, [lightInvCutoff];
	mul.f32 	%f14, %f131, %f134;
	mov.f32 	%f138, 0f40800000;
	abs.f32 	%f16, %f14;
	setp.lt.f32	%p12, %f16, 0f00800000;
	mul.f32 	%f140, %f16, 0f4B800000;
	selp.f32	%f141, 0fC3170000, 0fC2FE0000, %p12;
	selp.f32	%f142, %f140, %f16, %p12;
	mov.b32 	 %r45, %f142;
	and.b32  	%r46, %r45, 8388607;
	or.b32  	%r47, %r46, 1065353216;
	mov.b32 	 %f143, %r47;
	shr.u32 	%r48, %r45, 23;
	cvt.rn.f32.u32	%f144, %r48;
	add.f32 	%f145, %f141, %f144;
	setp.gt.f32	%p13, %f143, 0f3FB504F3;
	mul.f32 	%f146, %f143, 0f3F000000;
	add.f32 	%f147, %f145, 0f3F800000;
	selp.f32	%f148, %f146, %f143, %p13;
	selp.f32	%f149, %f147, %f145, %p13;
	add.f32 	%f150, %f148, 0fBF800000;
	add.f32 	%f121, %f148, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f120,%f121;
	// inline asm
	add.f32 	%f151, %f150, %f150;
	mul.f32 	%f152, %f120, %f151;
	mul.f32 	%f153, %f152, %f152;
	mov.f32 	%f154, 0f3C4CAF63;
	mov.f32 	%f155, 0f3B18F0FE;
	fma.rn.f32 	%f156, %f155, %f153, %f154;
	mov.f32 	%f157, 0f3DAAAABD;
	fma.rn.f32 	%f158, %f156, %f153, %f157;
	mul.rn.f32 	%f159, %f158, %f153;
	mul.rn.f32 	%f160, %f159, %f152;
	sub.f32 	%f161, %f150, %f152;
	neg.f32 	%f162, %f152;
	add.f32 	%f163, %f161, %f161;
	fma.rn.f32 	%f164, %f162, %f150, %f163;
	mul.rn.f32 	%f165, %f120, %f164;
	add.f32 	%f166, %f160, %f152;
	sub.f32 	%f167, %f152, %f166;
	add.f32 	%f168, %f160, %f167;
	add.f32 	%f169, %f165, %f168;
	add.f32 	%f170, %f166, %f169;
	sub.f32 	%f171, %f166, %f170;
	add.f32 	%f172, %f169, %f171;
	mov.f32 	%f173, 0f3F317200;
	mul.rn.f32 	%f174, %f149, %f173;
	mov.f32 	%f175, 0f35BFBE8E;
	mul.rn.f32 	%f176, %f149, %f175;
	add.f32 	%f177, %f174, %f170;
	sub.f32 	%f178, %f174, %f177;
	add.f32 	%f179, %f170, %f178;
	add.f32 	%f180, %f172, %f179;
	add.f32 	%f181, %f176, %f180;
	add.f32 	%f182, %f177, %f181;
	sub.f32 	%f183, %f177, %f182;
	add.f32 	%f184, %f181, %f183;
	mul.rn.f32 	%f185, %f138, %f182;
	neg.f32 	%f186, %f185;
	fma.rn.f32 	%f187, %f138, %f182, %f186;
	fma.rn.f32 	%f188, %f138, %f184, %f187;
	mov.f32 	%f189, 0f00000000;
	fma.rn.f32 	%f190, %f189, %f182, %f188;
	add.rn.f32 	%f191, %f185, %f190;
	neg.f32 	%f192, %f191;
	add.rn.f32 	%f193, %f185, %f192;
	add.rn.f32 	%f194, %f193, %f190;
	mov.b32 	 %r49, %f191;
	setp.eq.s32	%p14, %r49, 1118925336;
	add.s32 	%r50, %r49, -1;
	mov.b32 	 %f195, %r50;
	add.f32 	%f196, %f194, 0f37000000;
	selp.f32	%f197, %f195, %f191, %p14;
	selp.f32	%f17, %f196, %f194, %p14;
	mul.f32 	%f198, %f197, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f199, %f198;
	mov.f32 	%f200, 0fBF317200;
	fma.rn.f32 	%f201, %f199, %f200, %f197;
	mov.f32 	%f202, 0fB5BFBE8E;
	fma.rn.f32 	%f203, %f199, %f202, %f201;
	mul.f32 	%f204, %f203, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f205, %f204;
	add.f32 	%f206, %f199, 0f00000000;
	ex2.approx.f32 	%f207, %f206;
	mul.f32 	%f208, %f205, %f207;
	setp.lt.f32	%p15, %f197, 0fC2D20000;
	selp.f32	%f209, 0f00000000, %f208, %p15;
	setp.gt.f32	%p16, %f197, 0f42D20000;
	selp.f32	%f879, 0f7F800000, %f209, %p16;
	setp.eq.f32	%p17, %f879, 0f7F800000;
	@%p17 bra 	BB0_5;

	fma.rn.f32 	%f879, %f879, %f17, %f879;

BB0_5:
	mov.f32 	%f833, 0f40000000;
	cvt.rzi.f32.f32	%f832, %f833;
	add.f32 	%f831, %f832, %f832;
	mov.f32 	%f830, 0f40800000;
	sub.f32 	%f829, %f830, %f831;
	abs.f32 	%f828, %f829;
	setp.lt.f32	%p18, %f14, 0f00000000;
	setp.eq.f32	%p19, %f828, 0f3F800000;
	and.pred  	%p1, %p18, %p19;
	mov.b32 	 %r51, %f879;
	xor.b32  	%r52, %r51, -2147483648;
	mov.b32 	 %f210, %r52;
	selp.f32	%f881, %f210, %f879, %p1;
	setp.eq.f32	%p20, %f14, 0f00000000;
	@%p20 bra 	BB0_8;
	bra.uni 	BB0_6;

BB0_8:
	add.f32 	%f213, %f14, %f14;
	selp.f32	%f881, %f213, 0f00000000, %p19;
	bra.uni 	BB0_9;

BB0_6:
	setp.geu.f32	%p21, %f14, 0f00000000;
	@%p21 bra 	BB0_9;

	mov.f32 	%f867, 0f40800000;
	cvt.rzi.f32.f32	%f212, %f867;
	setp.neu.f32	%p22, %f212, 0f40800000;
	selp.f32	%f881, 0f7FFFFFFF, %f881, %p22;

BB0_9:
	abs.f32 	%f834, %f14;
	add.f32 	%f214, %f834, 0f40800000;
	mov.b32 	 %r53, %f214;
	setp.lt.s32	%p24, %r53, 2139095040;
	@%p24 bra 	BB0_14;

	abs.f32 	%f865, %f14;
	setp.gtu.f32	%p25, %f865, 0f7F800000;
	@%p25 bra 	BB0_13;
	bra.uni 	BB0_11;

BB0_13:
	add.f32 	%f881, %f14, 0f40800000;
	bra.uni 	BB0_14;

BB0_11:
	abs.f32 	%f866, %f14;
	setp.neu.f32	%p26, %f866, 0f7F800000;
	@%p26 bra 	BB0_14;

	selp.f32	%f881, 0fFF800000, 0f7F800000, %p1;

BB0_14:
	mov.f32 	%f835, 0f00000000;
	mov.f32 	%f884, 0f3F800000;
	sub.f32 	%f224, %f884, %f881;
	setp.eq.f32	%p27, %f14, 0f3F800000;
	selp.f32	%f225, 0f00000000, %f224, %p27;
	cvt.sat.f32.f32	%f226, %f225;
	ld.global.f32 	%f227, [lightFalloffMinRadiusSq];
	fma.rn.f32 	%f228, %f13, %f13, %f227;
	div.rn.f32 	%f28, %f226, %f228;
	mul.f32 	%f229, %f877, %f11;
	fma.rn.f32 	%f230, %f876, %f10, %f229;
	fma.rn.f32 	%f231, %f878, %f12, %f230;
	ld.global.u32 	%r56, [imageEnabled];
	and.b32  	%r57, %r56, 32;
	ld.global.u32 	%r58, [ignoreNormal];
	or.b32  	%r59, %r57, %r58;
	setp.eq.s32	%p28, %r59, 0;
	selp.f32	%f29, %f231, 0f3F800000, %p28;
	ld.global.f32 	%f232, [lightMatrix+24];
	mul.f32 	%f233, %f10, %f232;
	ld.global.f32 	%f234, [lightMatrix+28];
	mul.f32 	%f235, %f11, %f234;
	neg.f32 	%f236, %f235;
	sub.f32 	%f237, %f236, %f233;
	ld.global.f32 	%f238, [lightMatrix+32];
	mul.f32 	%f239, %f12, %f238;
	sub.f32 	%f240, %f237, %f239;
	setp.gt.f32	%p29, %f240, 0f00000000;
	ld.global.f32 	%f241, [lightMatrix];
	mul.f32 	%f242, %f241, %f10;
	sub.f32 	%f243, %f835, %f242;
	ld.global.f32 	%f244, [lightMatrix+4];
	mul.f32 	%f245, %f244, %f11;
	sub.f32 	%f246, %f243, %f245;
	ld.global.f32 	%f247, [lightMatrix+8];
	mul.f32 	%f248, %f247, %f12;
	sub.f32 	%f249, %f246, %f248;
	selp.f32	%f250, 0f3F800000, 0f00000000, %p29;
	ld.global.f32 	%f251, [lightMatrix+12];
	mul.f32 	%f252, %f251, %f10;
	sub.f32 	%f253, %f835, %f252;
	ld.global.f32 	%f254, [lightMatrix+16];
	mul.f32 	%f255, %f254, %f11;
	sub.f32 	%f256, %f253, %f255;
	ld.global.f32 	%f257, [lightMatrix+20];
	mul.f32 	%f258, %f257, %f12;
	sub.f32 	%f259, %f256, %f258;
	ld.global.u32 	%r54, [lightCookie];
	ld.global.f32 	%f260, [lightFOV];
	fma.rn.f32 	%f261, %f249, %f260, 0f3F000000;
	sub.f32 	%f219, %f884, %f261;
	fma.rn.f32 	%f220, %f259, %f260, 0f3F000000;
	// inline asm
	call (%f215, %f216, %f217, %f218), _rt_texture_get_f_id, (%r54, %r24, %f219, %f220, %f835, %f835);
	// inline asm
	max.f32 	%f262, %f215, %f216;
	max.f32 	%f263, %f262, %f217;
	mul.f32 	%f264, %f250, %f263;
	mul.f32 	%f265, %f28, %f264;
	ld.global.f32 	%f266, [lightColor+4];
	ld.global.f32 	%f267, [lightColor];
	max.f32 	%f268, %f267, %f266;
	ld.global.f32 	%f269, [lightColor+8];
	max.f32 	%f270, %f268, %f269;
	mul.f32 	%f271, %f265, %f270;
	setp.lt.f32	%p30, %f271, 0f3727C5AC;
	@%p30 bra 	BB0_84;
	bra.uni 	BB0_15;

BB0_84:
	ld.global.u32 	%r241, [imageEnabled];
	and.b32  	%r149, %r241, 1;
	setp.eq.b32	%p107, %r149, 1;
	@!%p107 bra 	BB0_86;
	bra.uni 	BB0_85;

BB0_85:
	cvt.u64.u32	%rd142, %r2;
	cvt.u64.u32	%rd143, %r3;
	mov.u64 	%rd146, image;
	cvta.global.u64 	%rd141, %rd146;
	// inline asm
	call (%rd140), _rt_buffer_get_64, (%rd141, %r24, %r25, %rd142, %rd143, %rd15, %rd15);
	// inline asm
	mov.u16 	%rs89, 1;
	mov.u16 	%rs90, 0;
	st.v4.u8 	[%rd140], {%rs90, %rs90, %rs90, %rs89};
	ld.global.u32 	%r241, [imageEnabled];

BB0_86:
	and.b32  	%r152, %r241, 8;
	setp.eq.s32	%p108, %r152, 0;
	@%p108 bra 	BB0_88;

	cvt.u64.u32	%rd150, %r3;
	cvt.u64.u32	%rd149, %r2;
	mov.u64 	%rd153, image_Mask;
	cvta.global.u64 	%rd148, %rd153;
	// inline asm
	call (%rd147), _rt_buffer_get_64, (%rd148, %r24, %r24, %rd149, %rd150, %rd15, %rd15);
	// inline asm
	mov.f32 	%f749, 0f00000000;
	cvt.rzi.u32.f32	%r155, %f749;
	cvt.u16.u32	%rs91, %r155;
	mov.u16 	%rs92, 255;
	st.v2.u8 	[%rd147], {%rs91, %rs92};
	ld.global.u32 	%r241, [imageEnabled];

BB0_88:
	cvt.u64.u32	%rd6, %r2;
	cvt.u64.u32	%rd7, %r3;
	and.b32  	%r156, %r241, 4;
	setp.eq.s32	%p109, %r156, 0;
	@%p109 bra 	BB0_92;

	ld.global.u32 	%r157, [additive];
	setp.eq.s32	%p110, %r157, 0;
	mov.f32 	%f750, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs93, %f750;}

	// inline asm
	@%p110 bra 	BB0_91;

	mov.u64 	%rd166, image_HDR;
	cvta.global.u64 	%rd155, %rd166;
	mov.u32 	%r161, 8;
	// inline asm
	call (%rd154), _rt_buffer_get_64, (%rd155, %r24, %r161, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs100, %rs101, %rs102, %rs103}, [%rd154];
	// inline asm
	{  cvt.f32.f16 %f751, %rs100;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f752, %rs101;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f753, %rs102;}

	// inline asm
	// inline asm
	call (%rd160), _rt_buffer_get_64, (%rd155, %r24, %r161, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f754, %f751, 0f00000000;
	add.f32 	%f755, %f752, 0f00000000;
	add.f32 	%f756, %f753, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs99, %f756;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs98, %f755;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs97, %f754;}

	// inline asm
	st.v4.u16 	[%rd160], {%rs97, %rs98, %rs99, %rs93};
	bra.uni 	BB0_92;

BB0_15:
	mov.f32 	%f883, 0f00000000;
	mul.f32 	%f273, %f7, 0f3456BF95;
	abs.f32 	%f274, %f876;
	div.rn.f32 	%f275, %f273, %f274;
	abs.f32 	%f276, %f877;
	mul.f32 	%f277, %f8, 0f3456BF95;
	div.rn.f32 	%f278, %f277, %f276;
	abs.f32 	%f279, %f878;
	mul.f32 	%f280, %f9, 0f3456BF95;
	div.rn.f32 	%f281, %f280, %f279;
	abs.f32 	%f282, %f275;
	abs.f32 	%f283, %f278;
	abs.f32 	%f284, %f281;
	mov.f32 	%f285, 0f38D1B717;
	max.f32 	%f286, %f282, %f285;
	max.f32 	%f287, %f283, %f285;
	max.f32 	%f288, %f284, %f285;
	fma.rn.f32 	%f33, %f876, %f286, %f7;
	fma.rn.f32 	%f34, %f877, %f287, %f8;
	fma.rn.f32 	%f35, %f878, %f288, %f9;
	ld.global.u32 	%r237, [samples];
	setp.lt.s32	%p31, %r237, 1;
	@%p31 bra 	BB0_18;

	mul.f32 	%f290, %f33, 0f3456BF95;
	abs.f32 	%f291, %f290;
	mul.f32 	%f292, %f34, 0f3456BF95;
	abs.f32 	%f293, %f292;
	mul.f32 	%f294, %f35, 0f3456BF95;
	abs.f32 	%f295, %f294;
	max.f32 	%f296, %f291, %f293;
	max.f32 	%f297, %f296, %f295;
	max.f32 	%f36, %f297, %f285;
	add.u64 	%rd24, %SP, 0;
	cvta.to.local.u64 	%rd2, %rd24;
	mov.f32 	%f883, 0f00000000;
	mov.u32 	%r236, 0;

BB0_17:
	cvt.rn.f32.s32	%f307, %r236;
	mul.f32 	%f308, %f307, 0f3DD32618;
	cvt.rmi.f32.f32	%f309, %f308;
	sub.f32 	%f310, %f308, %f309;
	mul.f32 	%f311, %f307, 0f3DD2F1AA;
	cvt.rmi.f32.f32	%f312, %f311;
	sub.f32 	%f313, %f311, %f312;
	mul.f32 	%f314, %f307, 0f3DC74539;
	cvt.rmi.f32.f32	%f315, %f314;
	sub.f32 	%f316, %f314, %f315;
	add.f32 	%f317, %f313, 0f4199851F;
	add.f32 	%f318, %f316, 0f4199851F;
	add.f32 	%f319, %f310, 0f4199851F;
	mul.f32 	%f320, %f313, %f318;
	fma.rn.f32 	%f321, %f310, %f317, %f320;
	fma.rn.f32 	%f322, %f319, %f316, %f321;
	add.f32 	%f323, %f310, %f322;
	add.f32 	%f324, %f313, %f322;
	add.f32 	%f325, %f316, %f322;
	add.f32 	%f326, %f323, %f324;
	mul.f32 	%f327, %f325, %f326;
	cvt.rmi.f32.f32	%f328, %f327;
	sub.f32 	%f329, %f327, %f328;
	add.f32 	%f330, %f323, %f325;
	mul.f32 	%f331, %f324, %f330;
	cvt.rmi.f32.f32	%f332, %f331;
	sub.f32 	%f333, %f331, %f332;
	add.f32 	%f334, %f324, %f325;
	mul.f32 	%f335, %f323, %f334;
	cvt.rmi.f32.f32	%f336, %f335;
	sub.f32 	%f337, %f335, %f336;
	fma.rn.f32 	%f338, %f329, 0f40000000, 0fBF800000;
	fma.rn.f32 	%f339, %f333, 0f40000000, 0fBF800000;
	fma.rn.f32 	%f340, %f337, 0f40000000, 0fBF800000;
	ld.global.f32 	%f341, [lightRadius];
	ld.global.f32 	%f342, [lightPos];
	fma.rn.f32 	%f343, %f341, %f338, %f342;
	ld.global.f32 	%f344, [lightPos+4];
	fma.rn.f32 	%f345, %f341, %f339, %f344;
	ld.global.f32 	%f346, [lightPos+8];
	fma.rn.f32 	%f347, %f341, %f340, %f346;
	sub.f32 	%f348, %f343, %f7;
	sub.f32 	%f349, %f345, %f8;
	sub.f32 	%f350, %f347, %f9;
	mul.f32 	%f351, %f349, %f349;
	fma.rn.f32 	%f352, %f348, %f348, %f351;
	fma.rn.f32 	%f353, %f350, %f350, %f352;
	sqrt.rn.f32 	%f306, %f353;
	rcp.rn.f32 	%f354, %f306;
	mul.f32 	%f302, %f354, %f348;
	mul.f32 	%f303, %f354, %f349;
	mul.f32 	%f304, %f354, %f350;
	ld.global.u32 	%r64, [imageEnabled];
	and.b32  	%r65, %r64, 32;
	setp.eq.s32	%p32, %r65, 0;
	selp.f32	%f355, 0f3F800000, 0f41200000, %p32;
	mul.f32 	%f305, %f355, %f36;
	mov.u32 	%r66, 1065353216;
	st.local.u32 	[%rd2], %r66;
	ld.global.u32 	%r61, [root];
	mov.u32 	%r62, 1;
	// inline asm
	call _rt_trace_64, (%r61, %f33, %f34, %f35, %f302, %f303, %f304, %r62, %f305, %f306, %rd24, %r25);
	// inline asm
	ld.local.f32 	%f356, [%rd2];
	add.f32 	%f883, %f883, %f356;
	ld.global.u32 	%r237, [samples];
	add.s32 	%r236, %r236, 1;
	setp.lt.s32	%p33, %r236, %r237;
	@%p33 bra 	BB0_17;

BB0_18:
	setp.eq.s32	%p34, %r237, 0;
	@%p34 bra 	BB0_20;

	cvt.rn.f32.s32	%f358, %r237;
	div.rn.f32 	%f884, %f883, %f358;

BB0_20:
	cvt.sat.f32.f32	%f359, %f29;
	mul.f32 	%f360, %f28, %f359;
	mul.f32 	%f361, %f884, %f360;
	ld.global.f32 	%f362, [lightColor];
	mul.f32 	%f363, %f362, %f361;
	ld.global.f32 	%f364, [lightColor+4];
	mul.f32 	%f365, %f364, %f361;
	ld.global.f32 	%f366, [lightColor+8];
	mul.f32 	%f367, %f361, %f366;
	mul.f32 	%f42, %f215, %f363;
	mul.f32 	%f43, %f216, %f365;
	mul.f32 	%f44, %f217, %f367;
	ld.global.u32 	%r239, [imageEnabled];
	and.b32  	%r67, %r239, 8;
	setp.eq.s32	%p35, %r67, 0;
	@%p35 bra 	BB0_33;

	mov.f32 	%f843, 0fB5BFBE8E;
	mov.f32 	%f842, 0fBF317200;
	mov.f32 	%f841, 0f35BFBE8E;
	mov.f32 	%f840, 0f3F317200;
	mov.f32 	%f839, 0f3DAAAABD;
	mov.f32 	%f838, 0f3C4CAF63;
	mov.f32 	%f837, 0f3B18F0FE;
	cvt.u64.u32	%rd28, %r2;
	cvt.u64.u32	%rd29, %r3;
	mov.u64 	%rd32, image_Mask;
	cvta.global.u64 	%rd27, %rd32;
	// inline asm
	call (%rd26), _rt_buffer_get_64, (%rd27, %r24, %r24, %rd28, %rd29, %rd15, %rd15);
	// inline asm
	abs.f32 	%f46, %f884;
	setp.lt.f32	%p36, %f46, 0f00800000;
	mul.f32 	%f373, %f46, 0f4B800000;
	selp.f32	%f374, 0fC3170000, 0fC2FE0000, %p36;
	selp.f32	%f375, %f373, %f46, %p36;
	mov.b32 	 %r70, %f375;
	and.b32  	%r71, %r70, 8388607;
	or.b32  	%r72, %r71, 1065353216;
	mov.b32 	 %f376, %r72;
	shr.u32 	%r73, %r70, 23;
	cvt.rn.f32.u32	%f377, %r73;
	add.f32 	%f378, %f374, %f377;
	setp.gt.f32	%p37, %f376, 0f3FB504F3;
	mul.f32 	%f379, %f376, 0f3F000000;
	add.f32 	%f380, %f378, 0f3F800000;
	selp.f32	%f381, %f379, %f376, %p37;
	selp.f32	%f382, %f380, %f378, %p37;
	add.f32 	%f383, %f381, 0fBF800000;
	add.f32 	%f369, %f381, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f368,%f369;
	// inline asm
	add.f32 	%f384, %f383, %f383;
	mul.f32 	%f385, %f368, %f384;
	mul.f32 	%f386, %f385, %f385;
	fma.rn.f32 	%f389, %f837, %f386, %f838;
	fma.rn.f32 	%f391, %f389, %f386, %f839;
	mul.rn.f32 	%f392, %f391, %f386;
	mul.rn.f32 	%f393, %f392, %f385;
	sub.f32 	%f394, %f383, %f385;
	neg.f32 	%f395, %f385;
	add.f32 	%f396, %f394, %f394;
	fma.rn.f32 	%f397, %f395, %f383, %f396;
	mul.rn.f32 	%f398, %f368, %f397;
	add.f32 	%f399, %f393, %f385;
	sub.f32 	%f400, %f385, %f399;
	add.f32 	%f401, %f393, %f400;
	add.f32 	%f402, %f398, %f401;
	add.f32 	%f403, %f399, %f402;
	sub.f32 	%f404, %f399, %f403;
	add.f32 	%f405, %f402, %f404;
	mul.rn.f32 	%f407, %f382, %f840;
	mul.rn.f32 	%f409, %f382, %f841;
	add.f32 	%f410, %f407, %f403;
	sub.f32 	%f411, %f407, %f410;
	add.f32 	%f412, %f403, %f411;
	add.f32 	%f413, %f405, %f412;
	add.f32 	%f414, %f409, %f413;
	add.f32 	%f415, %f410, %f414;
	sub.f32 	%f416, %f410, %f415;
	add.f32 	%f417, %f414, %f416;
	mov.f32 	%f418, 0f3EE8BA2E;
	mul.rn.f32 	%f419, %f418, %f415;
	neg.f32 	%f420, %f419;
	fma.rn.f32 	%f421, %f418, %f415, %f420;
	fma.rn.f32 	%f422, %f418, %f417, %f421;
	mov.f32 	%f423, 0f00000000;
	fma.rn.f32 	%f424, %f423, %f415, %f422;
	add.rn.f32 	%f425, %f419, %f424;
	neg.f32 	%f426, %f425;
	add.rn.f32 	%f427, %f419, %f426;
	add.rn.f32 	%f428, %f427, %f424;
	mov.b32 	 %r74, %f425;
	setp.eq.s32	%p38, %r74, 1118925336;
	add.s32 	%r75, %r74, -1;
	mov.b32 	 %f429, %r75;
	add.f32 	%f430, %f428, 0f37000000;
	selp.f32	%f431, %f429, %f425, %p38;
	selp.f32	%f47, %f430, %f428, %p38;
	mul.f32 	%f432, %f431, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f433, %f432;
	fma.rn.f32 	%f435, %f433, %f842, %f431;
	fma.rn.f32 	%f437, %f433, %f843, %f435;
	mul.f32 	%f438, %f437, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f439, %f438;
	add.f32 	%f440, %f433, 0f00000000;
	ex2.approx.f32 	%f441, %f440;
	mul.f32 	%f442, %f439, %f441;
	setp.lt.f32	%p39, %f431, 0fC2D20000;
	selp.f32	%f443, 0f00000000, %f442, %p39;
	setp.gt.f32	%p40, %f431, 0f42D20000;
	selp.f32	%f885, 0f7F800000, %f443, %p40;
	setp.eq.f32	%p41, %f885, 0f7F800000;
	@%p41 bra 	BB0_23;

	fma.rn.f32 	%f885, %f885, %f47, %f885;

BB0_23:
	mov.f32 	%f871, 0f3E68BA2E;
	cvt.rzi.f32.f32	%f870, %f871;
	fma.rn.f32 	%f869, %f870, 0fC0000000, 0f3EE8BA2E;
	abs.f32 	%f868, %f869;
	setp.lt.f32	%p42, %f884, 0f00000000;
	setp.eq.f32	%p43, %f868, 0f3F800000;
	and.pred  	%p2, %p42, %p43;
	mov.b32 	 %r76, %f885;
	xor.b32  	%r77, %r76, -2147483648;
	mov.b32 	 %f444, %r77;
	selp.f32	%f887, %f444, %f885, %p2;
	setp.eq.f32	%p44, %f884, 0f00000000;
	@%p44 bra 	BB0_26;
	bra.uni 	BB0_24;

BB0_26:
	add.f32 	%f447, %f884, %f884;
	selp.f32	%f887, %f447, 0f00000000, %p43;
	bra.uni 	BB0_27;

BB0_111:
	mov.u64 	%rd287, image_HDR;
	cvta.global.u64 	%rd282, %rd287;
	mov.u32 	%r206, 8;
	// inline asm
	call (%rd281), _rt_buffer_get_64, (%rd282, %r24, %r206, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f799, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs167, %f799;}

	// inline asm
	mov.u16 	%rs168, 0;
	st.v4.u16 	[%rd281], {%rs167, %rs167, %rs167, %rs168};

BB0_112:
	ld.global.u32 	%r207, [additive];
	setp.eq.s32	%p119, %r207, 0;
	@%p119 bra 	BB0_114;

	mov.u64 	%rd300, image_RNM0;
	cvta.global.u64 	%rd289, %rd300;
	mov.u32 	%r211, 8;
	// inline asm
	call (%rd288), _rt_buffer_get_64, (%rd289, %r24, %r211, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs175, %rs176, %rs177, %rs178}, [%rd288];
	// inline asm
	{  cvt.f32.f16 %f800, %rs175;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f801, %rs176;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f802, %rs177;}

	// inline asm
	// inline asm
	call (%rd294), _rt_buffer_get_64, (%rd289, %r24, %r211, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f803, %f800, 0f00000000;
	add.f32 	%f804, %f801, 0f00000000;
	add.f32 	%f805, %f802, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs174, %f805;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs173, %f804;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs172, %f803;}

	// inline asm
	mov.u16 	%rs179, 0;
	st.v4.u16 	[%rd294], {%rs172, %rs173, %rs174, %rs179};
	bra.uni 	BB0_115;

BB0_114:
	mov.u64 	%rd307, image_RNM0;
	cvta.global.u64 	%rd302, %rd307;
	mov.u32 	%r213, 8;
	// inline asm
	call (%rd301), _rt_buffer_get_64, (%rd302, %r24, %r213, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f806, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs180, %f806;}

	// inline asm
	mov.u16 	%rs181, 0;
	st.v4.u16 	[%rd301], {%rs180, %rs180, %rs180, %rs181};

BB0_115:
	ld.global.u32 	%r214, [additive];
	setp.eq.s32	%p120, %r214, 0;
	@%p120 bra 	BB0_117;

	mov.u64 	%rd320, image_RNM1;
	cvta.global.u64 	%rd309, %rd320;
	mov.u32 	%r218, 8;
	// inline asm
	call (%rd308), _rt_buffer_get_64, (%rd309, %r24, %r218, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs188, %rs189, %rs190, %rs191}, [%rd308];
	// inline asm
	{  cvt.f32.f16 %f807, %rs188;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f808, %rs189;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f809, %rs190;}

	// inline asm
	// inline asm
	call (%rd314), _rt_buffer_get_64, (%rd309, %r24, %r218, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f810, %f807, 0f00000000;
	add.f32 	%f811, %f808, 0f00000000;
	add.f32 	%f812, %f809, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs187, %f812;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs186, %f811;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs185, %f810;}

	// inline asm
	mov.u16 	%rs192, 0;
	st.v4.u16 	[%rd314], {%rs185, %rs186, %rs187, %rs192};
	bra.uni 	BB0_118;

BB0_117:
	mov.u64 	%rd327, image_RNM1;
	cvta.global.u64 	%rd322, %rd327;
	mov.u32 	%r220, 8;
	// inline asm
	call (%rd321), _rt_buffer_get_64, (%rd322, %r24, %r220, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f813, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs193, %f813;}

	// inline asm
	mov.u16 	%rs194, 0;
	st.v4.u16 	[%rd321], {%rs193, %rs193, %rs193, %rs194};

BB0_118:
	ld.global.u32 	%r221, [additive];
	setp.eq.s32	%p121, %r221, 0;
	@%p121 bra 	BB0_120;

	mov.u64 	%rd340, image_RNM2;
	cvta.global.u64 	%rd329, %rd340;
	mov.u32 	%r225, 8;
	// inline asm
	call (%rd328), _rt_buffer_get_64, (%rd329, %r24, %r225, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs201, %rs202, %rs203, %rs204}, [%rd328];
	// inline asm
	{  cvt.f32.f16 %f814, %rs201;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f815, %rs202;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f816, %rs203;}

	// inline asm
	// inline asm
	call (%rd334), _rt_buffer_get_64, (%rd329, %r24, %r225, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f817, %f814, 0f00000000;
	add.f32 	%f818, %f815, 0f00000000;
	add.f32 	%f819, %f816, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs200, %f819;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs199, %f818;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs198, %f817;}

	// inline asm
	mov.u16 	%rs205, 0;
	st.v4.u16 	[%rd334], {%rs198, %rs199, %rs200, %rs205};
	bra.uni 	BB0_121;

BB0_120:
	mov.u64 	%rd347, image_RNM2;
	cvta.global.u64 	%rd342, %rd347;
	mov.u32 	%r227, 8;
	// inline asm
	call (%rd341), _rt_buffer_get_64, (%rd342, %r24, %r227, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f820, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs206, %f820;}

	// inline asm
	mov.u16 	%rs207, 0;
	st.v4.u16 	[%rd341], {%rs206, %rs206, %rs206, %rs207};

BB0_121:
	ld.global.u32 	%r228, [additive];
	setp.eq.s32	%p122, %r228, 0;
	@%p122 bra 	BB0_123;

	mov.u64 	%rd360, image_RNM3;
	cvta.global.u64 	%rd349, %rd360;
	mov.u32 	%r232, 8;
	// inline asm
	call (%rd348), _rt_buffer_get_64, (%rd349, %r24, %r232, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs214, %rs215, %rs216, %rs217}, [%rd348];
	// inline asm
	{  cvt.f32.f16 %f821, %rs214;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f822, %rs215;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f823, %rs216;}

	// inline asm
	// inline asm
	call (%rd354), _rt_buffer_get_64, (%rd349, %r24, %r232, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f824, %f821, 0f00000000;
	add.f32 	%f825, %f822, 0f00000000;
	add.f32 	%f826, %f823, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs213, %f826;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs212, %f825;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs211, %f824;}

	// inline asm
	mov.u16 	%rs218, 0;
	st.v4.u16 	[%rd354], {%rs211, %rs212, %rs213, %rs218};
	bra.uni 	BB0_124;

BB0_123:
	mov.u64 	%rd367, image_RNM3;
	cvta.global.u64 	%rd362, %rd367;
	mov.u32 	%r234, 8;
	// inline asm
	call (%rd361), _rt_buffer_get_64, (%rd362, %r24, %r234, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f827, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs219, %f827;}

	// inline asm
	mov.u16 	%rs220, 0;
	st.v4.u16 	[%rd361], {%rs219, %rs219, %rs219, %rs220};
	bra.uni 	BB0_124;

BB0_91:
	mov.u64 	%rd173, image_HDR;
	cvta.global.u64 	%rd168, %rd173;
	mov.u32 	%r163, 8;
	// inline asm
	call (%rd167), _rt_buffer_get_64, (%rd168, %r24, %r163, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f757, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs104, %f757;}

	// inline asm
	st.v4.u16 	[%rd167], {%rs104, %rs104, %rs104, %rs93};

BB0_92:
	ld.global.u32 	%r164, [additive];
	setp.eq.s32	%p111, %r164, 0;
	mov.f32 	%f758, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs105, %f758;}

	// inline asm
	@%p111 bra 	BB0_94;

	mov.u64 	%rd186, image_RNM0;
	cvta.global.u64 	%rd175, %rd186;
	mov.u32 	%r168, 8;
	// inline asm
	call (%rd174), _rt_buffer_get_64, (%rd175, %r24, %r168, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs112, %rs113, %rs114, %rs115}, [%rd174];
	// inline asm
	{  cvt.f32.f16 %f759, %rs112;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f760, %rs113;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f761, %rs114;}

	// inline asm
	// inline asm
	call (%rd180), _rt_buffer_get_64, (%rd175, %r24, %r168, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f762, %f759, 0f00000000;
	add.f32 	%f763, %f760, 0f00000000;
	add.f32 	%f764, %f761, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs111, %f764;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs110, %f763;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs109, %f762;}

	// inline asm
	st.v4.u16 	[%rd180], {%rs109, %rs110, %rs111, %rs105};
	bra.uni 	BB0_95;

BB0_94:
	mov.u64 	%rd193, image_RNM0;
	cvta.global.u64 	%rd188, %rd193;
	mov.u32 	%r170, 8;
	// inline asm
	call (%rd187), _rt_buffer_get_64, (%rd188, %r24, %r170, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f765, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs116, %f765;}

	// inline asm
	st.v4.u16 	[%rd187], {%rs116, %rs116, %rs116, %rs105};

BB0_95:
	ld.global.u32 	%r171, [additive];
	setp.eq.s32	%p112, %r171, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs117, %f758;}

	// inline asm
	@%p112 bra 	BB0_97;

	mov.u64 	%rd206, image_RNM1;
	cvta.global.u64 	%rd195, %rd206;
	mov.u32 	%r175, 8;
	// inline asm
	call (%rd194), _rt_buffer_get_64, (%rd195, %r24, %r175, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs124, %rs125, %rs126, %rs127}, [%rd194];
	// inline asm
	{  cvt.f32.f16 %f767, %rs124;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f768, %rs125;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f769, %rs126;}

	// inline asm
	// inline asm
	call (%rd200), _rt_buffer_get_64, (%rd195, %r24, %r175, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f770, %f767, 0f00000000;
	add.f32 	%f771, %f768, 0f00000000;
	add.f32 	%f772, %f769, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs123, %f772;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs122, %f771;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs121, %f770;}

	// inline asm
	st.v4.u16 	[%rd200], {%rs121, %rs122, %rs123, %rs117};
	bra.uni 	BB0_98;

BB0_97:
	mov.u64 	%rd213, image_RNM1;
	cvta.global.u64 	%rd208, %rd213;
	mov.u32 	%r177, 8;
	// inline asm
	call (%rd207), _rt_buffer_get_64, (%rd208, %r24, %r177, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f773, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs128, %f773;}

	// inline asm
	st.v4.u16 	[%rd207], {%rs128, %rs128, %rs128, %rs117};

BB0_98:
	ld.global.u32 	%r178, [additive];
	setp.eq.s32	%p113, %r178, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs129, %f758;}

	// inline asm
	@%p113 bra 	BB0_100;

	mov.u64 	%rd226, image_RNM2;
	cvta.global.u64 	%rd215, %rd226;
	mov.u32 	%r182, 8;
	// inline asm
	call (%rd214), _rt_buffer_get_64, (%rd215, %r24, %r182, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs136, %rs137, %rs138, %rs139}, [%rd214];
	// inline asm
	{  cvt.f32.f16 %f775, %rs136;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f776, %rs137;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f777, %rs138;}

	// inline asm
	// inline asm
	call (%rd220), _rt_buffer_get_64, (%rd215, %r24, %r182, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f778, %f775, 0f00000000;
	add.f32 	%f779, %f776, 0f00000000;
	add.f32 	%f780, %f777, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs135, %f780;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs134, %f779;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs133, %f778;}

	// inline asm
	st.v4.u16 	[%rd220], {%rs133, %rs134, %rs135, %rs129};
	bra.uni 	BB0_101;

BB0_100:
	mov.u64 	%rd233, image_RNM2;
	cvta.global.u64 	%rd228, %rd233;
	mov.u32 	%r184, 8;
	// inline asm
	call (%rd227), _rt_buffer_get_64, (%rd228, %r24, %r184, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f781, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs140, %f781;}

	// inline asm
	st.v4.u16 	[%rd227], {%rs140, %rs140, %rs140, %rs129};

BB0_101:
	ld.global.u32 	%r185, [additive];
	setp.eq.s32	%p114, %r185, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs141, %f758;}

	// inline asm
	@%p114 bra 	BB0_103;

	mov.u64 	%rd246, image_RNM3;
	cvta.global.u64 	%rd235, %rd246;
	mov.u32 	%r189, 8;
	// inline asm
	call (%rd234), _rt_buffer_get_64, (%rd235, %r24, %r189, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs148, %rs149, %rs150, %rs151}, [%rd234];
	// inline asm
	{  cvt.f32.f16 %f783, %rs148;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f784, %rs149;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f785, %rs150;}

	// inline asm
	// inline asm
	call (%rd240), _rt_buffer_get_64, (%rd235, %r24, %r189, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f786, %f783, 0f00000000;
	add.f32 	%f787, %f784, 0f00000000;
	add.f32 	%f788, %f785, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs147, %f788;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs146, %f787;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs145, %f786;}

	// inline asm
	st.v4.u16 	[%rd240], {%rs145, %rs146, %rs147, %rs141};
	bra.uni 	BB0_124;

BB0_103:
	mov.u64 	%rd253, image_RNM3;
	cvta.global.u64 	%rd248, %rd253;
	mov.u32 	%r191, 8;
	// inline asm
	call (%rd247), _rt_buffer_get_64, (%rd248, %r24, %r191, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f789, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs152, %f789;}

	// inline asm
	st.v4.u16 	[%rd247], {%rs152, %rs152, %rs152, %rs141};
	bra.uni 	BB0_124;

BB0_24:
	setp.geu.f32	%p45, %f884, 0f00000000;
	@%p45 bra 	BB0_27;

	mov.f32 	%f875, 0f3EE8BA2E;
	cvt.rzi.f32.f32	%f446, %f875;
	setp.neu.f32	%p46, %f446, 0f3EE8BA2E;
	selp.f32	%f887, 0f7FFFFFFF, %f887, %p46;

BB0_27:
	abs.f32 	%f872, %f884;
	add.f32 	%f448, %f872, 0f3EE8BA2E;
	mov.b32 	 %r78, %f448;
	setp.lt.s32	%p48, %r78, 2139095040;
	@%p48 bra 	BB0_32;

	abs.f32 	%f873, %f884;
	setp.gtu.f32	%p49, %f873, 0f7F800000;
	@%p49 bra 	BB0_31;
	bra.uni 	BB0_29;

BB0_31:
	add.f32 	%f887, %f884, 0f3EE8BA2E;
	bra.uni 	BB0_32;

BB0_29:
	abs.f32 	%f874, %f884;
	setp.neu.f32	%p50, %f874, 0f7F800000;
	@%p50 bra 	BB0_32;

	selp.f32	%f887, 0fFF800000, 0f7F800000, %p2;

BB0_32:
	mul.f32 	%f449, %f887, 0f437F0000;
	setp.eq.f32	%p51, %f884, 0f3F800000;
	selp.f32	%f450, 0f437F0000, %f449, %p51;
	cvt.rzi.u32.f32	%r79, %f450;
	cvt.u16.u32	%rs19, %r79;
	mov.u16 	%rs20, 255;
	st.v2.u8 	[%rd26], {%rs19, %rs20};
	ld.global.u32 	%r239, [imageEnabled];

BB0_33:
	and.b32  	%r80, %r239, 1;
	setp.eq.b32	%p52, %r80, 1;
	@!%p52 bra 	BB0_68;
	bra.uni 	BB0_34;

BB0_34:
	mov.f32 	%f850, 0fB5BFBE8E;
	mov.f32 	%f849, 0fBF317200;
	mov.f32 	%f848, 0f35BFBE8E;
	mov.f32 	%f847, 0f3F317200;
	mov.f32 	%f846, 0f3DAAAABD;
	mov.f32 	%f845, 0f3C4CAF63;
	mov.f32 	%f844, 0f3B18F0FE;
	mov.f32 	%f453, 0f3E666666;
	cvt.rzi.f32.f32	%f454, %f453;
	fma.rn.f32 	%f455, %f454, 0fC0000000, 0f3EE66666;
	abs.f32 	%f58, %f455;
	abs.f32 	%f59, %f42;
	setp.lt.f32	%p53, %f59, 0f00800000;
	mul.f32 	%f456, %f59, 0f4B800000;
	selp.f32	%f457, 0fC3170000, 0fC2FE0000, %p53;
	selp.f32	%f458, %f456, %f59, %p53;
	mov.b32 	 %r81, %f458;
	and.b32  	%r82, %r81, 8388607;
	or.b32  	%r83, %r82, 1065353216;
	mov.b32 	 %f459, %r83;
	shr.u32 	%r84, %r81, 23;
	cvt.rn.f32.u32	%f460, %r84;
	add.f32 	%f461, %f457, %f460;
	setp.gt.f32	%p54, %f459, 0f3FB504F3;
	mul.f32 	%f462, %f459, 0f3F000000;
	add.f32 	%f463, %f461, 0f3F800000;
	selp.f32	%f464, %f462, %f459, %p54;
	selp.f32	%f465, %f463, %f461, %p54;
	add.f32 	%f466, %f464, 0fBF800000;
	add.f32 	%f452, %f464, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f451,%f452;
	// inline asm
	add.f32 	%f467, %f466, %f466;
	mul.f32 	%f468, %f451, %f467;
	mul.f32 	%f469, %f468, %f468;
	fma.rn.f32 	%f472, %f844, %f469, %f845;
	fma.rn.f32 	%f474, %f472, %f469, %f846;
	mul.rn.f32 	%f475, %f474, %f469;
	mul.rn.f32 	%f476, %f475, %f468;
	sub.f32 	%f477, %f466, %f468;
	neg.f32 	%f478, %f468;
	add.f32 	%f479, %f477, %f477;
	fma.rn.f32 	%f480, %f478, %f466, %f479;
	mul.rn.f32 	%f481, %f451, %f480;
	add.f32 	%f482, %f476, %f468;
	sub.f32 	%f483, %f468, %f482;
	add.f32 	%f484, %f476, %f483;
	add.f32 	%f485, %f481, %f484;
	add.f32 	%f486, %f482, %f485;
	sub.f32 	%f487, %f482, %f486;
	add.f32 	%f488, %f485, %f487;
	mul.rn.f32 	%f490, %f465, %f847;
	mul.rn.f32 	%f492, %f465, %f848;
	add.f32 	%f493, %f490, %f486;
	sub.f32 	%f494, %f490, %f493;
	add.f32 	%f495, %f486, %f494;
	add.f32 	%f496, %f488, %f495;
	add.f32 	%f497, %f492, %f496;
	add.f32 	%f498, %f493, %f497;
	sub.f32 	%f499, %f493, %f498;
	add.f32 	%f500, %f497, %f499;
	mov.f32 	%f501, 0f3EE66666;
	mul.rn.f32 	%f502, %f501, %f498;
	neg.f32 	%f503, %f502;
	fma.rn.f32 	%f504, %f501, %f498, %f503;
	fma.rn.f32 	%f505, %f501, %f500, %f504;
	mov.f32 	%f506, 0f00000000;
	fma.rn.f32 	%f507, %f506, %f498, %f505;
	add.rn.f32 	%f508, %f502, %f507;
	neg.f32 	%f509, %f508;
	add.rn.f32 	%f510, %f502, %f509;
	add.rn.f32 	%f511, %f510, %f507;
	mov.b32 	 %r85, %f508;
	setp.eq.s32	%p55, %r85, 1118925336;
	add.s32 	%r86, %r85, -1;
	mov.b32 	 %f512, %r86;
	add.f32 	%f513, %f511, 0f37000000;
	selp.f32	%f514, %f512, %f508, %p55;
	selp.f32	%f60, %f513, %f511, %p55;
	mul.f32 	%f515, %f514, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f516, %f515;
	fma.rn.f32 	%f518, %f516, %f849, %f514;
	fma.rn.f32 	%f520, %f516, %f850, %f518;
	mul.f32 	%f521, %f520, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f522, %f521;
	add.f32 	%f523, %f516, 0f00000000;
	ex2.approx.f32 	%f524, %f523;
	mul.f32 	%f525, %f522, %f524;
	setp.lt.f32	%p56, %f514, 0fC2D20000;
	selp.f32	%f526, 0f00000000, %f525, %p56;
	setp.gt.f32	%p57, %f514, 0f42D20000;
	selp.f32	%f888, 0f7F800000, %f526, %p57;
	setp.eq.f32	%p58, %f888, 0f7F800000;
	@%p58 bra 	BB0_36;

	fma.rn.f32 	%f888, %f888, %f60, %f888;

BB0_36:
	setp.lt.f32	%p59, %f42, 0f00000000;
	setp.eq.f32	%p60, %f58, 0f3F800000;
	and.pred  	%p3, %p59, %p60;
	mov.b32 	 %r87, %f888;
	xor.b32  	%r88, %r87, -2147483648;
	mov.b32 	 %f527, %r88;
	selp.f32	%f890, %f527, %f888, %p3;
	setp.eq.f32	%p61, %f42, 0f00000000;
	@%p61 bra 	BB0_39;
	bra.uni 	BB0_37;

BB0_39:
	add.f32 	%f530, %f42, %f42;
	selp.f32	%f890, %f530, 0f00000000, %p60;
	bra.uni 	BB0_40;

BB0_37:
	setp.geu.f32	%p62, %f42, 0f00000000;
	@%p62 bra 	BB0_40;

	cvt.rzi.f32.f32	%f529, %f501;
	setp.neu.f32	%p63, %f529, 0f3EE66666;
	selp.f32	%f890, 0f7FFFFFFF, %f890, %p63;

BB0_40:
	add.f32 	%f531, %f59, 0f3EE66666;
	mov.b32 	 %r89, %f531;
	setp.lt.s32	%p65, %r89, 2139095040;
	@%p65 bra 	BB0_45;

	setp.gtu.f32	%p66, %f59, 0f7F800000;
	@%p66 bra 	BB0_44;
	bra.uni 	BB0_42;

BB0_44:
	add.f32 	%f890, %f42, 0f3EE66666;
	bra.uni 	BB0_45;

BB0_42:
	setp.neu.f32	%p67, %f59, 0f7F800000;
	@%p67 bra 	BB0_45;

	selp.f32	%f890, 0fFF800000, 0f7F800000, %p3;

BB0_45:
	mov.f32 	%f857, 0fB5BFBE8E;
	mov.f32 	%f856, 0fBF317200;
	mov.f32 	%f855, 0f35BFBE8E;
	mov.f32 	%f854, 0f3F317200;
	mov.f32 	%f853, 0f3DAAAABD;
	mov.f32 	%f852, 0f3C4CAF63;
	mov.f32 	%f851, 0f3B18F0FE;
	setp.eq.f32	%p68, %f42, 0f3F800000;
	selp.f32	%f71, 0f3F800000, %f890, %p68;
	abs.f32 	%f72, %f43;
	setp.lt.f32	%p69, %f72, 0f00800000;
	mul.f32 	%f534, %f72, 0f4B800000;
	selp.f32	%f535, 0fC3170000, 0fC2FE0000, %p69;
	selp.f32	%f536, %f534, %f72, %p69;
	mov.b32 	 %r90, %f536;
	and.b32  	%r91, %r90, 8388607;
	or.b32  	%r92, %r91, 1065353216;
	mov.b32 	 %f537, %r92;
	shr.u32 	%r93, %r90, 23;
	cvt.rn.f32.u32	%f538, %r93;
	add.f32 	%f539, %f535, %f538;
	setp.gt.f32	%p70, %f537, 0f3FB504F3;
	mul.f32 	%f540, %f537, 0f3F000000;
	add.f32 	%f541, %f539, 0f3F800000;
	selp.f32	%f542, %f540, %f537, %p70;
	selp.f32	%f543, %f541, %f539, %p70;
	add.f32 	%f544, %f542, 0fBF800000;
	add.f32 	%f533, %f542, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f532,%f533;
	// inline asm
	add.f32 	%f545, %f544, %f544;
	mul.f32 	%f546, %f532, %f545;
	mul.f32 	%f547, %f546, %f546;
	fma.rn.f32 	%f550, %f851, %f547, %f852;
	fma.rn.f32 	%f552, %f550, %f547, %f853;
	mul.rn.f32 	%f553, %f552, %f547;
	mul.rn.f32 	%f554, %f553, %f546;
	sub.f32 	%f555, %f544, %f546;
	neg.f32 	%f556, %f546;
	add.f32 	%f557, %f555, %f555;
	fma.rn.f32 	%f558, %f556, %f544, %f557;
	mul.rn.f32 	%f559, %f532, %f558;
	add.f32 	%f560, %f554, %f546;
	sub.f32 	%f561, %f546, %f560;
	add.f32 	%f562, %f554, %f561;
	add.f32 	%f563, %f559, %f562;
	add.f32 	%f564, %f560, %f563;
	sub.f32 	%f565, %f560, %f564;
	add.f32 	%f566, %f563, %f565;
	mul.rn.f32 	%f568, %f543, %f854;
	mul.rn.f32 	%f570, %f543, %f855;
	add.f32 	%f571, %f568, %f564;
	sub.f32 	%f572, %f568, %f571;
	add.f32 	%f573, %f564, %f572;
	add.f32 	%f574, %f566, %f573;
	add.f32 	%f575, %f570, %f574;
	add.f32 	%f576, %f571, %f575;
	sub.f32 	%f577, %f571, %f576;
	add.f32 	%f578, %f575, %f577;
	mul.rn.f32 	%f580, %f501, %f576;
	neg.f32 	%f581, %f580;
	fma.rn.f32 	%f582, %f501, %f576, %f581;
	fma.rn.f32 	%f583, %f501, %f578, %f582;
	fma.rn.f32 	%f585, %f506, %f576, %f583;
	add.rn.f32 	%f586, %f580, %f585;
	neg.f32 	%f587, %f586;
	add.rn.f32 	%f588, %f580, %f587;
	add.rn.f32 	%f589, %f588, %f585;
	mov.b32 	 %r94, %f586;
	setp.eq.s32	%p71, %r94, 1118925336;
	add.s32 	%r95, %r94, -1;
	mov.b32 	 %f590, %r95;
	add.f32 	%f591, %f589, 0f37000000;
	selp.f32	%f592, %f590, %f586, %p71;
	selp.f32	%f73, %f591, %f589, %p71;
	mul.f32 	%f593, %f592, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f594, %f593;
	fma.rn.f32 	%f596, %f594, %f856, %f592;
	fma.rn.f32 	%f598, %f594, %f857, %f596;
	mul.f32 	%f599, %f598, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f600, %f599;
	add.f32 	%f601, %f594, 0f00000000;
	ex2.approx.f32 	%f602, %f601;
	mul.f32 	%f603, %f600, %f602;
	setp.lt.f32	%p72, %f592, 0fC2D20000;
	selp.f32	%f604, 0f00000000, %f603, %p72;
	setp.gt.f32	%p73, %f592, 0f42D20000;
	selp.f32	%f891, 0f7F800000, %f604, %p73;
	setp.eq.f32	%p74, %f891, 0f7F800000;
	@%p74 bra 	BB0_47;

	fma.rn.f32 	%f891, %f891, %f73, %f891;

BB0_47:
	setp.lt.f32	%p75, %f43, 0f00000000;
	and.pred  	%p4, %p75, %p60;
	mov.b32 	 %r96, %f891;
	xor.b32  	%r97, %r96, -2147483648;
	mov.b32 	 %f605, %r97;
	selp.f32	%f893, %f605, %f891, %p4;
	setp.eq.f32	%p77, %f43, 0f00000000;
	@%p77 bra 	BB0_50;
	bra.uni 	BB0_48;

BB0_50:
	add.f32 	%f608, %f43, %f43;
	selp.f32	%f893, %f608, 0f00000000, %p60;
	bra.uni 	BB0_51;

BB0_48:
	setp.geu.f32	%p78, %f43, 0f00000000;
	@%p78 bra 	BB0_51;

	cvt.rzi.f32.f32	%f607, %f501;
	setp.neu.f32	%p79, %f607, 0f3EE66666;
	selp.f32	%f893, 0f7FFFFFFF, %f893, %p79;

BB0_51:
	add.f32 	%f609, %f72, 0f3EE66666;
	mov.b32 	 %r98, %f609;
	setp.lt.s32	%p81, %r98, 2139095040;
	@%p81 bra 	BB0_56;

	setp.gtu.f32	%p82, %f72, 0f7F800000;
	@%p82 bra 	BB0_55;
	bra.uni 	BB0_53;

BB0_55:
	add.f32 	%f893, %f43, 0f3EE66666;
	bra.uni 	BB0_56;

BB0_53:
	setp.neu.f32	%p83, %f72, 0f7F800000;
	@%p83 bra 	BB0_56;

	selp.f32	%f893, 0fFF800000, 0f7F800000, %p4;

BB0_56:
	mov.f32 	%f864, 0fB5BFBE8E;
	mov.f32 	%f863, 0fBF317200;
	mov.f32 	%f862, 0f35BFBE8E;
	mov.f32 	%f861, 0f3F317200;
	mov.f32 	%f860, 0f3DAAAABD;
	mov.f32 	%f859, 0f3C4CAF63;
	mov.f32 	%f858, 0f3B18F0FE;
	setp.eq.f32	%p84, %f43, 0f3F800000;
	selp.f32	%f84, 0f3F800000, %f893, %p84;
	abs.f32 	%f85, %f44;
	setp.lt.f32	%p85, %f85, 0f00800000;
	mul.f32 	%f612, %f85, 0f4B800000;
	selp.f32	%f613, 0fC3170000, 0fC2FE0000, %p85;
	selp.f32	%f614, %f612, %f85, %p85;
	mov.b32 	 %r99, %f614;
	and.b32  	%r100, %r99, 8388607;
	or.b32  	%r101, %r100, 1065353216;
	mov.b32 	 %f615, %r101;
	shr.u32 	%r102, %r99, 23;
	cvt.rn.f32.u32	%f616, %r102;
	add.f32 	%f617, %f613, %f616;
	setp.gt.f32	%p86, %f615, 0f3FB504F3;
	mul.f32 	%f618, %f615, 0f3F000000;
	add.f32 	%f619, %f617, 0f3F800000;
	selp.f32	%f620, %f618, %f615, %p86;
	selp.f32	%f621, %f619, %f617, %p86;
	add.f32 	%f622, %f620, 0fBF800000;
	add.f32 	%f611, %f620, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f610,%f611;
	// inline asm
	add.f32 	%f623, %f622, %f622;
	mul.f32 	%f624, %f610, %f623;
	mul.f32 	%f625, %f624, %f624;
	fma.rn.f32 	%f628, %f858, %f625, %f859;
	fma.rn.f32 	%f630, %f628, %f625, %f860;
	mul.rn.f32 	%f631, %f630, %f625;
	mul.rn.f32 	%f632, %f631, %f624;
	sub.f32 	%f633, %f622, %f624;
	neg.f32 	%f634, %f624;
	add.f32 	%f635, %f633, %f633;
	fma.rn.f32 	%f636, %f634, %f622, %f635;
	mul.rn.f32 	%f637, %f610, %f636;
	add.f32 	%f638, %f632, %f624;
	sub.f32 	%f639, %f624, %f638;
	add.f32 	%f640, %f632, %f639;
	add.f32 	%f641, %f637, %f640;
	add.f32 	%f642, %f638, %f641;
	sub.f32 	%f643, %f638, %f642;
	add.f32 	%f644, %f641, %f643;
	mul.rn.f32 	%f646, %f621, %f861;
	mul.rn.f32 	%f648, %f621, %f862;
	add.f32 	%f649, %f646, %f642;
	sub.f32 	%f650, %f646, %f649;
	add.f32 	%f651, %f642, %f650;
	add.f32 	%f652, %f644, %f651;
	add.f32 	%f653, %f648, %f652;
	add.f32 	%f654, %f649, %f653;
	sub.f32 	%f655, %f649, %f654;
	add.f32 	%f656, %f653, %f655;
	mul.rn.f32 	%f658, %f501, %f654;
	neg.f32 	%f659, %f658;
	fma.rn.f32 	%f660, %f501, %f654, %f659;
	fma.rn.f32 	%f661, %f501, %f656, %f660;
	fma.rn.f32 	%f663, %f506, %f654, %f661;
	add.rn.f32 	%f664, %f658, %f663;
	neg.f32 	%f665, %f664;
	add.rn.f32 	%f666, %f658, %f665;
	add.rn.f32 	%f667, %f666, %f663;
	mov.b32 	 %r103, %f664;
	setp.eq.s32	%p87, %r103, 1118925336;
	add.s32 	%r104, %r103, -1;
	mov.b32 	 %f668, %r104;
	add.f32 	%f669, %f667, 0f37000000;
	selp.f32	%f670, %f668, %f664, %p87;
	selp.f32	%f86, %f669, %f667, %p87;
	mul.f32 	%f671, %f670, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f672, %f671;
	fma.rn.f32 	%f674, %f672, %f863, %f670;
	fma.rn.f32 	%f676, %f672, %f864, %f674;
	mul.f32 	%f677, %f676, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f678, %f677;
	add.f32 	%f679, %f672, 0f00000000;
	ex2.approx.f32 	%f680, %f679;
	mul.f32 	%f681, %f678, %f680;
	setp.lt.f32	%p88, %f670, 0fC2D20000;
	selp.f32	%f682, 0f00000000, %f681, %p88;
	setp.gt.f32	%p89, %f670, 0f42D20000;
	selp.f32	%f894, 0f7F800000, %f682, %p89;
	setp.eq.f32	%p90, %f894, 0f7F800000;
	@%p90 bra 	BB0_58;

	fma.rn.f32 	%f894, %f894, %f86, %f894;

BB0_58:
	setp.lt.f32	%p91, %f44, 0f00000000;
	and.pred  	%p5, %p91, %p60;
	mov.b32 	 %r105, %f894;
	xor.b32  	%r106, %r105, -2147483648;
	mov.b32 	 %f683, %r106;
	selp.f32	%f896, %f683, %f894, %p5;
	setp.eq.f32	%p93, %f44, 0f00000000;
	@%p93 bra 	BB0_61;
	bra.uni 	BB0_59;

BB0_61:
	add.f32 	%f686, %f44, %f44;
	selp.f32	%f896, %f686, 0f00000000, %p60;
	bra.uni 	BB0_62;

BB0_59:
	setp.geu.f32	%p94, %f44, 0f00000000;
	@%p94 bra 	BB0_62;

	cvt.rzi.f32.f32	%f685, %f501;
	setp.neu.f32	%p95, %f685, 0f3EE66666;
	selp.f32	%f896, 0f7FFFFFFF, %f896, %p95;

BB0_62:
	add.f32 	%f687, %f85, 0f3EE66666;
	mov.b32 	 %r107, %f687;
	setp.lt.s32	%p97, %r107, 2139095040;
	@%p97 bra 	BB0_67;

	setp.gtu.f32	%p98, %f85, 0f7F800000;
	@%p98 bra 	BB0_66;
	bra.uni 	BB0_64;

BB0_66:
	add.f32 	%f896, %f44, 0f3EE66666;
	bra.uni 	BB0_67;

BB0_64:
	setp.neu.f32	%p99, %f85, 0f7F800000;
	@%p99 bra 	BB0_67;

	selp.f32	%f896, 0fFF800000, 0f7F800000, %p5;

BB0_67:
	mov.u32 	%r235, 4;
	setp.eq.f32	%p100, %f44, 0f3F800000;
	selp.f32	%f688, 0f3F800000, %f896, %p100;
	cvt.u64.u32	%rd36, %r3;
	cvt.u64.u32	%rd35, %r2;
	mov.u64 	%rd39, image;
	cvta.global.u64 	%rd34, %rd39;
	// inline asm
	call (%rd33), _rt_buffer_get_64, (%rd34, %r24, %r235, %rd35, %rd36, %rd15, %rd15);
	// inline asm
	cvt.sat.f32.f32	%f689, %f688;
	mul.f32 	%f690, %f689, 0f437FFD71;
	cvt.rzi.u32.f32	%r110, %f690;
	cvt.sat.f32.f32	%f691, %f84;
	mul.f32 	%f692, %f691, 0f437FFD71;
	cvt.rzi.u32.f32	%r111, %f692;
	cvt.sat.f32.f32	%f693, %f71;
	mul.f32 	%f694, %f693, 0f437FFD71;
	cvt.rzi.u32.f32	%r112, %f694;
	cvt.u16.u32	%rs21, %r110;
	cvt.u16.u32	%rs22, %r112;
	cvt.u16.u32	%rs23, %r111;
	mov.u16 	%rs24, 255;
	st.v4.u8 	[%rd33], {%rs21, %rs23, %rs22, %rs24};
	ld.global.u32 	%r239, [imageEnabled];

BB0_68:
	cvt.u64.u32	%rd4, %r2;
	cvt.u64.u32	%rd5, %r3;
	and.b32  	%r113, %r239, 4;
	setp.eq.s32	%p101, %r113, 0;
	@%p101 bra 	BB0_72;

	ld.global.u32 	%r114, [additive];
	setp.eq.s32	%p102, %r114, 0;
	mov.f32 	%f695, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs25, %f695;}

	// inline asm
	@%p102 bra 	BB0_71;

	mov.u64 	%rd52, image_HDR;
	cvta.global.u64 	%rd41, %rd52;
	mov.u32 	%r118, 8;
	// inline asm
	call (%rd40), _rt_buffer_get_64, (%rd41, %r24, %r118, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs32, %rs33, %rs34, %rs35}, [%rd40];
	// inline asm
	{  cvt.f32.f16 %f696, %rs32;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f697, %rs33;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f698, %rs34;}

	// inline asm
	// inline asm
	call (%rd46), _rt_buffer_get_64, (%rd41, %r24, %r118, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f699, %f42, %f696;
	add.f32 	%f700, %f43, %f697;
	add.f32 	%f701, %f44, %f698;
	// inline asm
	{  cvt.rn.f16.f32 %rs31, %f701;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs30, %f700;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs29, %f699;}

	// inline asm
	st.v4.u16 	[%rd46], {%rs29, %rs30, %rs31, %rs25};
	bra.uni 	BB0_72;

BB0_71:
	mov.u64 	%rd59, image_HDR;
	cvta.global.u64 	%rd54, %rd59;
	mov.u32 	%r120, 8;
	// inline asm
	call (%rd53), _rt_buffer_get_64, (%rd54, %r24, %r120, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs38, %f44;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs37, %f43;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs36, %f42;}

	// inline asm
	st.v4.u16 	[%rd53], {%rs36, %rs37, %rs38, %rs25};

BB0_72:
	mul.f32 	%f706, %f28, 0f3E800000;
	mul.f32 	%f707, %f706, %f884;
	ld.global.f32 	%f708, [lightColor];
	mul.f32 	%f709, %f707, %f708;
	ld.global.f32 	%f710, [lightColor+4];
	mul.f32 	%f711, %f707, %f710;
	ld.global.f32 	%f712, [lightColor+8];
	mul.f32 	%f713, %f707, %f712;
	mul.f32 	%f97, %f215, %f709;
	mul.f32 	%f98, %f216, %f711;
	mul.f32 	%f99, %f217, %f713;
	ld.global.u32 	%r121, [additive];
	setp.eq.s32	%p103, %r121, 0;
	mov.f32 	%f705, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs39, %f705;}

	// inline asm
	@%p103 bra 	BB0_74;

	mov.u64 	%rd72, image_RNM0;
	cvta.global.u64 	%rd61, %rd72;
	mov.u32 	%r125, 8;
	// inline asm
	call (%rd60), _rt_buffer_get_64, (%rd61, %r24, %r125, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs46, %rs47, %rs48, %rs49}, [%rd60];
	// inline asm
	{  cvt.f32.f16 %f714, %rs46;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f715, %rs47;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f716, %rs48;}

	// inline asm
	// inline asm
	call (%rd66), _rt_buffer_get_64, (%rd61, %r24, %r125, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f717, %f97, %f714;
	add.f32 	%f718, %f98, %f715;
	add.f32 	%f719, %f99, %f716;
	// inline asm
	{  cvt.rn.f16.f32 %rs45, %f719;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs44, %f718;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs43, %f717;}

	// inline asm
	st.v4.u16 	[%rd66], {%rs43, %rs44, %rs45, %rs39};
	bra.uni 	BB0_75;

BB0_74:
	mov.u64 	%rd79, image_RNM0;
	cvta.global.u64 	%rd74, %rd79;
	mov.u32 	%r127, 8;
	// inline asm
	call (%rd73), _rt_buffer_get_64, (%rd74, %r24, %r127, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs52, %f99;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs51, %f98;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs50, %f97;}

	// inline asm
	st.v4.u16 	[%rd73], {%rs50, %rs51, %rs52, %rs39};

BB0_75:
	fma.rn.f32 	%f100, %f10, 0f3F000000, 0f3F000000;
	fma.rn.f32 	%f101, %f11, 0f3F000000, 0f3F000000;
	fma.rn.f32 	%f102, %f12, 0f3F000000, 0f3F000000;
	ld.global.u32 	%r128, [additive];
	setp.eq.s32	%p104, %r128, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs53, %f705;}

	// inline asm
	@%p104 bra 	BB0_77;

	mov.u64 	%rd92, image_RNM1;
	cvta.global.u64 	%rd81, %rd92;
	mov.u32 	%r132, 8;
	// inline asm
	call (%rd80), _rt_buffer_get_64, (%rd81, %r24, %r132, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs60, %rs61, %rs62, %rs63}, [%rd80];
	// inline asm
	{  cvt.f32.f16 %f724, %rs60;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f725, %rs61;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f726, %rs62;}

	// inline asm
	// inline asm
	call (%rd86), _rt_buffer_get_64, (%rd81, %r24, %r132, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f727, %f100, %f724;
	add.f32 	%f728, %f100, %f725;
	add.f32 	%f729, %f100, %f726;
	// inline asm
	{  cvt.rn.f16.f32 %rs59, %f729;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs58, %f728;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs57, %f727;}

	// inline asm
	st.v4.u16 	[%rd86], {%rs57, %rs58, %rs59, %rs53};
	bra.uni 	BB0_78;

BB0_77:
	mov.u64 	%rd99, image_RNM1;
	cvta.global.u64 	%rd94, %rd99;
	mov.u32 	%r134, 8;
	// inline asm
	call (%rd93), _rt_buffer_get_64, (%rd94, %r24, %r134, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs64, %f100;}

	// inline asm
	st.v4.u16 	[%rd93], {%rs64, %rs64, %rs64, %rs53};

BB0_78:
	ld.global.u32 	%r135, [additive];
	setp.eq.s32	%p105, %r135, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs65, %f705;}

	// inline asm
	@%p105 bra 	BB0_80;

	mov.u64 	%rd112, image_RNM2;
	cvta.global.u64 	%rd101, %rd112;
	mov.u32 	%r139, 8;
	// inline asm
	call (%rd100), _rt_buffer_get_64, (%rd101, %r24, %r139, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs72, %rs73, %rs74, %rs75}, [%rd100];
	// inline asm
	{  cvt.f32.f16 %f732, %rs72;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f733, %rs73;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f734, %rs74;}

	// inline asm
	// inline asm
	call (%rd106), _rt_buffer_get_64, (%rd101, %r24, %r139, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f735, %f101, %f732;
	add.f32 	%f736, %f101, %f733;
	add.f32 	%f737, %f101, %f734;
	// inline asm
	{  cvt.rn.f16.f32 %rs71, %f737;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs70, %f736;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs69, %f735;}

	// inline asm
	st.v4.u16 	[%rd106], {%rs69, %rs70, %rs71, %rs65};
	bra.uni 	BB0_81;

BB0_80:
	mov.u64 	%rd119, image_RNM2;
	cvta.global.u64 	%rd114, %rd119;
	mov.u32 	%r141, 8;
	// inline asm
	call (%rd113), _rt_buffer_get_64, (%rd114, %r24, %r141, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs76, %f101;}

	// inline asm
	st.v4.u16 	[%rd113], {%rs76, %rs76, %rs76, %rs65};

BB0_81:
	ld.global.u32 	%r142, [additive];
	setp.eq.s32	%p106, %r142, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs77, %f705;}

	// inline asm
	@%p106 bra 	BB0_83;

	mov.u64 	%rd132, image_RNM3;
	cvta.global.u64 	%rd121, %rd132;
	mov.u32 	%r146, 8;
	// inline asm
	call (%rd120), _rt_buffer_get_64, (%rd121, %r24, %r146, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs84, %rs85, %rs86, %rs87}, [%rd120];
	// inline asm
	{  cvt.f32.f16 %f740, %rs84;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f741, %rs85;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f742, %rs86;}

	// inline asm
	// inline asm
	call (%rd126), _rt_buffer_get_64, (%rd121, %r24, %r146, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f743, %f102, %f740;
	add.f32 	%f744, %f102, %f741;
	add.f32 	%f745, %f102, %f742;
	// inline asm
	{  cvt.rn.f16.f32 %rs83, %f745;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs82, %f744;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs81, %f743;}

	// inline asm
	st.v4.u16 	[%rd126], {%rs81, %rs82, %rs83, %rs77};
	bra.uni 	BB0_124;

BB0_83:
	mov.u64 	%rd139, image_RNM3;
	cvta.global.u64 	%rd134, %rd139;
	mov.u32 	%r148, 8;
	// inline asm
	call (%rd133), _rt_buffer_get_64, (%rd134, %r24, %r148, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs88, %f102;}

	// inline asm
	st.v4.u16 	[%rd133], {%rs88, %rs88, %rs88, %rs77};

BB0_124:
	ret;
}


